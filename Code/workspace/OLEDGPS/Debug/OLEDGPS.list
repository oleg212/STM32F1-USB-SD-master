
OLEDGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003ff8  08003ff8  00013ff8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004098  08004098  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  08004098  08004098  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004098  08004098  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080040a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009c8  20000100  080041a0  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000400  20000ac8  080041a0  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b618  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e53  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00007d19  00000000  00000000  000405d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ea0  00000000  00000000  000482f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fec  00000000  00000000  00049190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023341  00000000  00000000  0004a17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022545  00000000  00000000  0006d4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a6f9f  00000000  00000000  0008fa02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000278c  00000000  00000000  001369a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00139130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fe0 	.word	0x08003fe0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	08003fe0 	.word	0x08003fe0

0800014c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800014c:	4a07      	ldr	r2, [pc, #28]	; (800016c <HAL_Init+0x20>)
{
 800014e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000152:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	f043 0310 	orr.w	r3, r3, #16
 8000158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015a:	f000 f825 	bl	80001a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800015e:	200f      	movs	r0, #15
 8000160:	f003 fcb0 	bl	8003ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000164:	f003 fc3c 	bl	80039e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000168:	2000      	movs	r0, #0
 800016a:	bd08      	pop	{r3, pc}
 800016c:	40022000 	.word	0x40022000

08000170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000170:	4a02      	ldr	r2, [pc, #8]	; (800017c <HAL_IncTick+0xc>)
 8000172:	6813      	ldr	r3, [r2, #0]
 8000174:	3301      	adds	r3, #1
 8000176:	6013      	str	r3, [r2, #0]
}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000011c 	.word	0x2000011c

08000180 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000180:	4b01      	ldr	r3, [pc, #4]	; (8000188 <HAL_GetTick+0x8>)
 8000182:	6818      	ldr	r0, [r3, #0]
}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	2000011c 	.word	0x2000011c

0800018c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800018c:	b513      	push	{r0, r1, r4, lr}
 800018e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000190:	f7ff fff6 	bl	8000180 <HAL_GetTick>
 8000194:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000196:	f7ff fff3 	bl	8000180 <HAL_GetTick>
 800019a:	9a01      	ldr	r2, [sp, #4]
 800019c:	1b03      	subs	r3, r0, r4
 800019e:	4293      	cmp	r3, r2
 80001a0:	d3f9      	bcc.n	8000196 <HAL_Delay+0xa>
  {
  }
}
 80001a2:	b002      	add	sp, #8
 80001a4:	bd10      	pop	{r4, pc}
	...

080001a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001a8:	4907      	ldr	r1, [pc, #28]	; (80001c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80001b6:	0412      	lsls	r2, r2, #16
 80001b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001c6:	4770      	bx	lr
 80001c8:	e000ed00 	.word	0xe000ed00

080001cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80001ce:	b530      	push	{r4, r5, lr}
 80001d0:	68dc      	ldr	r4, [r3, #12]
 80001d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001dc:	2b04      	cmp	r3, #4
 80001de:	bf28      	it	cs
 80001e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e8:	bf94      	ite	ls
 80001ea:	2400      	movls	r4, #0
 80001ec:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001ee:	fa05 f303 	lsl.w	r3, r5, r3
 80001f2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001f6:	40a5      	lsls	r5, r4
 80001f8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001fc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) < 0)
 80001fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000200:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	bfac      	ite	ge
 8000206:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020a:	4a07      	ldrlt	r2, [pc, #28]	; (8000228 <HAL_NVIC_SetPriority+0x5c>)
 800020c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000210:	b2db      	uxtb	r3, r3
 8000212:	bfb5      	itete	lt
 8000214:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021e:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000222:	bd30      	pop	{r4, r5, pc}
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	e000ed14 	.word	0xe000ed14

0800022c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800022c:	2301      	movs	r3, #1
 800022e:	0941      	lsrs	r1, r0, #5
 8000230:	4a03      	ldr	r2, [pc, #12]	; (8000240 <HAL_NVIC_EnableIRQ+0x14>)
 8000232:	f000 001f 	and.w	r0, r0, #31
 8000236:	4083      	lsls	r3, r0
 8000238:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000244:	3801      	subs	r0, #1
 8000246:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800024a:	d20b      	bcs.n	8000264 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800024c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	21f0      	movs	r1, #240	; 0xf0
 8000252:	4a05      	ldr	r2, [pc, #20]	; (8000268 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000254:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800025a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800025c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800025e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000260:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000262:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000264:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000266:	4770      	bx	lr
 8000268:	e000ed00 	.word	0xe000ed00

0800026c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800026c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000270:	691a      	ldr	r2, [r3, #16]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000272:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000274:	bf0c      	ite	eq
 8000276:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800027a:	f022 0204 	bicne.w	r2, r2, #4
 800027e:	611a      	str	r2, [r3, #16]
  }
}
 8000280:	4770      	bx	lr
	...

08000284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000288:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800028a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800028c:	4f64      	ldr	r7, [pc, #400]	; (8000420 <HAL_GPIO_Init+0x19c>)
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <HAL_GPIO_Init+0x1a0>)
      switch (GPIO_Init->Mode)
 8000290:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000428 <HAL_GPIO_Init+0x1a4>
 8000294:	f8df e194 	ldr.w	lr, [pc, #404]	; 800042c <HAL_GPIO_Init+0x1a8>
    ioposition = ((uint32_t)0x01) << position;
 8000298:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800029c:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 800029e:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002a2:	ea08 0405 	and.w	r4, r8, r5
    if (iocurrent == ioposition)
 80002a6:	ea38 0505 	bics.w	r5, r8, r5
 80002aa:	d17a      	bne.n	80003a2 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 80002ac:	684d      	ldr	r5, [r1, #4]
 80002ae:	2d03      	cmp	r5, #3
 80002b0:	d807      	bhi.n	80002c2 <HAL_GPIO_Init+0x3e>
 80002b2:	3d01      	subs	r5, #1
 80002b4:	2d02      	cmp	r5, #2
 80002b6:	f200 808d 	bhi.w	80003d4 <HAL_GPIO_Init+0x150>
 80002ba:	e8df f005 	tbb	[pc, r5]
 80002be:	a09b      	.short	0xa09b
 80002c0:	a6          	.byte	0xa6
 80002c1:	00          	.byte	0x00
 80002c2:	2d12      	cmp	r5, #18
 80002c4:	f000 809e 	beq.w	8000404 <HAL_GPIO_Init+0x180>
 80002c8:	d872      	bhi.n	80003b0 <HAL_GPIO_Init+0x12c>
 80002ca:	2d11      	cmp	r5, #17
 80002cc:	f000 8094 	beq.w	80003f8 <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002d0:	2cff      	cmp	r4, #255	; 0xff
 80002d2:	bf98      	it	ls
 80002d4:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002d6:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002da:	bf88      	it	hi
 80002dc:	f100 0a04 	addhi.w	sl, r0, #4
 80002e0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002e4:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80002e8:	bf88      	it	hi
 80002ea:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80002ec:	fa09 fb05 	lsl.w	fp, r9, r5
 80002f0:	ea28 080b 	bic.w	r8, r8, fp
 80002f4:	fa02 f505 	lsl.w	r5, r2, r5
 80002f8:	ea48 0505 	orr.w	r5, r8, r5
 80002fc:	f8ca 5000 	str.w	r5, [sl]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000300:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000304:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000308:	d04b      	beq.n	80003a2 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	69bd      	ldr	r5, [r7, #24]
 800030c:	f026 0803 	bic.w	r8, r6, #3
 8000310:	f045 0501 	orr.w	r5, r5, #1
 8000314:	61bd      	str	r5, [r7, #24]
 8000316:	69bd      	ldr	r5, [r7, #24]
 8000318:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800031c:	f005 0501 	and.w	r5, r5, #1
 8000320:	9501      	str	r5, [sp, #4]
 8000322:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000326:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800032c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2];
 8000330:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000334:	fa09 f90b 	lsl.w	r9, r9, fp
 8000338:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800033c:	4d3c      	ldr	r5, [pc, #240]	; (8000430 <HAL_GPIO_Init+0x1ac>)
 800033e:	42a8      	cmp	r0, r5
 8000340:	d067      	beq.n	8000412 <HAL_GPIO_Init+0x18e>
 8000342:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000346:	42a8      	cmp	r0, r5
 8000348:	d065      	beq.n	8000416 <HAL_GPIO_Init+0x192>
 800034a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800034e:	42a8      	cmp	r0, r5
 8000350:	d063      	beq.n	800041a <HAL_GPIO_Init+0x196>
 8000352:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000356:	42a8      	cmp	r0, r5
 8000358:	bf0c      	ite	eq
 800035a:	2503      	moveq	r5, #3
 800035c:	2504      	movne	r5, #4
 800035e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000362:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2] = temp;
 8000366:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800036a:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800036c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000370:	bf14      	ite	ne
 8000372:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000374:	43a5      	biceq	r5, r4
 8000376:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000378:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800037a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 800037e:	bf14      	ite	ne
 8000380:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000382:	43a5      	biceq	r5, r4
 8000384:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000386:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000388:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 800038c:	bf14      	ite	ne
 800038e:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000390:	43a5      	biceq	r5, r4
 8000392:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000394:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000396:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 800039a:	bf14      	ite	ne
 800039c:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800039e:	43a5      	biceq	r5, r4
 80003a0:	60dd      	str	r5, [r3, #12]
  for (position = 0; position < GPIO_NUMBER; position++)
 80003a2:	3601      	adds	r6, #1
 80003a4:	2e10      	cmp	r6, #16
 80003a6:	f47f af77 	bne.w	8000298 <HAL_GPIO_Init+0x14>
        }
      }
    }
  }
}
 80003aa:	b003      	add	sp, #12
 80003ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003b0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8000434 <HAL_GPIO_Init+0x1b0>
 80003b4:	454d      	cmp	r5, r9
 80003b6:	d00d      	beq.n	80003d4 <HAL_GPIO_Init+0x150>
 80003b8:	d818      	bhi.n	80003ec <HAL_GPIO_Init+0x168>
 80003ba:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80003be:	454d      	cmp	r5, r9
 80003c0:	d008      	beq.n	80003d4 <HAL_GPIO_Init+0x150>
 80003c2:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 80003c6:	454d      	cmp	r5, r9
 80003c8:	d004      	beq.n	80003d4 <HAL_GPIO_Init+0x150>
 80003ca:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80003ce:	454d      	cmp	r5, r9
 80003d0:	f47f af7e 	bne.w	80002d0 <HAL_GPIO_Init+0x4c>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003d4:	688a      	ldr	r2, [r1, #8]
 80003d6:	b1d2      	cbz	r2, 800040e <HAL_GPIO_Init+0x18a>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003d8:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003da:	bf08      	it	eq
 80003dc:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003e0:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80003e4:	bf18      	it	ne
 80003e6:	f8c0 8014 	strne.w	r8, [r0, #20]
 80003ea:	e771      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 80003ec:	4565      	cmp	r5, ip
 80003ee:	d0f1      	beq.n	80003d4 <HAL_GPIO_Init+0x150>
 80003f0:	4575      	cmp	r5, lr
 80003f2:	e7ed      	b.n	80003d0 <HAL_GPIO_Init+0x14c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003f4:	68ca      	ldr	r2, [r1, #12]
          break;
 80003f6:	e76b      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003f8:	68ca      	ldr	r2, [r1, #12]
 80003fa:	3204      	adds	r2, #4
          break;
 80003fc:	e768      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003fe:	68ca      	ldr	r2, [r1, #12]
 8000400:	3208      	adds	r2, #8
          break;
 8000402:	e765      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000404:	68ca      	ldr	r2, [r1, #12]
 8000406:	320c      	adds	r2, #12
          break;
 8000408:	e762      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
      switch (GPIO_Init->Mode)
 800040a:	2200      	movs	r2, #0
 800040c:	e760      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800040e:	2204      	movs	r2, #4
 8000410:	e75e      	b.n	80002d0 <HAL_GPIO_Init+0x4c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000412:	2500      	movs	r5, #0
 8000414:	e7a3      	b.n	800035e <HAL_GPIO_Init+0xda>
 8000416:	2501      	movs	r5, #1
 8000418:	e7a1      	b.n	800035e <HAL_GPIO_Init+0xda>
 800041a:	2502      	movs	r5, #2
 800041c:	e79f      	b.n	800035e <HAL_GPIO_Init+0xda>
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010400 	.word	0x40010400
 8000428:	10310000 	.word	0x10310000
 800042c:	10320000 	.word	0x10320000
 8000430:	40010800 	.word	0x40010800
 8000434:	10220000 	.word	0x10220000

08000438 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000438:	b10a      	cbz	r2, 800043e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800043a:	6101      	str	r1, [r0, #16]
  }
}
 800043c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800043e:	0409      	lsls	r1, r1, #16
 8000440:	e7fb      	b.n	800043a <HAL_GPIO_WritePin+0x2>

08000442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000446:	4604      	mov	r4, r0
{
 8000448:	b086      	sub	sp, #24
  if(hpcd == NULL)
 800044a:	2800      	cmp	r0, #0
 800044c:	d05e      	beq.n	800050c <HAL_PCD_Init+0xca>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800044e:	f890 33e9 	ldrb.w	r3, [r0, #1001]	; 0x3e9
 8000452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000456:	b91b      	cbnz	r3, 8000460 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000458:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800045c:	f003 fbc4 	bl	8003be8 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000460:	2303      	movs	r3, #3
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000462:	4625      	mov	r5, r4
  
  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000464:	466e      	mov	r6, sp
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000466:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  __HAL_PCD_DISABLE(hpcd);
 800046a:	f855 0b10 	ldr.w	r0, [r5], #16
 800046e:	f001 fc9b 	bl	8001da8 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000472:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000474:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000476:	682b      	ldr	r3, [r5, #0]
 8000478:	f104 0804 	add.w	r8, r4, #4
 800047c:	6033      	str	r3, [r6, #0]
 800047e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000482:	6820      	ldr	r0, [r4, #0]
 8000484:	f001 fc80 	bl	8001d88 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000488:	2100      	movs	r1, #0
 800048a:	6820      	ldr	r0, [r4, #0]
 800048c:	f001 fc96 	bl	8001dbc <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0; index < 15 ; index++)
 8000490:	2100      	movs	r1, #0
 8000492:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000494:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000496:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000498:	4608      	mov	r0, r1
 800049a:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 800049e:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004a2:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0; index < 15 ; index++)
 80004a4:	3101      	adds	r1, #1
 80004a6:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].maxpacket =  0;
    hpcd->IN_ep[index].xfer_buff = 0;
 80004a8:	e9c2 000e 	strd	r0, r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].is_in = 1;
 80004ac:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80004b0:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].xfer_len = 0;
 80004b4:	6410      	str	r0, [r2, #64]	; 0x40
  for (index = 0; index < 15 ; index++)
 80004b6:	f102 0220 	add.w	r2, r2, #32
 80004ba:	d1f0      	bne.n	800049e <HAL_PCD_Init+0x5c>
  }
  
  for (index = 0; index < 15 ; index++)
 80004bc:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[index].is_in = 0;
 80004be:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80004c0:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004c4:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0; index < 15 ; index++)
 80004c6:	3201      	adds	r2, #1
 80004c8:	2a0f      	cmp	r2, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
    hpcd->OUT_ep[index].maxpacket = 0;
    hpcd->OUT_ep[index].xfer_buff = 0;
 80004ca:	e9c3 7786 	strd	r7, r7, [r3, #536]	; 0x218
    hpcd->OUT_ep[index].is_in = 0;
 80004ce:	f883 7209 	strb.w	r7, [r3, #521]	; 0x209
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80004d2:	f883 720b 	strb.w	r7, [r3, #523]	; 0x20b
    hpcd->OUT_ep[index].xfer_len = 0;
 80004d6:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
  for (index = 0; index < 15 ; index++)
 80004da:	f103 0320 	add.w	r3, r3, #32
 80004de:	d1ef      	bne.n	80004c0 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80004e0:	466e      	mov	r6, sp
 80004e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004e6:	682b      	ldr	r3, [r5, #0]
 80004e8:	6033      	str	r3, [r6, #0]
 80004ea:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80004ee:	6820      	ldr	r0, [r4, #0]
 80004f0:	f001 fc66 	bl	8001dc0 <USB_DevInit>
  
  hpcd->USB_Address = 0;
  hpcd->State= HAL_PCD_STATE_READY;
 80004f4:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 80004f6:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 80004fa:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 80004fc:	f884 33e9 	strb.w	r3, [r4, #1001]	; 0x3e9
  USB_DevDisconnect (hpcd->Instance);  
 8000500:	f001 ff0d 	bl	800231e <USB_DevDisconnect>
  return HAL_OK;
 8000504:	2000      	movs	r0, #0
}
 8000506:	b006      	add	sp, #24
 8000508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800050c:	2001      	movs	r0, #1
 800050e:	e7fa      	b.n	8000506 <HAL_PCD_Init+0xc4>

08000510 <HAL_PCD_Start>:
  * @brief  Start The USB Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000510:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000512:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 8000516:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000518:	2b01      	cmp	r3, #1
 800051a:	d00e      	beq.n	800053a <HAL_PCD_Start+0x2a>
 800051c:	2101      	movs	r1, #1
 800051e:	f880 13e8 	strb.w	r1, [r0, #1000]	; 0x3e8
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 8000522:	f003 fc8e 	bl	8003e42 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000526:	6820      	ldr	r0, [r4, #0]
 8000528:	f001 fef7 	bl	800231a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	f001 fc32 	bl	8001d96 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000532:	2000      	movs	r0, #0
 8000534:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
}
 8000538:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800053a:	2002      	movs	r0, #2
 800053c:	e7fc      	b.n	8000538 <HAL_PCD_Start+0x28>

0800053e <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800053e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000540:	f890 23e8 	ldrb.w	r2, [r0, #1000]	; 0x3e8
{
 8000544:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000546:	2a01      	cmp	r2, #1
 8000548:	d00b      	beq.n	8000562 <HAL_PCD_SetAddress+0x24>
 800054a:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800054c:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  __HAL_LOCK(hpcd);
 8000550:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_SetDevAddress(hpcd->Instance, address);
 8000554:	6800      	ldr	r0, [r0, #0]
 8000556:	f001 feda 	bl	800230e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800055a:	2000      	movs	r0, #0
 800055c:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
}
 8000560:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000562:	2002      	movs	r0, #2
 8000564:	e7fc      	b.n	8000560 <HAL_PCD_SetAddress+0x22>

08000566 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000566:	b538      	push	{r3, r4, r5, lr}
 8000568:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 800056a:	b248      	sxtb	r0, r1
 800056c:	2800      	cmp	r0, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800056e:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000572:	bfb5      	itete	lt
 8000574:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000578:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800057c:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800057e:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000582:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8000584:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000586:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
 8000588:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800058a:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 800058c:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
 8000590:	2b01      	cmp	r3, #1
 8000592:	d009      	beq.n	80005a8 <HAL_PCD_EP_Open+0x42>
 8000594:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000596:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8000598:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 800059c:	f001 fc28 	bl	8001df0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80005a0:	2000      	movs	r0, #0
 80005a2:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return ret;
}
 80005a6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80005a8:	2002      	movs	r0, #2
 80005aa:	e7fc      	b.n	80005a6 <HAL_PCD_EP_Open+0x40>

080005ac <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 80005ac:	b24b      	sxtb	r3, r1
{  
 80005ae:	b510      	push	{r4, lr}
  if ((ep_addr & 0x80) == 0x80)
 80005b0:	2b00      	cmp	r3, #0
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005b2:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 80005b6:	bfb5      	itete	lt
 80005b8:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005bc:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80005c0:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005c2:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80005c6:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80005c8:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 80005ca:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80005cc:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{  
 80005d0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d009      	beq.n	80005ea <HAL_PCD_EP_Close+0x3e>
 80005d6:	2301      	movs	r3, #1
 80005d8:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80005dc:	6800      	ldr	r0, [r0, #0]
 80005de:	f001 fd61 	bl	80020a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
  return HAL_OK;
}
 80005e8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ea:	2002      	movs	r0, #2
 80005ec:	e7fc      	b.n	80005e8 <HAL_PCD_EP_Close+0x3c>

080005ee <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80005ee:	b570      	push	{r4, r5, r6, lr}
 80005f0:	4604      	mov	r4, r0
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 80005f2:	2600      	movs	r6, #0
 80005f4:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80005f8:	0145      	lsls	r5, r0, #5
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80005fa:	f505 7102 	add.w	r1, r5, #520	; 0x208
  ep->xfer_buff = pBuf;  
 80005fe:	4425      	add	r5, r4
  ep->xfer_len = len;
 8000600:	e9c5 2387 	strd	r2, r3, [r5, #540]	; 0x21c
  ep->xfer_count = 0;
 8000604:	f8c5 6224 	str.w	r6, [r5, #548]	; 0x224
  ep->is_in = 0;
 8000608:	f885 6209 	strb.w	r6, [r5, #521]	; 0x209
  ep->num = ep_addr & 0x7F;
 800060c:	f885 0208 	strb.w	r0, [r5, #520]	; 0x208
  
  __HAL_LOCK(hpcd);
 8000610:	f894 33e8 	ldrb.w	r3, [r4, #1000]	; 0x3e8
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000614:	4421      	add	r1, r4
  __HAL_LOCK(hpcd);
 8000616:	2b01      	cmp	r3, #1
 8000618:	d009      	beq.n	800062e <HAL_PCD_EP_Receive+0x40>
 800061a:	2301      	movs	r3, #1
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800061c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800061e:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
    USB_EPStartXfer(hpcd->Instance , ep);
 8000622:	f001 fe93 	bl	800234c <USB_EPStartXfer>
  }
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
 8000626:	4630      	mov	r0, r6
  __HAL_UNLOCK(hpcd);
 8000628:	f884 63e8 	strb.w	r6, [r4, #1000]	; 0x3e8
}
 800062c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800062e:	2002      	movs	r0, #2
 8000630:	e7fc      	b.n	800062c <HAL_PCD_EP_Receive+0x3e>

08000632 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000632:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000636:	eb00 1041 	add.w	r0, r0, r1, lsl #5
}
 800063a:	f8b0 0224 	ldrh.w	r0, [r0, #548]	; 0x224
 800063e:	4770      	bx	lr

08000640 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	4604      	mov	r4, r0
 8000644:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8000648:	0145      	lsls	r5, r0, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800064a:	f105 0128 	add.w	r1, r5, #40	; 0x28
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800064e:	4425      	add	r5, r4
  ep->xfer_len = len;
 8000650:	e9c5 230f 	strd	r2, r3, [r5, #60]	; 0x3c
  ep->xfer_count = 0;
 8000654:	2600      	movs	r6, #0
  ep->is_in = 1;
 8000656:	2301      	movs	r3, #1
  ep->xfer_count = 0;
 8000658:	646e      	str	r6, [r5, #68]	; 0x44
  ep->is_in = 1;
 800065a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
  ep->num = ep_addr & 0x7F;
 800065e:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
  
  __HAL_LOCK(hpcd);
 8000662:	f894 23e8 	ldrb.w	r2, [r4, #1000]	; 0x3e8
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000666:	4421      	add	r1, r4
  __HAL_LOCK(hpcd);
 8000668:	429a      	cmp	r2, r3
 800066a:	d008      	beq.n	800067e <HAL_PCD_EP_Transmit+0x3e>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800066c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800066e:	f884 33e8 	strb.w	r3, [r4, #1000]	; 0x3e8
    USB_EPStartXfer(hpcd->Instance , ep);
 8000672:	f001 fe6b 	bl	800234c <USB_EPStartXfer>
  }
  
  __HAL_UNLOCK(hpcd);
  
  return HAL_OK;
 8000676:	4630      	mov	r0, r6
  __HAL_UNLOCK(hpcd);
 8000678:	f884 63e8 	strb.w	r6, [r4, #1000]	; 0x3e8
}
 800067c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800067e:	2002      	movs	r0, #2
 8000680:	e7fc      	b.n	800067c <HAL_PCD_EP_Transmit+0x3c>
	...

08000684 <HAL_PCD_IRQHandler>:
{
 8000684:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000688:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800068a:	6800      	ldr	r0, [r0, #0]
 800068c:	f001 fe49 	bl	8002322 <USB_ReadInterrupts>
 8000690:	0400      	lsls	r0, r0, #16
 8000692:	f100 8094 	bmi.w	80007be <HAL_PCD_IRQHandler+0x13a>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000696:	6820      	ldr	r0, [r4, #0]
 8000698:	f001 fe43 	bl	8002322 <USB_ReadInterrupts>
 800069c:	0541      	lsls	r1, r0, #21
 800069e:	d50f      	bpl.n	80006c0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006a0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006a2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006ac:	041b      	lsls	r3, r3, #16
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006b4:	f003 fad1 	bl	8003c5a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 80006b8:	2100      	movs	r1, #0
 80006ba:	4620      	mov	r0, r4
 80006bc:	f7ff ff3f 	bl	800053e <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80006c0:	6820      	ldr	r0, [r4, #0]
 80006c2:	f001 fe2e 	bl	8002322 <USB_ReadInterrupts>
 80006c6:	0447      	lsls	r7, r0, #17
 80006c8:	d508      	bpl.n	80006dc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006d4:	041b      	lsls	r3, r3, #16
 80006d6:	0c1b      	lsrs	r3, r3, #16
 80006d8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80006dc:	6820      	ldr	r0, [r4, #0]
 80006de:	f001 fe20 	bl	8002322 <USB_ReadInterrupts>
 80006e2:	0486      	lsls	r6, r0, #18
 80006e4:	d508      	bpl.n	80006f8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80006e6:	6822      	ldr	r2, [r4, #0]
 80006e8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006f0:	041b      	lsls	r3, r3, #16
 80006f2:	0c1b      	lsrs	r3, r3, #16
 80006f4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80006f8:	6820      	ldr	r0, [r4, #0]
 80006fa:	f001 fe12 	bl	8002322 <USB_ReadInterrupts>
 80006fe:	04c5      	lsls	r5, r0, #19
 8000700:	d518      	bpl.n	8000734 <HAL_PCD_IRQHandler+0xb0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000702:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000704:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000706:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800070a:	f023 0304 	bic.w	r3, r3, #4
 800070e:	041b      	lsls	r3, r3, #16
 8000710:	0c1b      	lsrs	r3, r3, #16
 8000712:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000716:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 800071a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 800071e:	f003 fab9 	bl	8003c94 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000722:	6822      	ldr	r2, [r4, #0]
 8000724:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800072c:	041b      	lsls	r3, r3, #16
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000734:	6820      	ldr	r0, [r4, #0]
 8000736:	f001 fdf4 	bl	8002322 <USB_ReadInterrupts>
 800073a:	0500      	lsls	r0, r0, #20
 800073c:	d51d      	bpl.n	800077a <HAL_PCD_IRQHandler+0xf6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 800073e:	6820      	ldr	r0, [r4, #0]
 8000740:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	0c1b      	lsrs	r3, r3, #16
 800074c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000750:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000754:	b29b      	uxth	r3, r3
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800075e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000762:	b29b      	uxth	r3, r3
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 800076c:	f001 fdd9 	bl	8002322 <USB_ReadInterrupts>
 8000770:	04c1      	lsls	r1, r0, #19
 8000772:	d402      	bmi.n	800077a <HAL_PCD_IRQHandler+0xf6>
      HAL_PCD_SuspendCallback(hpcd);
 8000774:	4620      	mov	r0, r4
 8000776:	f003 fa7d 	bl	8003c74 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 800077a:	6820      	ldr	r0, [r4, #0]
 800077c:	f001 fdd1 	bl	8002322 <USB_ReadInterrupts>
 8000780:	0582      	lsls	r2, r0, #22
 8000782:	d50b      	bpl.n	800079c <HAL_PCD_IRQHandler+0x118>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000784:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8000786:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000788:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800078c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000790:	041b      	lsls	r3, r3, #16
 8000792:	0c1b      	lsrs	r3, r3, #16
 8000794:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000798:	f003 fa5b 	bl	8003c52 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 800079c:	6820      	ldr	r0, [r4, #0]
 800079e:	f001 fdc0 	bl	8002322 <USB_ReadInterrupts>
 80007a2:	05c3      	lsls	r3, r0, #23
 80007a4:	d508      	bpl.n	80007b8 <HAL_PCD_IRQHandler+0x134>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007a6:	6822      	ldr	r2, [r4, #0]
 80007a8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	0c1b      	lsrs	r3, r3, #16
 80007b4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80007b8:	b002      	add	sp, #8
 80007ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80007be:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80007c0:	4eca      	ldr	r6, [pc, #808]	; (8000aec <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80007c2:	4fcb      	ldr	r7, [pc, #812]	; (8000af0 <HAL_PCD_IRQHandler+0x46c>)
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80007c4:	f8df 832c 	ldr.w	r8, [pc, #812]	; 8000af4 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 80007c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80007cc:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80007d0:	6820      	ldr	r0, [r4, #0]
 80007d2:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80007dc:	041b      	lsls	r3, r3, #16
 80007de:	f57f af5a 	bpl.w	8000696 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80007e2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 80007e6:	f015 050f 	ands.w	r5, r5, #15
 80007ea:	f040 80aa 	bne.w	8000942 <HAL_PCD_IRQHandler+0x2be>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80007ee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007f2:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80007f4:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007f8:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80007fa:	d126      	bne.n	800084a <HAL_PCD_IRQHandler+0x1c6>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80007fc:	4033      	ands	r3, r6
 80007fe:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000800:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000804:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000808:	b29b      	uxth	r3, r3
 800080a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800080e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000812:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000816:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000818:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 800081c:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800081e:	6463      	str	r3, [r4, #68]	; 0x44
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000820:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 8000822:	63e2      	str	r2, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000824:	f003 fa0e 	bl	8003c44 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8000828:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0cf      	beq.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
 8000830:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000832:	6821      	ldr	r1, [r4, #0]
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8000834:	2a00      	cmp	r2, #0
 8000836:	d1cb      	bne.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000838:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000844:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000848:	e7c2      	b.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800084a:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 800084e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000852:	051a      	lsls	r2, r3, #20
 8000854:	d51f      	bpl.n	8000896 <HAL_PCD_IRQHandler+0x212>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000856:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800085a:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 800085e:	b29b      	uxth	r3, r3
 8000860:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000864:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000868:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 800086c:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000874:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000878:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 800087c:	f001 fe48 	bl	8002510 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000880:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000882:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000884:	8813      	ldrh	r3, [r2, #0]
 8000886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800088a:	051b      	lsls	r3, r3, #20
 800088c:	0d1b      	lsrs	r3, r3, #20
 800088e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000890:	f003 f9ca 	bl	8003c28 <HAL_PCD_SetupStageCallback>
 8000894:	e79c      	b.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000896:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800089a:	041b      	lsls	r3, r3, #16
 800089c:	d598      	bpl.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800089e:	8803      	ldrh	r3, [r0, #0]
 80008a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008a4:	051b      	lsls	r3, r3, #20
 80008a6:	0d1b      	lsrs	r3, r3, #20
 80008a8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008aa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008ae:	f894 2208 	ldrb.w	r2, [r4, #520]	; 0x208
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008b8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80008c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008c4:	f8c4 3224 	str.w	r3, [r4, #548]	; 0x224
          if (ep->xfer_count != 0)
 80008c8:	b163      	cbz	r3, 80008e4 <HAL_PCD_IRQHandler+0x260>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80008ca:	f8b4 220c 	ldrh.w	r2, [r4, #524]	; 0x20c
 80008ce:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 80008d2:	f001 fe1d 	bl	8002510 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80008d6:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80008da:	f8d4 2224 	ldr.w	r2, [r4, #548]	; 0x224
 80008de:	4413      	add	r3, r2
 80008e0:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 80008e4:	2100      	movs	r1, #0
 80008e6:	4620      	mov	r0, r4
 80008e8:	f003 f9a4 	bl	8003c34 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80008ec:	6822      	ldr	r2, [r4, #0]
 80008ee:	f8d4 5218 	ldr.w	r5, [r4, #536]	; 0x218
 80008f2:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 80008f6:	2d3e      	cmp	r5, #62	; 0x3e
 80008f8:	b289      	uxth	r1, r1
 80008fa:	f101 0106 	add.w	r1, r1, #6
 80008fe:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8000902:	d916      	bls.n	8000932 <HAL_PCD_IRQHandler+0x2ae>
 8000904:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000908:	06ed      	lsls	r5, r5, #27
 800090a:	bf04      	itt	eq
 800090c:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000910:	b29b      	uxtheq	r3, r3
 8000912:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
 8000916:	b29b      	uxth	r3, r3
 8000918:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800091c:	8813      	ldrh	r3, [r2, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	403b      	ands	r3, r7
 8000922:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	8013      	strh	r3, [r2, #0]
 8000930:	e74e      	b.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000932:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000936:	07ed      	lsls	r5, r5, #31
 8000938:	bf44      	itt	mi
 800093a:	3301      	addmi	r3, #1
 800093c:	b29b      	uxthmi	r3, r3
 800093e:	029b      	lsls	r3, r3, #10
 8000940:	e7e9      	b.n	8000916 <HAL_PCD_IRQHandler+0x292>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000942:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000946:	b29b      	uxth	r3, r3
 8000948:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 800094c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000950:	0419      	lsls	r1, r3, #16
 8000952:	d541      	bpl.n	80009d8 <HAL_PCD_IRQHandler+0x354>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000954:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 8000958:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800095c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000960:	051b      	lsls	r3, r3, #20
 8000962:	0d1b      	lsrs	r3, r3, #20
 8000964:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 8000968:	f891 3212 	ldrb.w	r3, [r1, #530]	; 0x212
 800096c:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000970:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8000974:	2b00      	cmp	r3, #0
 8000976:	d179      	bne.n	8000a6c <HAL_PCD_IRQHandler+0x3e8>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000978:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800097c:	f891 c208 	ldrb.w	ip, [r1, #520]	; 0x208
 8000980:	b29b      	uxth	r3, r3
 8000982:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000986:	3306      	adds	r3, #6
 8000988:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 800098c:	f3c3 0909 	ubfx	r9, r3, #0, #10
          if (count != 0)
 8000990:	f1b9 0f00 	cmp.w	r9, #0
 8000994:	d006      	beq.n	80009a4 <HAL_PCD_IRQHandler+0x320>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000996:	f8b1 220c 	ldrh.w	r2, [r1, #524]	; 0x20c
 800099a:	464b      	mov	r3, r9
 800099c:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 80009a0:	f001 fdb6 	bl	8002510 <USB_ReadPMA>
        ep->xfer_count+=count;
 80009a4:	eb04 010a 	add.w	r1, r4, sl
 80009a8:	f8d1 3224 	ldr.w	r3, [r1, #548]	; 0x224
        ep->xfer_buff+=count;
 80009ac:	f8d1 221c 	ldr.w	r2, [r1, #540]	; 0x21c
        ep->xfer_count+=count;
 80009b0:	444b      	add	r3, r9
 80009b2:	f8c1 3224 	str.w	r3, [r1, #548]	; 0x224
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80009b6:	f8d1 3220 	ldr.w	r3, [r1, #544]	; 0x220
        ep->xfer_buff+=count;
 80009ba:	444a      	add	r2, r9
 80009bc:	f8c1 221c 	str.w	r2, [r1, #540]	; 0x21c
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 80009c0:	b123      	cbz	r3, 80009cc <HAL_PCD_IRQHandler+0x348>
 80009c2:	f8d1 0218 	ldr.w	r0, [r1, #536]	; 0x218
 80009c6:	4581      	cmp	r9, r0
 80009c8:	f080 808a 	bcs.w	8000ae0 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80009cc:	44a2      	add	sl, r4
 80009ce:	4620      	mov	r0, r4
 80009d0:	f89a 1208 	ldrb.w	r1, [sl, #520]	; 0x208
 80009d4:	f003 f92e 	bl	8003c34 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80009d8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009dc:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 80009de:	061a      	lsls	r2, r3, #24
 80009e0:	f57f aef6 	bpl.w	80007d0 <HAL_PCD_IRQHandler+0x14c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009e4:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 80009e8:	eb04 1145 	add.w	r1, r4, r5, lsl #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	4033      	ands	r3, r6
 80009f0:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0)
 80009f4:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80009f8:	ea4f 1945 	mov.w	r9, r5, lsl #5
 80009fc:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8000a00:	3502      	adds	r5, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d178      	bne.n	8000af8 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a0a:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8000a14:	3302      	adds	r3, #2
 8000a16:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000a1a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a22:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0)
 8000a24:	b11b      	cbz	r3, 8000a2e <HAL_PCD_IRQHandler+0x3aa>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a26:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a28:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a2a:	f001 fc80 	bl	800232e <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a2e:	6822      	ldr	r2, [r4, #0]
 8000a30:	44a1      	add	r9, r4
 8000a32:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a36:	f899 1028 	ldrb.w	r1, [r9, #40]	; 0x28
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8000a44:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 8000a48:	f8d9 203c 	ldr.w	r2, [r9, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff+=ep->xfer_count;
 8000a50:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a52:	f8c9 3044 	str.w	r3, [r9, #68]	; 0x44
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8000a56:	f8d9 3040 	ldr.w	r3, [r9, #64]	; 0x40
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a5a:	4620      	mov	r0, r4
        ep->xfer_buff+=ep->xfer_count;
 8000a5c:	f8c9 203c 	str.w	r2, [r9, #60]	; 0x3c
        if (ep->xfer_len == 0)
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f040 8081 	bne.w	8000b68 <HAL_PCD_IRQHandler+0x4e4>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a66:	f003 f8ed 	bl	8003c44 <HAL_PCD_DataInStageCallback>
 8000a6a:	e6b1      	b.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000a6c:	f891 c208 	ldrb.w	ip, [r1, #520]	; 0x208
 8000a70:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000a74:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000a78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a7c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000a84:	d020      	beq.n	8000ac8 <HAL_PCD_IRQHandler+0x444>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a86:	3302      	adds	r3, #2
 8000a88:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000a8c:	f3c3 0909 	ubfx	r9, r3, #0, #10
            if (count != 0)
 8000a90:	f1b9 0f00 	cmp.w	r9, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_PCD_IRQHandler+0x420>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000a96:	464b      	mov	r3, r9
 8000a98:	f8b1 220e 	ldrh.w	r2, [r1, #526]	; 0x20e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000a9c:	f8d1 121c 	ldr.w	r1, [r1, #540]	; 0x21c
 8000aa0:	f001 fd36 	bl	8002510 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000aa4:	eb04 030a 	add.w	r3, r4, sl
 8000aa8:	f893 1208 	ldrb.w	r1, [r3, #520]	; 0x208
 8000aac:	6822      	ldr	r2, [r4, #0]
 8000aae:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ab6:	051b      	lsls	r3, r3, #20
 8000ab8:	0d1b      	lsrs	r3, r3, #20
 8000aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000abe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ac2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ac6:	e76d      	b.n	80009a4 <HAL_PCD_IRQHandler+0x320>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ac8:	3306      	adds	r3, #6
 8000aca:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000ace:	f3c3 0909 	ubfx	r9, r3, #0, #10
            if (count != 0)
 8000ad2:	f1b9 0f00 	cmp.w	r9, #0
 8000ad6:	d0e5      	beq.n	8000aa4 <HAL_PCD_IRQHandler+0x420>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ad8:	464b      	mov	r3, r9
 8000ada:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8000ade:	e7dd      	b.n	8000a9c <HAL_PCD_IRQHandler+0x418>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f891 1208 	ldrb.w	r1, [r1, #520]	; 0x208
 8000ae6:	f7ff fd82 	bl	80005ee <HAL_PCD_EP_Receive>
 8000aea:	e775      	b.n	80009d8 <HAL_PCD_IRQHandler+0x354>
 8000aec:	ffff8f0f 	.word	0xffff8f0f
 8000af0:	ffffbf8f 	.word	0xffffbf8f
 8000af4:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000af8:	f891 c028 	ldrb.w	ip, [r1, #40]	; 0x28
 8000afc:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000b00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b04:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b08:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4463      	add	r3, ip
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b10:	d01e      	beq.n	8000b50 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b12:	3302      	adds	r3, #2
 8000b14:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000b18:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b20:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000b22:	b11b      	cbz	r3, 8000b2c <HAL_PCD_IRQHandler+0x4a8>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b24:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b26:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b28:	f001 fc01 	bl	800232e <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b2c:	eb04 0309 	add.w	r3, r4, r9
 8000b30:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b3e:	051b      	lsls	r3, r3, #20
 8000b40:	0d1b      	lsrs	r3, r3, #20
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b4a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b4e:	e76e      	b.n	8000a2e <HAL_PCD_IRQHandler+0x3aa>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b50:	3306      	adds	r3, #6
 8000b52:	f852 3013 	ldr.w	r3, [r2, r3, lsl #1]
 8000b56:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b5e:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0)
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0e3      	beq.n	8000b2c <HAL_PCD_IRQHandler+0x4a8>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b64:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000b66:	e7de      	b.n	8000b26 <HAL_PCD_IRQHandler+0x4a2>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b68:	f7ff fd6a 	bl	8000640 <HAL_PCD_EP_Transmit>
 8000b6c:	e630      	b.n	80007d0 <HAL_PCD_IRQHandler+0x14c>
 8000b6e:	bf00      	nop

08000b70 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1;
 8000b70:	2201      	movs	r2, #1
{
 8000b72:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 8000b74:	b24b      	sxtb	r3, r1
 8000b76:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b78:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8000b7c:	bfb5      	itete	lt
 8000b7e:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000b82:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b86:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000b88:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000b8c:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 1;
 8000b8e:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000b90:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000b92:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000b94:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 8000b98:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d00e      	beq.n	8000bbc <HAL_PCD_EP_SetStall+0x4c>
 8000b9e:	f880 23e8 	strb.w	r2, [r0, #1000]	; 0x3e8
  USB_EPSetStall(hpcd->Instance , ep);
 8000ba2:	6800      	ldr	r0, [r0, #0]
 8000ba4:	f001 fb41 	bl	800222a <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8000ba8:	b925      	cbnz	r5, 8000bb4 <HAL_PCD_EP_SetStall+0x44>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000baa:	6820      	ldr	r0, [r4, #0]
 8000bac:	f504 717b 	add.w	r1, r4, #1004	; 0x3ec
 8000bb0:	f001 fbbb 	bl	800232a <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	e7fc      	b.n	8000bba <HAL_PCD_EP_SetStall+0x4a>

08000bc0 <HAL_PCD_EP_ClrStall>:
{
 8000bc0:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0;
 8000bc2:	2500      	movs	r5, #0
  if ((0x80 & ep_addr) == 0x80)
 8000bc4:	b24b      	sxtb	r3, r1
 8000bc6:	2b00      	cmp	r3, #0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000bc8:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8000bcc:	bfb5      	itete	lt
 8000bce:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd2:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000bd6:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bd8:	f501 7102 	addge.w	r1, r1, #520	; 0x208
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000bdc:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 8000bde:	708d      	strb	r5, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8000be0:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8000be2:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000be4:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 8000be8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d009      	beq.n	8000c02 <HAL_PCD_EP_ClrStall+0x42>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  USB_EPClearStall(hpcd->Instance , ep);
 8000bf4:	6800      	ldr	r0, [r0, #0]
 8000bf6:	f001 fb4a 	bl	800228e <USB_EPClearStall>
  return HAL_OK;
 8000bfa:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd); 
 8000bfc:	f884 53e8 	strb.w	r5, [r4, #1000]	; 0x3e8
}
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c02:	2002      	movs	r0, #2
 8000c04:	e7fc      	b.n	8000c00 <HAL_PCD_EP_ClrStall+0x40>

08000c06 <HAL_PCD_EP_Flush>:
{
 8000c06:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000c08:	f890 33e8 	ldrb.w	r3, [r0, #1000]	; 0x3e8
{
 8000c0c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d010      	beq.n	8000c34 <HAL_PCD_EP_Flush+0x2e>
 8000c12:	2301      	movs	r3, #1
 8000c14:	f880 33e8 	strb.w	r3, [r0, #1000]	; 0x3e8
  if ((ep_addr & 0x80) == 0x80)
 8000c18:	060b      	lsls	r3, r1, #24
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8000c1a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80) == 0x80)
 8000c1c:	d507      	bpl.n	8000c2e <HAL_PCD_EP_Flush+0x28>
    USB_FlushTxFifo(hpcd->Instance, ep_addr & 0x7F);
 8000c1e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000c22:	f001 f8e1 	bl	8001de8 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd); 
 8000c26:	2000      	movs	r0, #0
 8000c28:	f884 03e8 	strb.w	r0, [r4, #1000]	; 0x3e8
}
 8000c2c:	bd10      	pop	{r4, pc}
    USB_FlushRxFifo(hpcd->Instance);
 8000c2e:	f001 f8dd 	bl	8001dec <USB_FlushRxFifo>
 8000c32:	e7f8      	b.n	8000c26 <HAL_PCD_EP_Flush+0x20>
  __HAL_LOCK(hpcd);
 8000c34:	2002      	movs	r0, #2
 8000c36:	e7f9      	b.n	8000c2c <HAL_PCD_EP_Flush+0x26>

08000c38 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8000c38:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c3c:	bf1b      	ittet	ne
 8000c3e:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c42:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c46:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c4a:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c4c:	bf08      	it	eq
 8000c4e:	f500 7002 	addeq.w	r0, r0, #520	; 0x208
  if (ep_kind == PCD_SNG_BUF)
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c52:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 8000c54:	b91a      	cbnz	r2, 8000c5e <HAL_PCDEx_PMAConfig+0x26>
    ep->doublebuffer = 0;
 8000c56:	7282      	strb	r2, [r0, #10]
    ep->pmaadress = (uint16_t)pmaadress;
 8000c58:	8081      	strh	r1, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	4770      	bx	lr
    ep->doublebuffer = 1;
 8000c5e:	2201      	movs	r2, #1
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000c60:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 8000c62:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 8000c64:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8000c66:	8103      	strh	r3, [r0, #8]
 8000c68:	e7f7      	b.n	8000c5a <HAL_PCDEx_PMAConfig+0x22>
	...

08000c6c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c6c:	6803      	ldr	r3, [r0, #0]
{
 8000c6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c72:	07de      	lsls	r6, r3, #31
{
 8000c74:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c76:	d434      	bmi.n	8000ce2 <HAL_RCC_OscConfig+0x76>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c78:	682b      	ldr	r3, [r5, #0]
 8000c7a:	079c      	lsls	r4, r3, #30
 8000c7c:	f100 80a7 	bmi.w	8000dce <HAL_RCC_OscConfig+0x162>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	071a      	lsls	r2, r3, #28
 8000c84:	d523      	bpl.n	8000cce <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c86:	69aa      	ldr	r2, [r5, #24]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	4cb9      	ldr	r4, [pc, #740]	; (8000f70 <HAL_RCC_OscConfig+0x304>)
 8000c8c:	49b9      	ldr	r1, [pc, #740]	; (8000f74 <HAL_RCC_OscConfig+0x308>)
 8000c8e:	2a00      	cmp	r2, #0
 8000c90:	f000 8115 	beq.w	8000ebe <HAL_RCC_OscConfig+0x252>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c94:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ca0:	f7ff fa6e 	bl	8000180 <HAL_GetTick>
 8000ca4:	2602      	movs	r6, #2
 8000ca6:	4607      	mov	r7, r0
 8000ca8:	fa96 f3a6 	rbit	r3, r6
 8000cac:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cb0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cb2:	fa96 f3a6 	rbit	r3, r6
 8000cb6:	fab3 f383 	clz	r3, r3
 8000cba:	f003 031f 	and.w	r3, r3, #31
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	07db      	lsls	r3, r3, #31
 8000cc4:	f140 80f4 	bpl.w	8000eb0 <HAL_RCC_OscConfig+0x244>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fa5f 	bl	800018c <HAL_Delay>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cce:	682b      	ldr	r3, [r5, #0]
 8000cd0:	0759      	lsls	r1, r3, #29
 8000cd2:	f100 8114 	bmi.w	8000efe <HAL_RCC_OscConfig+0x292>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000cd6:	69ea      	ldr	r2, [r5, #28]
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8188 	bne.w	8000fee <HAL_RCC_OscConfig+0x382>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e020      	b.n	8000d24 <HAL_RCC_OscConfig+0xb8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce2:	4ca3      	ldr	r4, [pc, #652]	; (8000f70 <HAL_RCC_OscConfig+0x304>)
 8000ce4:	6863      	ldr	r3, [r4, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	d007      	beq.n	8000cfe <HAL_RCC_OscConfig+0x92>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cee:	6863      	ldr	r3, [r4, #4]
 8000cf0:	f003 030c 	and.w	r3, r3, #12
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d118      	bne.n	8000d2a <HAL_RCC_OscConfig+0xbe>
 8000cf8:	6863      	ldr	r3, [r4, #4]
 8000cfa:	03d8      	lsls	r0, r3, #15
 8000cfc:	d515      	bpl.n	8000d2a <HAL_RCC_OscConfig+0xbe>
 8000cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d02:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	fab3 f383 	clz	r3, r3
 8000d10:	f003 031f 	and.w	r3, r3, #31
 8000d14:	fa22 f303 	lsr.w	r3, r2, r3
 8000d18:	07d9      	lsls	r1, r3, #31
 8000d1a:	d5ad      	bpl.n	8000c78 <HAL_RCC_OscConfig+0xc>
 8000d1c:	686b      	ldr	r3, [r5, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1aa      	bne.n	8000c78 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000d22:	2001      	movs	r0, #1
}
 8000d24:	b002      	add	sp, #8
 8000d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2a:	686b      	ldr	r3, [r5, #4]
 8000d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d30:	d11c      	bne.n	8000d6c <HAL_RCC_OscConfig+0x100>
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d38:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d3a:	f7ff fa21 	bl	8000180 <HAL_GetTick>
 8000d3e:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000d42:	4606      	mov	r6, r0
 8000d44:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	fa97 f3a7 	rbit	r3, r7
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	f003 031f 	and.w	r3, r3, #31
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	07da      	lsls	r2, r3, #31
 8000d5c:	d48c      	bmi.n	8000c78 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d5e:	f7ff fa0f 	bl	8000180 <HAL_GetTick>
 8000d62:	1b80      	subs	r0, r0, r6
 8000d64:	2864      	cmp	r0, #100	; 0x64
 8000d66:	d9ed      	bls.n	8000d44 <HAL_RCC_OscConfig+0xd8>
            return HAL_TIMEOUT;
 8000d68:	2003      	movs	r0, #3
 8000d6a:	e7db      	b.n	8000d24 <HAL_RCC_OscConfig+0xb8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d6c:	bb03      	cbnz	r3, 8000db0 <HAL_RCC_OscConfig+0x144>
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	f44f 3700 	mov.w	r7, #131072	; 0x20000
 8000d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000d82:	f7ff f9fd 	bl	8000180 <HAL_GetTick>
 8000d86:	4606      	mov	r6, r0
 8000d88:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8c:	6822      	ldr	r2, [r4, #0]
 8000d8e:	fa97 f3a7 	rbit	r3, r7
 8000d92:	fab3 f383 	clz	r3, r3
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d9e:	07db      	lsls	r3, r3, #31
 8000da0:	f57f af6a 	bpl.w	8000c78 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000da4:	f7ff f9ec 	bl	8000180 <HAL_GetTick>
 8000da8:	1b80      	subs	r0, r0, r6
 8000daa:	2864      	cmp	r0, #100	; 0x64
 8000dac:	d9ec      	bls.n	8000d88 <HAL_RCC_OscConfig+0x11c>
 8000dae:	e7db      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db4:	6823      	ldr	r3, [r4, #0]
 8000db6:	d103      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x154>
 8000db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dbc:	6023      	str	r3, [r4, #0]
 8000dbe:	e7b8      	b.n	8000d32 <HAL_RCC_OscConfig+0xc6>
 8000dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dc4:	6023      	str	r3, [r4, #0]
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dcc:	e7b4      	b.n	8000d38 <HAL_RCC_OscConfig+0xcc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dce:	4c68      	ldr	r4, [pc, #416]	; (8000f70 <HAL_RCC_OscConfig+0x304>)
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	f013 0f0c 	tst.w	r3, #12
 8000dd6:	d007      	beq.n	8000de8 <HAL_RCC_OscConfig+0x17c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dd8:	6863      	ldr	r3, [r4, #4]
 8000dda:	f003 030c 	and.w	r3, r3, #12
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d120      	bne.n	8000e24 <HAL_RCC_OscConfig+0x1b8>
 8000de2:	6863      	ldr	r3, [r4, #4]
 8000de4:	03df      	lsls	r7, r3, #15
 8000de6:	d41d      	bmi.n	8000e24 <HAL_RCC_OscConfig+0x1b8>
 8000de8:	2302      	movs	r3, #2
 8000dea:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dee:	6822      	ldr	r2, [r4, #0]
 8000df0:	fa93 f3a3 	rbit	r3, r3
 8000df4:	fab3 f383 	clz	r3, r3
 8000df8:	f003 031f 	and.w	r3, r3, #31
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	07de      	lsls	r6, r3, #31
 8000e02:	d502      	bpl.n	8000e0a <HAL_RCC_OscConfig+0x19e>
 8000e04:	692b      	ldr	r3, [r5, #16]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d18b      	bne.n	8000d22 <HAL_RCC_OscConfig+0xb6>
 8000e0a:	22f8      	movs	r2, #248	; 0xf8
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e0c:	6821      	ldr	r1, [r4, #0]
 8000e0e:	fa92 f2a2 	rbit	r2, r2
 8000e12:	fab2 f282 	clz	r2, r2
 8000e16:	696b      	ldr	r3, [r5, #20]
 8000e18:	4093      	lsls	r3, r2
 8000e1a:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	6023      	str	r3, [r4, #0]
 8000e22:	e72d      	b.n	8000c80 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e24:	692a      	ldr	r2, [r5, #16]
 8000e26:	2301      	movs	r3, #1
 8000e28:	b302      	cbz	r2, 8000e6c <HAL_RCC_OscConfig+0x200>
 8000e2a:	fa93 f2a3 	rbit	r2, r3
        __HAL_RCC_HSI_ENABLE();
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000e38:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000e3c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e3e:	f7ff f99f 	bl	8000180 <HAL_GetTick>
 8000e42:	2702      	movs	r7, #2
 8000e44:	4606      	mov	r6, r0
 8000e46:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e4a:	6822      	ldr	r2, [r4, #0]
 8000e4c:	fa97 f3a7 	rbit	r3, r7
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	07d8      	lsls	r0, r3, #31
 8000e5e:	d4d4      	bmi.n	8000e0a <HAL_RCC_OscConfig+0x19e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e60:	f7ff f98e 	bl	8000180 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	2802      	cmp	r0, #2
 8000e68:	d9ed      	bls.n	8000e46 <HAL_RCC_OscConfig+0x1da>
 8000e6a:	e77d      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
 8000e6c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000e70:	fab3 f383 	clz	r3, r3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e7a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e80:	f7ff f97e 	bl	8000180 <HAL_GetTick>
 8000e84:	2702      	movs	r7, #2
 8000e86:	4606      	mov	r6, r0
 8000e88:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e8c:	6822      	ldr	r2, [r4, #0]
 8000e8e:	fa97 f3a7 	rbit	r3, r7
 8000e92:	fab3 f383 	clz	r3, r3
 8000e96:	f003 031f 	and.w	r3, r3, #31
 8000e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9e:	07d9      	lsls	r1, r3, #31
 8000ea0:	f57f aeee 	bpl.w	8000c80 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea4:	f7ff f96c 	bl	8000180 <HAL_GetTick>
 8000ea8:	1b80      	subs	r0, r0, r6
 8000eaa:	2802      	cmp	r0, #2
 8000eac:	d9ec      	bls.n	8000e88 <HAL_RCC_OscConfig+0x21c>
 8000eae:	e75b      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb0:	f7ff f966 	bl	8000180 <HAL_GetTick>
 8000eb4:	1bc0      	subs	r0, r0, r7
 8000eb6:	2802      	cmp	r0, #2
 8000eb8:	f67f aef6 	bls.w	8000ca8 <HAL_RCC_OscConfig+0x3c>
 8000ebc:	e754      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
 8000ebe:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_LSI_DISABLE();
 8000ec2:	fab3 f383 	clz	r3, r3
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      tickstart = HAL_GetTick();
 8000eca:	f7ff f959 	bl	8000180 <HAL_GetTick>
 8000ece:	2602      	movs	r6, #2
 8000ed0:	4607      	mov	r7, r0
 8000ed2:	fa96 f3a6 	rbit	r3, r6
 8000ed6:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eda:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000edc:	fa96 f3a6 	rbit	r3, r6
 8000ee0:	fab3 f383 	clz	r3, r3
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8000eec:	07d8      	lsls	r0, r3, #31
 8000eee:	f57f aeee 	bpl.w	8000cce <HAL_RCC_OscConfig+0x62>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ef2:	f7ff f945 	bl	8000180 <HAL_GetTick>
 8000ef6:	1bc0      	subs	r0, r0, r7
 8000ef8:	2802      	cmp	r0, #2
 8000efa:	d9ea      	bls.n	8000ed2 <HAL_RCC_OscConfig+0x266>
 8000efc:	e734      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	4c1c      	ldr	r4, [pc, #112]	; (8000f70 <HAL_RCC_OscConfig+0x304>)
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f00:	4e1d      	ldr	r6, [pc, #116]	; (8000f78 <HAL_RCC_OscConfig+0x30c>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	69e3      	ldr	r3, [r4, #28]
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61e3      	str	r3, [r4, #28]
 8000f0a:	69e3      	ldr	r3, [r4, #28]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	9301      	str	r3, [sp, #4]
 8000f12:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f14:	6833      	ldr	r3, [r6, #0]
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f1c:	f7ff f930 	bl	8000180 <HAL_GetTick>
 8000f20:	4607      	mov	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000f22:	6833      	ldr	r3, [r6, #0]
 8000f24:	05da      	lsls	r2, r3, #23
 8000f26:	d529      	bpl.n	8000f7c <HAL_RCC_OscConfig+0x310>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	68eb      	ldr	r3, [r5, #12]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d12c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x31c>
 8000f2e:	6a23      	ldr	r3, [r4, #32]
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000f36:	f7ff f923 	bl	8000180 <HAL_GetTick>
 8000f3a:	2602      	movs	r6, #2
 8000f3c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f241 3888 	movw	r8, #5000	; 0x1388
 8000f42:	fa96 f3a6 	rbit	r3, r6
 8000f46:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f4a:	6a22      	ldr	r2, [r4, #32]
 8000f4c:	fa96 f3a6 	rbit	r3, r6
 8000f50:	fab3 f383 	clz	r3, r3
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	fa22 f303 	lsr.w	r3, r2, r3
 8000f5c:	07db      	lsls	r3, r3, #31
 8000f5e:	f53f aeba 	bmi.w	8000cd6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff f90d 	bl	8000180 <HAL_GetTick>
 8000f66:	1bc0      	subs	r0, r0, r7
 8000f68:	4540      	cmp	r0, r8
 8000f6a:	d9ea      	bls.n	8000f42 <HAL_RCC_OscConfig+0x2d6>
 8000f6c:	e6fc      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	42420480 	.word	0x42420480
 8000f78:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f7c:	f7ff f900 	bl	8000180 <HAL_GetTick>
 8000f80:	1bc0      	subs	r0, r0, r7
 8000f82:	2864      	cmp	r0, #100	; 0x64
 8000f84:	d9cd      	bls.n	8000f22 <HAL_RCC_OscConfig+0x2b6>
 8000f86:	e6ef      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f88:	bb1b      	cbnz	r3, 8000fd2 <HAL_RCC_OscConfig+0x366>
 8000f8a:	6a23      	ldr	r3, [r4, #32]
 8000f8c:	2602      	movs	r6, #2
 8000f8e:	f023 0301 	bic.w	r3, r3, #1
 8000f92:	6223      	str	r3, [r4, #32]
 8000f94:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f96:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f9a:	f023 0304 	bic.w	r3, r3, #4
 8000f9e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000fa0:	f7ff f8ee 	bl	8000180 <HAL_GetTick>
 8000fa4:	4607      	mov	r7, r0
 8000fa6:	fa96 f3a6 	rbit	r3, r6
 8000faa:	fa96 f3a6 	rbit	r3, r6
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fae:	6a22      	ldr	r2, [r4, #32]
 8000fb0:	fa96 f3a6 	rbit	r3, r6
 8000fb4:	fab3 f383 	clz	r3, r3
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	07d8      	lsls	r0, r3, #31
 8000fc2:	f57f ae88 	bpl.w	8000cd6 <HAL_RCC_OscConfig+0x6a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f7ff f8db 	bl	8000180 <HAL_GetTick>
 8000fca:	1bc0      	subs	r0, r0, r7
 8000fcc:	4540      	cmp	r0, r8
 8000fce:	d9ea      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x33a>
 8000fd0:	e6ca      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	6a23      	ldr	r3, [r4, #32]
 8000fd6:	d103      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x374>
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6223      	str	r3, [r4, #32]
 8000fde:	e7a6      	b.n	8000f2e <HAL_RCC_OscConfig+0x2c2>
 8000fe0:	f023 0301 	bic.w	r3, r3, #1
 8000fe4:	6223      	str	r3, [r4, #32]
 8000fe6:	6a23      	ldr	r3, [r4, #32]
 8000fe8:	f023 0304 	bic.w	r3, r3, #4
 8000fec:	e7a2      	b.n	8000f34 <HAL_RCC_OscConfig+0x2c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fee:	4c44      	ldr	r4, [pc, #272]	; (8001100 <HAL_RCC_OscConfig+0x494>)
 8000ff0:	6863      	ldr	r3, [r4, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	f43f ae93 	beq.w	8000d22 <HAL_RCC_OscConfig+0xb6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ffc:	2a02      	cmp	r2, #2
 8000ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001002:	d159      	bne.n	80010b8 <HAL_RCC_OscConfig+0x44c>
 8001004:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001008:	fab3 f383 	clz	r3, r3
 800100c:	2200      	movs	r2, #0
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001014:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001018:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800101a:	f7ff f8b1 	bl	8000180 <HAL_GetTick>
 800101e:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8001022:	4606      	mov	r6, r0
 8001024:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001028:	6822      	ldr	r2, [r4, #0]
 800102a:	fa97 f3a7 	rbit	r3, r7
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	f003 031f 	and.w	r3, r3, #31
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	07d9      	lsls	r1, r3, #31
 800103c:	d436      	bmi.n	80010ac <HAL_RCC_OscConfig+0x440>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800103e:	6a2b      	ldr	r3, [r5, #32]
 8001040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001044:	d105      	bne.n	8001052 <HAL_RCC_OscConfig+0x3e6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001046:	6862      	ldr	r2, [r4, #4]
 8001048:	68a9      	ldr	r1, [r5, #8]
 800104a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800104e:	430a      	orrs	r2, r1
 8001050:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001052:	6862      	ldr	r2, [r4, #4]
 8001054:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001056:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800105a:	430b      	orrs	r3, r1
 800105c:	4313      	orrs	r3, r2
 800105e:	6063      	str	r3, [r4, #4]
 8001060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001064:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001068:	fab3 f383 	clz	r3, r3
 800106c:	2201      	movs	r2, #1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8001074:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8001078:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800107a:	f7ff f881 	bl	8000180 <HAL_GetTick>
 800107e:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8001082:	4605      	mov	r5, r0
 8001084:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	fa96 f3a6 	rbit	r3, r6
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	fa22 f303 	lsr.w	r3, r2, r3
 800109a:	07da      	lsls	r2, r3, #31
 800109c:	f53f ae1f 	bmi.w	8000cde <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010a0:	f7ff f86e 	bl	8000180 <HAL_GetTick>
 80010a4:	1b40      	subs	r0, r0, r5
 80010a6:	2802      	cmp	r0, #2
 80010a8:	d9ec      	bls.n	8001084 <HAL_RCC_OscConfig+0x418>
 80010aa:	e65d      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ac:	f7ff f868 	bl	8000180 <HAL_GetTick>
 80010b0:	1b80      	subs	r0, r0, r6
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9b6      	bls.n	8001024 <HAL_RCC_OscConfig+0x3b8>
 80010b6:	e657      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
 80010b8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80010bc:	fab3 f383 	clz	r3, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80010c8:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80010cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010ce:	f7ff f857 	bl	8000180 <HAL_GetTick>
 80010d2:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80010d6:	4605      	mov	r5, r0
 80010d8:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	fa96 f3a6 	rbit	r3, r6
 80010e2:	fab3 f383 	clz	r3, r3
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	fa22 f303 	lsr.w	r3, r2, r3
 80010ee:	07db      	lsls	r3, r3, #31
 80010f0:	f57f adf5 	bpl.w	8000cde <HAL_RCC_OscConfig+0x72>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010f4:	f7ff f844 	bl	8000180 <HAL_GetTick>
 80010f8:	1b40      	subs	r0, r0, r5
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d9ec      	bls.n	80010d8 <HAL_RCC_OscConfig+0x46c>
 80010fe:	e633      	b.n	8000d68 <HAL_RCC_OscConfig+0xfc>
 8001100:	40021000 	.word	0x40021000

08001104 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001104:	b530      	push	{r4, r5, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_RCC_GetSysClockFreq+0x80>)
{
 8001108:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800110a:	ac02      	add	r4, sp, #8
 800110c:	f103 0510 	add.w	r5, r3, #16
 8001110:	4622      	mov	r2, r4
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	6859      	ldr	r1, [r3, #4]
 8001116:	3308      	adds	r3, #8
 8001118:	c203      	stmia	r2!, {r0, r1}
 800111a:	42ab      	cmp	r3, r5
 800111c:	4614      	mov	r4, r2
 800111e:	d1f7      	bne.n	8001110 <HAL_RCC_GetSysClockFreq+0xc>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001120:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001124:	4c18      	ldr	r4, [pc, #96]	; (8001188 <HAL_RCC_GetSysClockFreq+0x84>)
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8001126:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800112a:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800112c:	f001 030c 	and.w	r3, r1, #12
 8001130:	2b08      	cmp	r3, #8
 8001132:	d124      	bne.n	800117e <HAL_RCC_GetSysClockFreq+0x7a>
 8001134:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001138:	fa92 f2a2 	rbit	r2, r2
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 800113c:	fab2 f282 	clz	r2, r2
 8001140:	f401 1370 	and.w	r3, r1, #3932160	; 0x3c0000
 8001144:	40d3      	lsrs	r3, r2
 8001146:	3318      	adds	r3, #24
 8001148:	446b      	add	r3, sp
 800114a:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800114e:	03cb      	lsls	r3, r1, #15
 8001150:	d513      	bpl.n	800117a <HAL_RCC_GetSysClockFreq+0x76>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001158:	fa92 f2a2 	rbit	r2, r2
 800115c:	fab2 f282 	clz	r2, r2
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	40d3      	lsrs	r3, r2
 8001166:	3318      	adds	r3, #24
 8001168:	446b      	add	r3, sp
 800116a:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_RCC_GetSysClockFreq+0x88>)
 8001170:	fbb3 f3f2 	udiv	r3, r3, r2
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001174:	4358      	muls	r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001176:	b007      	add	sp, #28
 8001178:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_RCC_GetSysClockFreq+0x8c>)
 800117c:	e7fa      	b.n	8001174 <HAL_RCC_GetSysClockFreq+0x70>
      sysclockfreq = HSE_VALUE;
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <HAL_RCC_GetSysClockFreq+0x88>)
  return sysclockfreq;
 8001180:	e7f9      	b.n	8001176 <HAL_RCC_GetSysClockFreq+0x72>
 8001182:	bf00      	nop
 8001184:	08003ff8 	.word	0x08003ff8
 8001188:	40021000 	.word	0x40021000
 800118c:	007a1200 	.word	0x007a1200
 8001190:	003d0900 	.word	0x003d0900

08001194 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001194:	4a54      	ldr	r2, [pc, #336]	; (80012e8 <HAL_RCC_ClockConfig+0x154>)
{
 8001196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800119a:	6813      	ldr	r3, [r2, #0]
{
 800119c:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	428b      	cmp	r3, r1
{
 80011a4:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011a6:	d32f      	bcc.n	8001208 <HAL_RCC_ClockConfig+0x74>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	0796      	lsls	r6, r2, #30
 80011ac:	d439      	bmi.n	8001222 <HAL_RCC_ClockConfig+0x8e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ae:	07d0      	lsls	r0, r2, #31
 80011b0:	d43f      	bmi.n	8001232 <HAL_RCC_ClockConfig+0x9e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80011b2:	4a4d      	ldr	r2, [pc, #308]	; (80012e8 <HAL_RCC_ClockConfig+0x154>)
 80011b4:	6813      	ldr	r3, [r2, #0]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	42ab      	cmp	r3, r5
 80011bc:	f200 8082 	bhi.w	80012c4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	4d4a      	ldr	r5, [pc, #296]	; (80012ec <HAL_RCC_ClockConfig+0x158>)
 80011c4:	f012 0f04 	tst.w	r2, #4
 80011c8:	f040 8087 	bne.w	80012da <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	0713      	lsls	r3, r2, #28
 80011ce:	d506      	bpl.n	80011de <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d0:	686b      	ldr	r3, [r5, #4]
 80011d2:	6922      	ldr	r2, [r4, #16]
 80011d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80011d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011dc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011de:	f7ff ff91 	bl	8001104 <HAL_RCC_GetSysClockFreq>
 80011e2:	22f0      	movs	r2, #240	; 0xf0
 80011e4:	686b      	ldr	r3, [r5, #4]
 80011e6:	fa92 f2a2 	rbit	r2, r2
 80011ea:	fab2 f282 	clz	r2, r2
 80011ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f2:	40d3      	lsrs	r3, r2
 80011f4:	4a3e      	ldr	r2, [pc, #248]	; (80012f0 <HAL_RCC_ClockConfig+0x15c>)
 80011f6:	5cd3      	ldrb	r3, [r2, r3]
 80011f8:	40d8      	lsrs	r0, r3
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <HAL_RCC_ClockConfig+0x160>)
 80011fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f002 fc60 	bl	8003ac4 <HAL_InitTick>
  return HAL_OK;
 8001204:	2000      	movs	r0, #0
 8001206:	e00a      	b.n	800121e <HAL_RCC_ClockConfig+0x8a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001208:	6813      	ldr	r3, [r2, #0]
 800120a:	f023 0307 	bic.w	r3, r3, #7
 800120e:	430b      	orrs	r3, r1
 8001210:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001212:	6813      	ldr	r3, [r2, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	428b      	cmp	r3, r1
 800121a:	d0c5      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800121c:	2001      	movs	r0, #1
}
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001222:	4932      	ldr	r1, [pc, #200]	; (80012ec <HAL_RCC_ClockConfig+0x158>)
 8001224:	68a0      	ldr	r0, [r4, #8]
 8001226:	684b      	ldr	r3, [r1, #4]
 8001228:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800122c:	4303      	orrs	r3, r0
 800122e:	604b      	str	r3, [r1, #4]
 8001230:	e7bd      	b.n	80011ae <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001232:	6862      	ldr	r2, [r4, #4]
 8001234:	4e2d      	ldr	r6, [pc, #180]	; (80012ec <HAL_RCC_ClockConfig+0x158>)
 8001236:	2a01      	cmp	r2, #1
 8001238:	d127      	bne.n	800128a <HAL_RCC_ClockConfig+0xf6>
 800123a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800123e:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001242:	6831      	ldr	r1, [r6, #0]
 8001244:	fa93 f3a3 	rbit	r3, r3
 8001248:	fab3 f383 	clz	r3, r3
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	fa21 f303 	lsr.w	r3, r1, r3
 8001254:	07d9      	lsls	r1, r3, #31
 8001256:	d5e1      	bpl.n	800121c <HAL_RCC_ClockConfig+0x88>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001258:	6873      	ldr	r3, [r6, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800125a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800125e:	f023 0303 	bic.w	r3, r3, #3
 8001262:	4313      	orrs	r3, r2
 8001264:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001266:	f7fe ff8b 	bl	8000180 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800126c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126e:	2b01      	cmp	r3, #1
 8001270:	d111      	bne.n	8001296 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001272:	6873      	ldr	r3, [r6, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d09a      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800127c:	f7fe ff80 	bl	8000180 <HAL_GetTick>
 8001280:	1bc0      	subs	r0, r0, r7
 8001282:	4540      	cmp	r0, r8
 8001284:	d9f5      	bls.n	8001272 <HAL_RCC_ClockConfig+0xde>
          return HAL_TIMEOUT;
 8001286:	2003      	movs	r0, #3
 8001288:	e7c9      	b.n	800121e <HAL_RCC_ClockConfig+0x8a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128a:	2a02      	cmp	r2, #2
 800128c:	bf0c      	ite	eq
 800128e:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001292:	2302      	movne	r3, #2
 8001294:	e7d3      	b.n	800123e <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001296:	2b02      	cmp	r3, #2
 8001298:	d10f      	bne.n	80012ba <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800129a:	6873      	ldr	r3, [r6, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d086      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7fe ff6c 	bl	8000180 <HAL_GetTick>
 80012a8:	1bc0      	subs	r0, r0, r7
 80012aa:	4540      	cmp	r0, r8
 80012ac:	d9f5      	bls.n	800129a <HAL_RCC_ClockConfig+0x106>
 80012ae:	e7ea      	b.n	8001286 <HAL_RCC_ClockConfig+0xf2>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7fe ff66 	bl	8000180 <HAL_GetTick>
 80012b4:	1bc0      	subs	r0, r0, r7
 80012b6:	4540      	cmp	r0, r8
 80012b8:	d8e5      	bhi.n	8001286 <HAL_RCC_ClockConfig+0xf2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ba:	6873      	ldr	r3, [r6, #4]
 80012bc:	f013 0f0c 	tst.w	r3, #12
 80012c0:	d1f6      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x11c>
 80012c2:	e776      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c4:	6813      	ldr	r3, [r2, #0]
 80012c6:	f023 0307 	bic.w	r3, r3, #7
 80012ca:	432b      	orrs	r3, r5
 80012cc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012ce:	6813      	ldr	r3, [r2, #0]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	42ab      	cmp	r3, r5
 80012d6:	d1a1      	bne.n	800121c <HAL_RCC_ClockConfig+0x88>
 80012d8:	e772      	b.n	80011c0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012da:	686b      	ldr	r3, [r5, #4]
 80012dc:	68e1      	ldr	r1, [r4, #12]
 80012de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012e2:	430b      	orrs	r3, r1
 80012e4:	606b      	str	r3, [r5, #4]
 80012e6:	e771      	b.n	80011cc <HAL_RCC_ClockConfig+0x38>
 80012e8:	40022000 	.word	0x40022000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	08004020 	.word	0x08004020
 80012f4:	200000a4 	.word	0x200000a4

080012f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <HAL_RCC_GetHCLKFreq+0x8>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	200000a4 	.word	0x200000a4

08001304 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001306:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	fa92 f2a2 	rbit	r2, r2
 8001310:	fab2 f282 	clz	r2, r2
 8001314:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001318:	40d3      	lsrs	r3, r2
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <HAL_RCC_GetPCLK2Freq+0x28>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001320:	6810      	ldr	r0, [r2, #0]
} 
 8001322:	40d8      	lsrs	r0, r3
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	08004030 	.word	0x08004030
 8001330:	200000a4 	.word	0x200000a4

08001334 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001334:	230f      	movs	r3, #15
 8001336:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_RCC_GetClockConfig+0x34>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	f002 0203 	and.w	r2, r2, #3
 8001340:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001348:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001350:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	08db      	lsrs	r3, r3, #3
 8001356:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800135a:	6103      	str	r3, [r0, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_RCC_GetClockConfig+0x38>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	600b      	str	r3, [r1, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0; 
#endif
}
 8001366:	4770      	bx	lr
 8001368:	40021000 	.word	0x40021000
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_NMI_IRQHandler>:
{
 8001374:	b510      	push	{r4, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001376:	4c04      	ldr	r4, [pc, #16]	; (8001388 <HAL_RCC_NMI_IRQHandler+0x14>)
 8001378:	68a3      	ldr	r3, [r4, #8]
 800137a:	061b      	lsls	r3, r3, #24
 800137c:	d503      	bpl.n	8001386 <HAL_RCC_NMI_IRQHandler+0x12>
    HAL_RCC_CSSCallback();
 800137e:	f7ff fff7 	bl	8001370 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	72a3      	strb	r3, [r4, #10]
}
 8001386:	bd10      	pop	{r4, pc}
 8001388:	40021000 	.word	0x40021000

0800138c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800138c:	6803      	ldr	r3, [r0, #0]
{
 800138e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001392:	07dc      	lsls	r4, r3, #31
{
 8001394:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001396:	d51f      	bpl.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4c3a      	ldr	r4, [pc, #232]	; (8001484 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	4e3b      	ldr	r6, [pc, #236]	; (8001488 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800139c:	69e3      	ldr	r3, [r4, #28]
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	61e3      	str	r3, [r4, #28]
 80013a4:	69e3      	ldr	r3, [r4, #28]
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ae:	6833      	ldr	r3, [r6, #0]
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80013b6:	f7fe fee3 	bl	8000180 <HAL_GetTick>
 80013ba:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80013bc:	6833      	ldr	r3, [r6, #0]
 80013be:	05d8      	lsls	r0, r3, #23
 80013c0:	d520      	bpl.n	8001404 <HAL_RCCEx_PeriphCLKConfig+0x78>
        return HAL_TIMEOUT;
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80013c2:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80013c4:	686a      	ldr	r2, [r5, #4]
 80013c6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80013ca:	d124      	bne.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80013cc:	6a23      	ldr	r3, [r4, #32]
 80013ce:	686a      	ldr	r2, [r5, #4]
 80013d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d4:	4313      	orrs	r3, r2
 80013d6:	6223      	str	r3, [r4, #32]
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80013d8:	6828      	ldr	r0, [r5, #0]
 80013da:	0783      	lsls	r3, r0, #30
 80013dc:	d506      	bpl.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80013de:	4929      	ldr	r1, [pc, #164]	; (8001484 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80013e0:	68ab      	ldr	r3, [r5, #8]
 80013e2:	684a      	ldr	r2, [r1, #4]
 80013e4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80013e8:	431a      	orrs	r2, r3
 80013ea:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013ec:	f010 0010 	ands.w	r0, r0, #16
 80013f0:	d00e      	beq.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 80013f4:	68e9      	ldr	r1, [r5, #12]
 80013f6:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013f8:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80013fe:	430b      	orrs	r3, r1
 8001400:	6053      	str	r3, [r2, #4]
 8001402:	e005      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x84>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001404:	f7fe febc 	bl	8000180 <HAL_GetTick>
 8001408:	1bc0      	subs	r0, r0, r7
 800140a:	2864      	cmp	r0, #100	; 0x64
 800140c:	d9d6      	bls.n	80013bc <HAL_RCCEx_PeriphCLKConfig+0x30>
        return HAL_TIMEOUT;
 800140e:	2003      	movs	r0, #3
}
 8001410:	b002      	add	sp, #8
 8001412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001416:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800141a:	429a      	cmp	r2, r3
 800141c:	d0d6      	beq.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x40>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800141e:	6a21      	ldr	r1, [r4, #32]
 8001420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001424:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001428:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 800142c:	2701      	movs	r7, #1
 800142e:	fab2 f282 	clz	r2, r2
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8001434:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
 8001438:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800143c:	2200      	movs	r2, #0
 800143e:	fab3 f383 	clz	r3, r3
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001442:	07c9      	lsls	r1, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001444:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      RCC->BDCR = temp_reg;
 8001448:	6226      	str	r6, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800144a:	d5bf      	bpl.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 800144c:	f7fe fe98 	bl	8000180 <HAL_GetTick>
 8001450:	2602      	movs	r6, #2
 8001452:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f241 3888 	movw	r8, #5000	; 0x1388
 8001458:	fa96 f3a6 	rbit	r3, r6
 800145c:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001460:	6a22      	ldr	r2, [r4, #32]
 8001462:	fa96 f3a6 	rbit	r3, r6
 8001466:	fab3 f383 	clz	r3, r3
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	07da      	lsls	r2, r3, #31
 8001474:	d4aa      	bmi.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x40>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001476:	f7fe fe83 	bl	8000180 <HAL_GetTick>
 800147a:	1bc0      	subs	r0, r0, r7
 800147c:	4540      	cmp	r0, r8
 800147e:	d9eb      	bls.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001480:	e7c5      	b.n	800140e <HAL_RCCEx_PeriphCLKConfig+0x82>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	42420400 	.word	0x42420400

08001490 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8001490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001494:	4604      	mov	r4, r0
 8001496:	460e      	mov	r6, r1
 8001498:	4690      	mov	r8, r2
 800149a:	461d      	mov	r5, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800149c:	f7fe fe70 	bl	8000180 <HAL_GetTick>
 80014a0:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 80014a2:	f1b8 0f00 	cmp.w	r8, #0
 80014a6:	d032      	beq.n	800150e <SPI_WaitOnFlagUntilTimeout+0x7e>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	6893      	ldr	r3, [r2, #8]
 80014ac:	ea36 0303 	bics.w	r3, r6, r3
 80014b0:	d132      	bne.n	8001518 <SPI_WaitOnFlagUntilTimeout+0x88>
    {
      if(Timeout != HAL_MAX_DELAY)
 80014b2:	1c6b      	adds	r3, r5, #1
 80014b4:	d0f9      	beq.n	80014aa <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014b6:	b16d      	cbz	r5, 80014d4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80014b8:	f7fe fe62 	bl	8000180 <HAL_GetTick>
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	42a8      	cmp	r0, r5
 80014c0:	d9f2      	bls.n	80014a8 <SPI_WaitOnFlagUntilTimeout+0x18>
 80014c2:	e007      	b.n	80014d4 <SPI_WaitOnFlagUntilTimeout+0x44>
      if(Timeout != HAL_MAX_DELAY)
 80014c4:	1c69      	adds	r1, r5, #1
 80014c6:	d023      	beq.n	8001510 <SPI_WaitOnFlagUntilTimeout+0x80>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014c8:	b125      	cbz	r5, 80014d4 <SPI_WaitOnFlagUntilTimeout+0x44>
 80014ca:	f7fe fe59 	bl	8000180 <HAL_GetTick>
 80014ce:	1bc0      	subs	r0, r0, r7
 80014d0:	42a8      	cmp	r0, r5
 80014d2:	d91c      	bls.n	800150e <SPI_WaitOnFlagUntilTimeout+0x7e>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80014d4:	6823      	ldr	r3, [r4, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80014dc:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e4:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80014e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014e8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014ec:	d107      	bne.n	80014fe <SPI_WaitOnFlagUntilTimeout+0x6e>
          {
            SPI_RESET_CRC(hspi);
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014fc:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 80014fe:	2301      	movs	r3, #1
 8001500:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8001504:	2300      	movs	r3, #0

          return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8001508:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 800150c:	e005      	b.n	800151a <SPI_WaitOnFlagUntilTimeout+0x8a>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 800150e:	6822      	ldr	r2, [r4, #0]
 8001510:	6893      	ldr	r3, [r2, #8]
 8001512:	ea36 0303 	bics.w	r3, r6, r3
 8001516:	d1d5      	bne.n	80014c4 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8001518:	2000      	movs	r0, #0
}
 800151a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800151e <HAL_SPI_Transmit>:
{
 800151e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001520:	461d      	mov	r5, r3
  if(hspi->State == HAL_SPI_STATE_READY)
 8001522:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
{
 8001526:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 8001528:	2b01      	cmp	r3, #1
 800152a:	b2d8      	uxtb	r0, r3
 800152c:	f040 80a2 	bne.w	8001674 <HAL_SPI_Transmit+0x156>
    if((pData == NULL ) || (Size == 0)) 
 8001530:	2900      	cmp	r1, #0
 8001532:	d05e      	beq.n	80015f2 <HAL_SPI_Transmit+0xd4>
 8001534:	2a00      	cmp	r2, #0
 8001536:	d05c      	beq.n	80015f2 <HAL_SPI_Transmit+0xd4>
    __HAL_LOCK(hspi);
 8001538:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800153c:	2b01      	cmp	r3, #1
 800153e:	f000 8099 	beq.w	8001674 <HAL_SPI_Transmit+0x156>
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8001542:	2312      	movs	r3, #18
 8001544:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001548:	2300      	movs	r3, #0
    hspi->RxISR = 0;
 800154a:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    hspi->RxXferSize  = 0;
 800154e:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001552:	6563      	str	r3, [r4, #84]	; 0x54
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001554:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_LOCK(hspi);
 8001556:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800155a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SPI_RESET_CRC(hspi);
 800155e:	6820      	ldr	r0, [r4, #0]
    hspi->pTxBuffPtr  = pData;
 8001560:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8001562:	86a2      	strh	r2, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 8001564:	86e2      	strh	r2, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001566:	d107      	bne.n	8001578 <HAL_SPI_Transmit+0x5a>
      SPI_RESET_CRC(hspi);
 8001568:	6803      	ldr	r3, [r0, #0]
 800156a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800156e:	6003      	str	r3, [r0, #0]
 8001570:	6803      	ldr	r3, [r0, #0]
 8001572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001576:	6003      	str	r3, [r0, #0]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001578:	68a3      	ldr	r3, [r4, #8]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800157a:	68e6      	ldr	r6, [r4, #12]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800157c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
      SPI_1LINE_TX(hspi);
 8001580:	bf02      	ittt	eq
 8001582:	6803      	ldreq	r3, [r0, #0]
 8001584:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8001588:	6003      	streq	r3, [r0, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800158a:	6803      	ldr	r3, [r0, #0]
 800158c:	065b      	lsls	r3, r3, #25
      __HAL_SPI_ENABLE(hspi);
 800158e:	bf5e      	ittt	pl
 8001590:	6803      	ldrpl	r3, [r0, #0]
 8001592:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001596:	6003      	strpl	r3, [r0, #0]
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8001598:	6863      	ldr	r3, [r4, #4]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800159a:	2e00      	cmp	r6, #0
 800159c:	d135      	bne.n	800160a <HAL_SPI_Transmit+0xec>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800159e:	b10b      	cbz	r3, 80015a4 <HAL_SPI_Transmit+0x86>
 80015a0:	2a01      	cmp	r2, #1
 80015a2:	d105      	bne.n	80015b0 <HAL_SPI_Transmit+0x92>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80015a4:	1c4b      	adds	r3, r1, #1
 80015a6:	6323      	str	r3, [r4, #48]	; 0x30
 80015a8:	780b      	ldrb	r3, [r1, #0]
        hspi->TxXferCount--;
 80015aa:	3a01      	subs	r2, #1
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80015ac:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80015ae:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 80015b0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80015b2:	b9b3      	cbnz	r3, 80015e2 <HAL_SPI_Transmit+0xc4>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80015b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015b6:	2102      	movs	r1, #2
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 80015b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015bc:	bf08      	it	eq
 80015be:	6822      	ldreq	r2, [r4, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015c0:	4620      	mov	r0, r4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80015c2:	bf02      	ittt	eq
 80015c4:	6813      	ldreq	r3, [r2, #0]
 80015c6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80015ca:	6013      	streq	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015cc:	462b      	mov	r3, r5
 80015ce:	2200      	movs	r2, #0
 80015d0:	f7ff ff5e 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d036      	beq.n	8001646 <HAL_SPI_Transmit+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015da:	f043 0310 	orr.w	r3, r3, #16
 80015de:	6563      	str	r3, [r4, #84]	; 0x54
 80015e0:	e006      	b.n	80015f0 <HAL_SPI_Transmit+0xd2>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80015e2:	462b      	mov	r3, r5
 80015e4:	2200      	movs	r2, #0
 80015e6:	2102      	movs	r1, #2
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff ff51 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80015ee:	b110      	cbz	r0, 80015f6 <HAL_SPI_Transmit+0xd8>
      return HAL_TIMEOUT;
 80015f0:	2003      	movs	r0, #3
}
 80015f2:	b002      	add	sp, #8
 80015f4:	bd70      	pop	{r4, r5, r6, pc}
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80015f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	6322      	str	r2, [r4, #48]	; 0x30
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8001602:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001604:	3b01      	subs	r3, #1
 8001606:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001608:	e7d2      	b.n	80015b0 <HAL_SPI_Transmit+0x92>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800160a:	b10b      	cbz	r3, 8001610 <HAL_SPI_Transmit+0xf2>
 800160c:	2a01      	cmp	r2, #1
 800160e:	d105      	bne.n	800161c <HAL_SPI_Transmit+0xfe>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001610:	f831 3b02 	ldrh.w	r3, [r1], #2
        hspi->TxXferCount--;
 8001614:	3a01      	subs	r2, #1
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001616:	60c3      	str	r3, [r0, #12]
        hspi->pTxBuffPtr+=2;
 8001618:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800161a:	86e2      	strh	r2, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 800161c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0c8      	beq.n	80015b4 <HAL_SPI_Transmit+0x96>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001622:	462b      	mov	r3, r5
 8001624:	2200      	movs	r2, #0
 8001626:	2102      	movs	r1, #2
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ff31 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 800162e:	2800      	cmp	r0, #0
 8001630:	d1de      	bne.n	80015f0 <HAL_SPI_Transmit+0xd2>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001632:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	f833 1b02 	ldrh.w	r1, [r3], #2
 800163a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2;
 800163c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800163e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001640:	3b01      	subs	r3, #1
 8001642:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001644:	e7ea      	b.n	800161c <HAL_SPI_Transmit+0xfe>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8001646:	462b      	mov	r3, r5
 8001648:	2201      	movs	r2, #1
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ff1f 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001652:	2800      	cmp	r0, #0
 8001654:	d1c0      	bne.n	80015d8 <HAL_SPI_Transmit+0xba>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	b92b      	cbnz	r3, 8001666 <HAL_SPI_Transmit+0x148>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	9201      	str	r2, [sp, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY; 
 8001666:	2301      	movs	r3, #1
 8001668:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 800166c:	2300      	movs	r3, #0
 800166e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8001672:	e7be      	b.n	80015f2 <HAL_SPI_Transmit+0xd4>
    return HAL_BUSY;
 8001674:	2002      	movs	r0, #2
 8001676:	e7bc      	b.n	80015f2 <HAL_SPI_Transmit+0xd4>

08001678 <HAL_SPI_TransmitReceive>:
{
 8001678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800167a:	4604      	mov	r4, r0
 800167c:	4618      	mov	r0, r3
  __IO uint16_t tmpreg = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	f8ad 3006 	strh.w	r3, [sp, #6]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 8001684:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
{
 8001688:	9d08      	ldr	r5, [sp, #32]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 800168a:	2b01      	cmp	r3, #1
 800168c:	d004      	beq.n	8001698 <HAL_SPI_TransmitReceive+0x20>
 800168e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001692:	2b22      	cmp	r3, #34	; 0x22
 8001694:	f040 8142 	bne.w	800191c <HAL_SPI_TransmitReceive+0x2a4>
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0))
 8001698:	2900      	cmp	r1, #0
 800169a:	f000 8139 	beq.w	8001910 <HAL_SPI_TransmitReceive+0x298>
 800169e:	2a00      	cmp	r2, #0
 80016a0:	f000 8136 	beq.w	8001910 <HAL_SPI_TransmitReceive+0x298>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	f000 8133 	beq.w	8001910 <HAL_SPI_TransmitReceive+0x298>
    __HAL_LOCK(hspi);
 80016aa:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	f000 8134 	beq.w	800191c <HAL_SPI_TransmitReceive+0x2a4>
 80016b4:	2301      	movs	r3, #1
 80016b6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if(hspi->State == HAL_SPI_STATE_READY)
 80016ba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    if(hspi->State == HAL_SPI_STATE_READY)
 80016c0:	2b01      	cmp	r3, #1
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80016c2:	bf04      	itt	eq
 80016c4:	2332      	moveq	r3, #50	; 0x32
 80016c6:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016ca:	2300      	movs	r3, #0
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016cc:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    hspi->pRxBuffPtr  = pRxData;
 80016d0:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->TxISR = 0;
 80016d2:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
      SPI_RESET_CRC(hspi);
 80016d6:	6822      	ldr	r2, [r4, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016d8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->RxXferSize  = Size;
 80016da:	87a0      	strh	r0, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;  
 80016dc:	87e0      	strh	r0, [r4, #62]	; 0x3e
    hspi->pTxBuffPtr  = pTxData;
 80016de:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size; 
 80016e0:	86a0      	strh	r0, [r4, #52]	; 0x34
    hspi->TxXferCount = Size;
 80016e2:	86e0      	strh	r0, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80016e4:	d107      	bne.n	80016f6 <HAL_SPI_TransmitReceive+0x7e>
      SPI_RESET_CRC(hspi);
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	6813      	ldr	r3, [r2, #0]
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f4:	6013      	str	r3, [r2, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	065f      	lsls	r7, r3, #25
      __HAL_SPI_ENABLE(hspi);
 80016fa:	bf58      	it	pl
 80016fc:	6813      	ldrpl	r3, [r2, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80016fe:	68e7      	ldr	r7, [r4, #12]
      __HAL_SPI_ENABLE(hspi);
 8001700:	bf5c      	itt	pl
 8001702:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001706:	6013      	strpl	r3, [r2, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001708:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 800170c:	6863      	ldr	r3, [r4, #4]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800170e:	d16e      	bne.n	80017ee <HAL_SPI_TransmitReceive+0x176>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 8001710:	b123      	cbz	r3, 800171c <HAL_SPI_TransmitReceive+0xa4>
 8001712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001716:	d162      	bne.n	80017de <HAL_SPI_TransmitReceive+0x166>
 8001718:	2801      	cmp	r0, #1
 800171a:	d160      	bne.n	80017de <HAL_SPI_TransmitReceive+0x166>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800171c:	f831 3b02 	ldrh.w	r3, [r1], #2
        hspi->TxXferCount--;
 8001720:	3801      	subs	r0, #1
 8001722:	b280      	uxth	r0, r0
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001724:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8001726:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001728:	86e0      	strh	r0, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 800172a:	2800      	cmp	r0, #0
 800172c:	d157      	bne.n	80017de <HAL_SPI_TransmitReceive+0x166>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800172e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001732:	bf02      	ittt	eq
 8001734:	6813      	ldreq	r3, [r2, #0]
 8001736:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800173a:	6013      	streq	r3, [r2, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800173c:	462b      	mov	r3, r5
 800173e:	2200      	movs	r2, #0
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001740:	2101      	movs	r1, #1
 8001742:	4620      	mov	r0, r4
 8001744:	f7ff fea4 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001748:	b9d0      	cbnz	r0, 8001780 <HAL_SPI_TransmitReceive+0x108>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001750:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 8001754:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8001756:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001758:	3b01      	subs	r3, #1
 800175a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800175c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800175e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001762:	f040 80b1 	bne.w	80018c8 <HAL_SPI_TransmitReceive+0x250>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001766:	462b      	mov	r3, r5
 8001768:	2200      	movs	r2, #0
 800176a:	2101      	movs	r1, #1
 800176c:	4620      	mov	r0, r4
 800176e:	f7ff fe8f 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001772:	2800      	cmp	r0, #0
 8001774:	f000 80a1 	beq.w	80018ba <HAL_SPI_TransmitReceive+0x242>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001778:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800177a:	f043 0302 	orr.w	r3, r3, #2
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800177e:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001780:	2003      	movs	r0, #3
}
 8001782:	b003      	add	sp, #12
 8001784:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001786:	462b      	mov	r3, r5
 8001788:	2200      	movs	r2, #0
 800178a:	2102      	movs	r1, #2
 800178c:	4620      	mov	r0, r4
 800178e:	f7ff fe7f 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001792:	2800      	cmp	r0, #0
 8001794:	d1f4      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x108>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001796:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800179e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2;
 80017a0:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 80017a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017a4:	3b01      	subs	r3, #1
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80017aa:	b93b      	cbnz	r3, 80017bc <HAL_SPI_TransmitReceive+0x144>
 80017ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80017b2:	bf02      	ittt	eq
 80017b4:	6813      	ldreq	r3, [r2, #0]
 80017b6:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80017ba:	6013      	streq	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017bc:	462b      	mov	r3, r5
 80017be:	2200      	movs	r2, #0
 80017c0:	2101      	movs	r1, #1
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff fe64 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d1d9      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x108>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017d2:	f823 2b02 	strh.w	r2, [r3], #2
          hspi->pRxBuffPtr+=2;
 80017d6:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80017d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017da:	3b01      	subs	r3, #1
 80017dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 80017de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1d0      	bne.n	8001786 <HAL_SPI_TransmitReceive+0x10e>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 80017e4:	6862      	ldr	r2, [r4, #4]
 80017e6:	2a00      	cmp	r2, #0
 80017e8:	d1b8      	bne.n	800175c <HAL_SPI_TransmitReceive+0xe4>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017ea:	462b      	mov	r3, r5
 80017ec:	e7a8      	b.n	8001740 <HAL_SPI_TransmitReceive+0xc8>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01)))
 80017ee:	b123      	cbz	r3, 80017fa <HAL_SPI_TransmitReceive+0x182>
 80017f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f4:	d14c      	bne.n	8001890 <HAL_SPI_TransmitReceive+0x218>
 80017f6:	2801      	cmp	r0, #1
 80017f8:	d14a      	bne.n	8001890 <HAL_SPI_TransmitReceive+0x218>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80017fa:	1c4b      	adds	r3, r1, #1
 80017fc:	6323      	str	r3, [r4, #48]	; 0x30
 80017fe:	780b      	ldrb	r3, [r1, #0]
        hspi->TxXferCount--;
 8001800:	3801      	subs	r0, #1
 8001802:	b280      	uxth	r0, r0
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001804:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8001806:	86e0      	strh	r0, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0)
 8001808:	2800      	cmp	r0, #0
 800180a:	d141      	bne.n	8001890 <HAL_SPI_TransmitReceive+0x218>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800180c:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001810:	bf08      	it	eq
 8001812:	6813      	ldreq	r3, [r2, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001814:	f04f 0101 	mov.w	r1, #1
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001818:	bf04      	itt	eq
 800181a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800181e:	6013      	streq	r3, [r2, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001820:	4620      	mov	r0, r4
 8001822:	462b      	mov	r3, r5
 8001824:	2200      	movs	r2, #0
 8001826:	f7ff fe33 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 800182a:	2800      	cmp	r0, #0
 800182c:	d1a8      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x108>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	e78e      	b.n	8001756 <HAL_SPI_TransmitReceive+0xde>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001838:	462b      	mov	r3, r5
 800183a:	2200      	movs	r2, #0
 800183c:	2102      	movs	r1, #2
 800183e:	4620      	mov	r0, r4
 8001840:	f7ff fe26 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001844:	2800      	cmp	r0, #0
 8001846:	d19b      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x108>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8001848:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	6322      	str	r2, [r4, #48]	; 0x30
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	6822      	ldr	r2, [r4, #0]
 8001852:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 8001854:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001856:	3b01      	subs	r3, #1
 8001858:	b29b      	uxth	r3, r3
 800185a:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800185c:	b93b      	cbnz	r3, 800186e <HAL_SPI_TransmitReceive+0x1f6>
 800185e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001864:	bf02      	ittt	eq
 8001866:	6813      	ldreq	r3, [r2, #0]
 8001868:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800186c:	6013      	streq	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800186e:	462b      	mov	r3, r5
 8001870:	2200      	movs	r2, #0
 8001872:	2101      	movs	r1, #1
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff fe0b 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 800187a:	2800      	cmp	r0, #0
 800187c:	d180      	bne.n	8001780 <HAL_SPI_TransmitReceive+0x108>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001884:	1c59      	adds	r1, r3, #1
 8001886:	63a1      	str	r1, [r4, #56]	; 0x38
 8001888:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800188a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800188c:	3b01      	subs	r3, #1
 800188e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0)
 8001890:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1d0      	bne.n	8001838 <HAL_SPI_TransmitReceive+0x1c0>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001896:	6862      	ldr	r2, [r4, #4]
 8001898:	2a00      	cmp	r2, #0
 800189a:	f47f af5f 	bne.w	800175c <HAL_SPI_TransmitReceive+0xe4>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 800189e:	462b      	mov	r3, r5
 80018a0:	2101      	movs	r1, #1
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff fdf4 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f47f af69 	bne.w	8001780 <HAL_SPI_TransmitReceive+0x108>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80018b4:	1c59      	adds	r1, r3, #1
 80018b6:	63a1      	str	r1, [r4, #56]	; 0x38
 80018b8:	e7bc      	b.n	8001834 <HAL_SPI_TransmitReceive+0x1bc>
      tmpreg = hspi->Instance->DR;
 80018ba:	6823      	ldr	r3, [r4, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f8ad 3006 	strh.w	r3, [sp, #6]
      UNUSED(tmpreg);
 80018c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 80018c8:	462b      	mov	r3, r5
 80018ca:	2201      	movs	r2, #1
 80018cc:	2180      	movs	r1, #128	; 0x80
 80018ce:	4620      	mov	r0, r4
 80018d0:	f7ff fdde 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80018d4:	b118      	cbz	r0, 80018de <HAL_SPI_TransmitReceive+0x266>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	e74f      	b.n	800177e <HAL_SPI_TransmitReceive+0x106>
    hspi->State = HAL_SPI_STATE_READY;
 80018de:	2101      	movs	r1, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80018e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 80018e2:	f884 1051 	strb.w	r1, [r4, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ea:	d113      	bne.n	8001914 <HAL_SPI_TransmitReceive+0x29c>
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	06d2      	lsls	r2, r2, #27
 80018f2:	d50f      	bpl.n	8001914 <HAL_SPI_TransmitReceive+0x29c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80018f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018f6:	f042 0202 	orr.w	r2, r2, #2
 80018fa:	6562      	str	r2, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800190a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 800190c:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      return  HAL_ERROR;
 8001910:	2001      	movs	r0, #1
 8001912:	e736      	b.n	8001782 <HAL_SPI_TransmitReceive+0x10a>
    __HAL_UNLOCK(hspi);
 8001914:	2300      	movs	r3, #0
 8001916:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 800191a:	e732      	b.n	8001782 <HAL_SPI_TransmitReceive+0x10a>
    return HAL_BUSY;
 800191c:	2002      	movs	r0, #2
 800191e:	e730      	b.n	8001782 <HAL_SPI_TransmitReceive+0x10a>

08001920 <HAL_SPI_Receive>:
{
 8001920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001922:	461e      	mov	r6, r3
  __IO uint16_t tmpreg = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	f8ad 300e 	strh.w	r3, [sp, #14]
{
 800192a:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 800192c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8001930:	2801      	cmp	r0, #1
 8001932:	b2c5      	uxtb	r5, r0
 8001934:	f040 80e4 	bne.w	8001b00 <HAL_SPI_Receive+0x1e0>
    if((pData == NULL ) || (Size == 0)) 
 8001938:	2900      	cmp	r1, #0
 800193a:	d061      	beq.n	8001a00 <HAL_SPI_Receive+0xe0>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d05f      	beq.n	8001a00 <HAL_SPI_Receive+0xe0>
    __HAL_LOCK(hspi);
 8001940:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
 8001944:	2801      	cmp	r0, #1
 8001946:	f000 80db 	beq.w	8001b00 <HAL_SPI_Receive+0x1e0>
    hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800194a:	2022      	movs	r0, #34	; 0x22
 800194c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001950:	68a0      	ldr	r0, [r4, #8]
    __HAL_LOCK(hspi);
 8001952:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001956:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
      SPI_1LINE_RX(hspi);
 800195a:	bf08      	it	eq
 800195c:	6825      	ldreq	r5, [r4, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800195e:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->TxISR = 0;
 8001960:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    hspi->TxXferSize  = 0;
 8001964:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
      SPI_1LINE_RX(hspi);
 8001968:	bf08      	it	eq
 800196a:	682b      	ldreq	r3, [r5, #0]
    hspi->pRxBuffPtr  = pData;
 800196c:	63a1      	str	r1, [r4, #56]	; 0x38
      SPI_1LINE_RX(hspi);
 800196e:	bf08      	it	eq
 8001970:	f423 4380 	biceq.w	r3, r3, #16384	; 0x4000
    hspi->RxXferSize  = Size;
 8001974:	87a2      	strh	r2, [r4, #60]	; 0x3c
    hspi->RxXferCount = Size;
 8001976:	87e2      	strh	r2, [r4, #62]	; 0x3e
      SPI_1LINE_RX(hspi);
 8001978:	bf08      	it	eq
 800197a:	602b      	streq	r3, [r5, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800197c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800197e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001982:	d108      	bne.n	8001996 <HAL_SPI_Receive+0x76>
      SPI_RESET_CRC(hspi);
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	681d      	ldr	r5, [r3, #0]
 8001988:	f425 5500 	bic.w	r5, r5, #8192	; 0x2000
 800198c:	601d      	str	r5, [r3, #0]
 800198e:	681d      	ldr	r5, [r3, #0]
 8001990:	f445 5500 	orr.w	r5, r5, #8192	; 0x2000
 8001994:	601d      	str	r5, [r3, #0]
    if((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001996:	6863      	ldr	r3, [r4, #4]
 8001998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800199c:	d10a      	bne.n	80019b4 <HAL_SPI_Receive+0x94>
 800199e:	b948      	cbnz	r0, 80019b4 <HAL_SPI_Receive+0x94>
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019a0:	4613      	mov	r3, r2
      __HAL_UNLOCK(hspi);
 80019a2:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80019a6:	460a      	mov	r2, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	9600      	str	r6, [sp, #0]
 80019ac:	f7ff fe64 	bl	8001678 <HAL_SPI_TransmitReceive>
        return HAL_ERROR; 
 80019b0:	4605      	mov	r5, r0
 80019b2:	e025      	b.n	8001a00 <HAL_SPI_Receive+0xe0>
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	0652      	lsls	r2, r2, #25
      __HAL_SPI_ENABLE(hspi);
 80019ba:	bf5e      	ittt	pl
 80019bc:	681a      	ldrpl	r2, [r3, #0]
 80019be:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80019c2:	601a      	strpl	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80019c4:	68e3      	ldr	r3, [r4, #12]
 80019c6:	b33b      	cbz	r3, 8001a18 <HAL_SPI_Receive+0xf8>
      while(hspi->RxXferCount > 1)
 80019c8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d927      	bls.n	8001a1e <HAL_SPI_Receive+0xfe>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80019ce:	4633      	mov	r3, r6
 80019d0:	2200      	movs	r2, #0
 80019d2:	2101      	movs	r1, #1
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff fd5b 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80019da:	b980      	cbnz	r0, 80019fe <HAL_SPI_Receive+0xde>
        *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019e2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr+=2;
 80019e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80019e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80019ea:	3b01      	subs	r3, #1
 80019ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80019ee:	e7eb      	b.n	80019c8 <HAL_SPI_Receive+0xa8>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80019f0:	4633      	mov	r3, r6
 80019f2:	2200      	movs	r2, #0
 80019f4:	2101      	movs	r1, #1
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff fd4a 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 80019fc:	b118      	cbz	r0, 8001a06 <HAL_SPI_Receive+0xe6>
        return HAL_TIMEOUT;
 80019fe:	2503      	movs	r5, #3
}
 8001a00:	4628      	mov	r0, r5
 8001a02:	b004      	add	sp, #16
 8001a04:	bd70      	pop	{r4, r5, r6, pc}
        (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a0c:	1c59      	adds	r1, r3, #1
 8001a0e:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a10:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8001a12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a14:	3b01      	subs	r3, #1
 8001a16:	87e3      	strh	r3, [r4, #62]	; 0x3e
      while(hspi->RxXferCount > 1)
 8001a18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d8e8      	bhi.n	80019f0 <HAL_SPI_Receive+0xd0>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8001a1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001a20:	2101      	movs	r1, #1
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8001a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001a26:	bf08      	it	eq
 8001a28:	6822      	ldreq	r2, [r4, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001a2a:	4620      	mov	r0, r4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001a2c:	bf02      	ittt	eq
 8001a2e:	6813      	ldreq	r3, [r2, #0]
 8001a30:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8001a34:	6013      	streq	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001a36:	4633      	mov	r3, r6
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f7ff fd29 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001a3e:	4605      	mov	r5, r0
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d1dc      	bne.n	80019fe <HAL_SPI_Receive+0xde>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001a44:	6822      	ldr	r2, [r4, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a46:	68e1      	ldr	r1, [r4, #12]
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001a48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a4a:	68d2      	ldr	r2, [r2, #12]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001a4c:	b9a9      	cbnz	r1, 8001a7a <HAL_SPI_Receive+0x15a>
      (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001a4e:	1c59      	adds	r1, r3, #1
 8001a50:	63a1      	str	r1, [r4, #56]	; 0x38
 8001a52:	701a      	strb	r2, [r3, #0]
    hspi->RxXferCount--;
 8001a54:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001a56:	3b01      	subs	r3, #1
 8001a58:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a60:	d116      	bne.n	8001a90 <HAL_SPI_Receive+0x170>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001a62:	4633      	mov	r3, r6
 8001a64:	2200      	movs	r2, #0
 8001a66:	2101      	movs	r1, #1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff fd11 	bl	8001490 <SPI_WaitOnFlagUntilTimeout>
 8001a6e:	b140      	cbz	r0, 8001a82 <HAL_SPI_Receive+0x162>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001a70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6563      	str	r3, [r4, #84]	; 0x54
 8001a78:	e7c1      	b.n	80019fe <HAL_SPI_Receive+0xde>
      *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001a7a:	f823 2b02 	strh.w	r2, [r3], #2
      hspi->pRxBuffPtr+=2;
 8001a7e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001a80:	e7e8      	b.n	8001a54 <HAL_SPI_Receive+0x134>
      tmpreg = hspi->Instance->DR;
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f8ad 300e 	strh.w	r3, [sp, #14]
      UNUSED(tmpreg);
 8001a8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001a90:	6863      	ldr	r3, [r4, #4]
 8001a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a96:	d10b      	bne.n	8001ab0 <HAL_SPI_Receive+0x190>
 8001a98:	68a3      	ldr	r3, [r4, #8]
 8001a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9e:	d002      	beq.n	8001aa6 <HAL_SPI_Receive+0x186>
 8001aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa4:	d104      	bne.n	8001ab0 <HAL_SPI_Receive+0x190>
      __HAL_SPI_DISABLE(hspi);
 8001aa6:	6822      	ldr	r2, [r4, #0]
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001aae:	6013      	str	r3, [r2, #0]
    hspi->State = HAL_SPI_STATE_READY;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8001ab6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001abc:	d11c      	bne.n	8001af8 <HAL_SPI_Receive+0x1d8>
 8001abe:	6823      	ldr	r3, [r4, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	06db      	lsls	r3, r3, #27
 8001ac4:	d518      	bpl.n	8001af8 <HAL_SPI_Receive+0x1d8>
      if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f000 f85a 	bl	8001b80 <SPI_ISCRCErrorValid>
 8001acc:	2801      	cmp	r0, #1
 8001ace:	6823      	ldr	r3, [r4, #0]
 8001ad0:	d10f      	bne.n	8001af2 <HAL_SPI_Receive+0x1d2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8001ad2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001ad4:	f042 0202 	orr.w	r2, r2, #2
 8001ad8:	6562      	str	r2, [r4, #84]	; 0x54
        SPI_RESET_CRC(hspi);
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ae8:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8001aea:	2300      	movs	r3, #0
 8001aec:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001af0:	e75e      	b.n	80019b0 <HAL_SPI_Receive+0x90>
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8001af2:	f06f 0210 	mvn.w	r2, #16
 8001af6:	609a      	str	r2, [r3, #8]
    __HAL_UNLOCK(hspi);
 8001af8:	2300      	movs	r3, #0
 8001afa:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 8001afe:	e77f      	b.n	8001a00 <HAL_SPI_Receive+0xe0>
    return HAL_BUSY;
 8001b00:	2502      	movs	r5, #2
 8001b02:	e77d      	b.n	8001a00 <HAL_SPI_Receive+0xe0>

08001b04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b04:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001b06:	4604      	mov	r4, r0
 8001b08:	2800      	cmp	r0, #0
 8001b0a:	d034      	beq.n	8001b76 <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001b0c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001b10:	b90b      	cbnz	r3, 8001b16 <HAL_SPI_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b12:	f001 ffab 	bl	8003a6c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b16:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b18:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001b1a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001b1e:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b20:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8001b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b26:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b28:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8001b2c:	4303      	orrs	r3, r0
 8001b2e:	68e0      	ldr	r0, [r4, #12]
 8001b30:	4303      	orrs	r3, r0
 8001b32:	6920      	ldr	r0, [r4, #16]
 8001b34:	4303      	orrs	r3, r0
 8001b36:	6960      	ldr	r0, [r4, #20]
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	69e0      	ldr	r0, [r4, #28]
 8001b3c:	4303      	orrs	r3, r0
 8001b3e:	6a20      	ldr	r0, [r4, #32]
 8001b40:	4303      	orrs	r3, r0
 8001b42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001b44:	4303      	orrs	r3, r0
 8001b46:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001b4a:	4303      	orrs	r3, r0
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001b4c:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b4e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b50:	0c12      	lsrs	r2, r2, #16
 8001b52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b54:	f002 0204 	and.w	r2, r2, #4
 8001b58:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b5c:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001b5e:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b60:	69cb      	ldr	r3, [r1, #28]
 8001b62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001b66:	61cb      	str	r3, [r1, #28]
  uCRCErrorWorkaroundCheck = 0;
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_SPI_Init+0x78>)
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b6a:	6560      	str	r0, [r4, #84]	; 0x54
  uCRCErrorWorkaroundCheck = 0;
 8001b6c:	7018      	strb	r0, [r3, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8001b74:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b76:	2001      	movs	r0, #1
 8001b78:	e7fc      	b.n	8001b74 <HAL_SPI_Init+0x70>
 8001b7a:	bf00      	nop
 8001b7c:	20000120 	.word	0x20000120

08001b80 <SPI_ISCRCErrorValid>:
  }
  return (SPI_VALID_CRC_ERROR);
#else
  return (SPI_VALID_CRC_ERROR);
#endif
}
 8001b80:	2001      	movs	r0, #1
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_Base_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b86:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001b88:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	f042 0201 	orr.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_TIM_OC_DelayElapsedCallback>:
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIM_IC_CaptureCallback>:
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_TriggerCallback>:
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba4:	6803      	ldr	r3, [r0, #0]
{
 8001ba6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ba8:	691a      	ldr	r2, [r3, #16]
{
 8001baa:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bac:	0791      	lsls	r1, r2, #30
 8001bae:	d50e      	bpl.n	8001bce <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	0792      	lsls	r2, r2, #30
 8001bb4:	d50b      	bpl.n	8001bce <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bb6:	f06f 0202 	mvn.w	r2, #2
 8001bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	079b      	lsls	r3, r3, #30
 8001bc4:	d077      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001bc6:	f7ff ffea 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	0750      	lsls	r0, r2, #29
 8001bd4:	d510      	bpl.n	8001bf8 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	0751      	lsls	r1, r2, #29
 8001bda:	d50d      	bpl.n	8001bf8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bdc:	f06f 0204 	mvn.w	r2, #4
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be2:	2202      	movs	r2, #2
 8001be4:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001be6:	699b      	ldr	r3, [r3, #24]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001bea:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001bee:	d068      	beq.n	8001cc2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf0:	f7ff ffd5 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	0712      	lsls	r2, r2, #28
 8001bfe:	d50f      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	0710      	lsls	r0, r2, #28
 8001c04:	d50c      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c06:	f06f 0208 	mvn.w	r2, #8
 8001c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001c10:	69db      	ldr	r3, [r3, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001c14:	0799      	lsls	r1, r3, #30
 8001c16:	d05a      	beq.n	8001cce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c18:	f7ff ffc1 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c20:	6823      	ldr	r3, [r4, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	06d2      	lsls	r2, r2, #27
 8001c26:	d510      	bpl.n	8001c4a <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	06d0      	lsls	r0, r2, #27
 8001c2c:	d50d      	bpl.n	8001c4a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c2e:	f06f 0210 	mvn.w	r2, #16
 8001c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c34:	2208      	movs	r2, #8
 8001c36:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001c38:	69db      	ldr	r3, [r3, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001c3c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001c40:	d04b      	beq.n	8001cda <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	f7ff ffac 	bl	8001b9e <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c46:	2300      	movs	r3, #0
 8001c48:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	07d1      	lsls	r1, r2, #31
 8001c50:	d508      	bpl.n	8001c64 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	07d2      	lsls	r2, r2, #31
 8001c56:	d505      	bpl.n	8001c64 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c58:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c5c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c5e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c60:	f001 feb4 	bl	80039cc <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	0610      	lsls	r0, r2, #24
 8001c6a:	d508      	bpl.n	8001c7e <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	0611      	lsls	r1, r2, #24
 8001c70:	d505      	bpl.n	8001c7e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c72:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001c76:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c7a:	f000 f884 	bl	8001d86 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c7e:	6823      	ldr	r3, [r4, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	0652      	lsls	r2, r2, #25
 8001c84:	d508      	bpl.n	8001c98 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	0650      	lsls	r0, r2, #25
 8001c8a:	d505      	bpl.n	8001c98 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001c90:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001c94:	f7ff ff85 	bl	8001ba2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	691a      	ldr	r2, [r3, #16]
 8001c9c:	0691      	lsls	r1, r2, #26
 8001c9e:	d522      	bpl.n	8001ce6 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	0692      	lsls	r2, r2, #26
 8001ca4:	d51f      	bpl.n	8001ce6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ca6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001caa:	4620      	mov	r0, r4
    }
  }
}
 8001cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001cb2:	f000 b867 	b.w	8001d84 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	f7ff ff71 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff ff70 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cc0:	e783      	b.n	8001bca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cc2:	f7ff ff6b 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f7ff ff6a 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ccc:	e792      	b.n	8001bf4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	f7ff ff65 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff ff64 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cd8:	e7a0      	b.n	8001c1c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cda:	f7ff ff5f 	bl	8001b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cde:	4620      	mov	r0, r4
 8001ce0:	f7ff ff5e 	bl	8001ba0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ce4:	e7af      	b.n	8001c46 <HAL_TIM_IRQHandler+0xa2>
}
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <TIM_Base_SetConfig+0x64>)
  tmpcr1 = TIMx->CR1;
 8001cea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	4290      	cmp	r0, r2
 8001cee:	d00a      	beq.n	8001d06 <TIM_Base_SetConfig+0x1e>
 8001cf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cf4:	d007      	beq.n	8001d06 <TIM_Base_SetConfig+0x1e>
 8001cf6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001cfa:	4290      	cmp	r0, r2
 8001cfc:	d003      	beq.n	8001d06 <TIM_Base_SetConfig+0x1e>
 8001cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d02:	4290      	cmp	r0, r2
 8001d04:	d115      	bne.n	8001d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d0c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <TIM_Base_SetConfig+0x64>)
 8001d10:	4290      	cmp	r0, r2
 8001d12:	d00a      	beq.n	8001d2a <TIM_Base_SetConfig+0x42>
 8001d14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d18:	d007      	beq.n	8001d2a <TIM_Base_SetConfig+0x42>
 8001d1a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d003      	beq.n	8001d2a <TIM_Base_SetConfig+0x42>
 8001d22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d26:	4290      	cmp	r0, r2
 8001d28:	d103      	bne.n	8001d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d2a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d30:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001d32:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d34:	688b      	ldr	r3, [r1, #8]
 8001d36:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d38:	680b      	ldr	r3, [r1, #0]
 8001d3a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <TIM_Base_SetConfig+0x64>)
 8001d3e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d40:	bf04      	itt	eq
 8001d42:	690b      	ldreq	r3, [r1, #16]
 8001d44:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d46:	2301      	movs	r3, #1
 8001d48:	6143      	str	r3, [r0, #20]
}
 8001d4a:	4770      	bx	lr
 8001d4c:	40012c00 	.word	0x40012c00

08001d50 <HAL_TIM_Base_Init>:
{
 8001d50:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001d52:	4604      	mov	r4, r0
 8001d54:	b1a0      	cbz	r0, 8001d80 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d56:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d5e:	b91b      	cbnz	r3, 8001d68 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d60:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001d64:	f7ff ff0e 	bl	8001b84 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001d68:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d6a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001d6c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	1d21      	adds	r1, r4, #4
 8001d72:	f7ff ffb9 	bl	8001ce8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d76:	2301      	movs	r3, #1
  return HAL_OK;
 8001d78:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001d7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8001d7e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
 8001d82:	e7fc      	b.n	8001d7e <HAL_TIM_Base_Init+0x2e>

08001d84 <HAL_TIMEx_CommutationCallback>:
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIMEx_BreakCallback>:
 8001d86:	4770      	bx	lr

08001d88 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001d88:	b084      	sub	sp, #16
 8001d8a:	a801      	add	r0, sp, #4
 8001d8c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001d90:	b004      	add	sp, #16
 8001d92:	2000      	movs	r0, #0
 8001d94:	4770      	bx	lr

08001d96 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8001d96:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 8001da0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001da4:	2000      	movs	r0, #0
 8001da6:	4770      	bx	lr

08001da8 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001da8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001dac:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001db0:	045b      	lsls	r3, r3, #17
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001db8:	2000      	movs	r0, #0
 8001dba:	4770      	bx	lr

08001dbc <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	4770      	bx	lr

08001dc0 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{    
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	4604      	mov	r4, r0
 8001dc6:	a803      	add	r0, sp, #12
 8001dc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
  
  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8001dcc:	2000      	movs	r0, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
  USBx->CNTR = 0;
 8001dd4:	f8a4 0040 	strh.w	r0, [r4, #64]	; 0x40
 
  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8001dd8:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8001ddc:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    
  return HAL_OK;
}
 8001de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001de4:	b004      	add	sp, #16
 8001de6:	4770      	bx	lr

08001de8 <USB_FlushTxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001de8:	2000      	movs	r0, #0
 8001dea:	4770      	bx	lr

08001dec <USB_FlushRxFifo>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001dec:	2000      	movs	r0, #0
 8001dee:	4770      	bx	lr

08001df0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001df2:	78cb      	ldrb	r3, [r1, #3]
 8001df4:	780a      	ldrb	r2, [r1, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d80f      	bhi.n	8001e1a <USB_ActivateEndpoint+0x2a>
 8001dfa:	e8df f003 	tbb	[pc, r3]
 8001dfe:	6102      	.short	0x6102
 8001e00:	564d      	.short	0x564d
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001e02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e06:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0e:	041b      	lsls	r3, r3, #16
 8001e10:	0c1b      	lsrs	r3, r3, #16
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001e16:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8001e1a:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001e1e:	780b      	ldrb	r3, [r1, #0]
 8001e20:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001e24:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8001e28:	4014      	ands	r4, r2
 8001e2a:	431c      	orrs	r4, r3
 8001e2c:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8001e30:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8001e34:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8001e38:	7a8e      	ldrb	r6, [r1, #10]
 8001e3a:	00dc      	lsls	r4, r3, #3
 8001e3c:	2e00      	cmp	r6, #0
 8001e3e:	f040 808b 	bne.w	8001f58 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e42:	888e      	ldrh	r6, [r1, #4]
    if (ep->is_in)
 8001e44:	784f      	ldrb	r7, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e46:	0876      	lsrs	r6, r6, #1
 8001e48:	0076      	lsls	r6, r6, #1
    if (ep->is_in)
 8001e4a:	2f00      	cmp	r7, #0
 8001e4c:	d043      	beq.n	8001ed6 <USB_ActivateEndpoint+0xe6>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001e4e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8001e52:	b289      	uxth	r1, r1
 8001e54:	4421      	add	r1, r4
 8001e56:	f845 6011 	str.w	r6, [r5, r1, lsl #1]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001e5a:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001e5e:	0649      	lsls	r1, r1, #25
 8001e60:	d508      	bpl.n	8001e74 <USB_ActivateEndpoint+0x84>
 8001e62:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001e66:	400a      	ands	r2, r1
 8001e68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e6c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001e70:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8001e74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001e78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001e7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e80:	0412      	lsls	r2, r2, #16
 8001e82:	0c12      	lsrs	r2, r2, #16
 8001e84:	f082 0220 	eor.w	r2, r2, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e90:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8001e94:	2000      	movs	r0, #0
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8001e98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001e9c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	e7b5      	b.n	8001e16 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001eaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001eae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb6:	041b      	lsls	r3, r3, #16
 8001eb8:	0c1b      	lsrs	r3, r3, #16
 8001eba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001ebe:	e7aa      	b.n	8001e16 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001ec0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ec4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ecc:	041b      	lsls	r3, r3, #16
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed4:	e79f      	b.n	8001e16 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8001ed6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001eda:	b292      	uxth	r2, r2
 8001edc:	4422      	add	r2, r4
 8001ede:	3204      	adds	r2, #4
 8001ee0:	f845 6012 	str.w	r6, [r5, r2, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001ee4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001ee8:	6909      	ldr	r1, [r1, #16]
 8001eea:	b292      	uxth	r2, r2
 8001eec:	4414      	add	r4, r2
 8001eee:	293e      	cmp	r1, #62	; 0x3e
 8001ef0:	f104 0406 	add.w	r4, r4, #6
 8001ef4:	d928      	bls.n	8001f48 <USB_ActivateEndpoint+0x158>
 8001ef6:	f3c1 164f 	ubfx	r6, r1, #5, #16
 8001efa:	06ca      	lsls	r2, r1, #27
 8001efc:	bf08      	it	eq
 8001efe:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8001f02:	4a67      	ldr	r2, [pc, #412]	; (80020a0 <USB_ActivateEndpoint+0x2b0>)
 8001f04:	bf08      	it	eq
 8001f06:	b2b6      	uxtheq	r6, r6
 8001f08:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8001f0c:	b292      	uxth	r2, r2
 8001f0e:	f845 2014 	str.w	r2, [r5, r4, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f16:	0456      	lsls	r6, r2, #17
 8001f18:	d50b      	bpl.n	8001f32 <USB_ActivateEndpoint+0x142>
 8001f1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f1e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f22:	0512      	lsls	r2, r2, #20
 8001f24:	0d12      	lsrs	r2, r2, #20
 8001f26:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001f2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f2e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001f32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001f36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f3e:	0412      	lsls	r2, r2, #16
 8001f40:	0c12      	lsrs	r2, r2, #16
 8001f42:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8001f46:	e79f      	b.n	8001e88 <USB_ActivateEndpoint+0x98>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001f48:	f3c1 024f 	ubfx	r2, r1, #1, #16
 8001f4c:	07cf      	lsls	r7, r1, #31
 8001f4e:	bf44      	itt	mi
 8001f50:	3201      	addmi	r2, #1
 8001f52:	b292      	uxthmi	r2, r2
 8001f54:	0292      	lsls	r2, r2, #10
 8001f56:	e7d9      	b.n	8001f0c <USB_ActivateEndpoint+0x11c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8001f58:	f830 6023 	ldrh.w	r6, [r0, r3, lsl #2]
 8001f5c:	f426 76f8 	bic.w	r6, r6, #496	; 0x1f0
 8001f60:	0536      	lsls	r6, r6, #20
 8001f62:	0d36      	lsrs	r6, r6, #20
 8001f64:	f446 4601 	orr.w	r6, r6, #33024	; 0x8100
 8001f68:	f046 0680 	orr.w	r6, r6, #128	; 0x80
 8001f6c:	f820 6023 	strh.w	r6, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001f70:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001f74:	88cf      	ldrh	r7, [r1, #6]
 8001f76:	b2b6      	uxth	r6, r6
 8001f78:	087f      	lsrs	r7, r7, #1
 8001f7a:	4426      	add	r6, r4
 8001f7c:	007f      	lsls	r7, r7, #1
 8001f7e:	f845 7016 	str.w	r7, [r5, r6, lsl #1]
 8001f82:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8001f86:	b2b6      	uxth	r6, r6
 8001f88:	4434      	add	r4, r6
 8001f8a:	890e      	ldrh	r6, [r1, #8]
 8001f8c:	3404      	adds	r4, #4
 8001f8e:	0876      	lsrs	r6, r6, #1
 8001f90:	0076      	lsls	r6, r6, #1
 8001f92:	f845 6014 	str.w	r6, [r5, r4, lsl #1]
    if (ep->is_in==0)
 8001f96:	7849      	ldrb	r1, [r1, #1]
 8001f98:	2900      	cmp	r1, #0
 8001f9a:	d143      	bne.n	8002024 <USB_ActivateEndpoint+0x234>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001f9c:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001fa0:	044d      	lsls	r5, r1, #17
 8001fa2:	d508      	bpl.n	8001fb6 <USB_ActivateEndpoint+0x1c6>
 8001fa4:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001fae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001fb6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fba:	0654      	lsls	r4, r2, #25
 8001fbc:	d50b      	bpl.n	8001fd6 <USB_ActivateEndpoint+0x1e6>
 8001fbe:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fc6:	0512      	lsls	r2, r2, #20
 8001fc8:	0d12      	lsrs	r2, r2, #20
 8001fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fce:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001fd2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001fd6:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8001fda:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001fde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fe2:	0512      	lsls	r2, r2, #20
 8001fe4:	0d12      	lsrs	r2, r2, #20
 8001fe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fea:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8001fee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001ff2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ff6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ffa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ffe:	0412      	lsls	r2, r2, #16
 8002000:	0c12      	lsrs	r2, r2, #16
 8002002:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002006:	430a      	orrs	r2, r1
 8002008:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800200c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002010:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002018:	0412      	lsls	r2, r2, #16
 800201a:	0c12      	lsrs	r2, r2, #16
 800201c:	4311      	orrs	r1, r2
 800201e:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8002022:	e737      	b.n	8001e94 <USB_ActivateEndpoint+0xa4>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002024:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8002028:	0449      	lsls	r1, r1, #17
 800202a:	d508      	bpl.n	800203e <USB_ActivateEndpoint+0x24e>
 800202c:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8002030:	400a      	ands	r2, r1
 8002032:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002036:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800203e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002042:	0652      	lsls	r2, r2, #25
 8002044:	d50b      	bpl.n	800205e <USB_ActivateEndpoint+0x26e>
 8002046:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800204a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800204e:	0512      	lsls	r2, r2, #20
 8002050:	0d12      	lsrs	r2, r2, #20
 8002052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002056:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800205a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800205e:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8002062:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002066:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800206a:	0512      	lsls	r2, r2, #20
 800206c:	0d12      	lsrs	r2, r2, #20
 800206e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002072:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002076:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800207a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800207e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002086:	0412      	lsls	r2, r2, #16
 8002088:	0c12      	lsrs	r2, r2, #16
 800208a:	430a      	orrs	r2, r1
 800208c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002090:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002094:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002098:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800209c:	e7bc      	b.n	8002018 <USB_ActivateEndpoint+0x228>
 800209e:	bf00      	nop
 80020a0:	ffff8000 	.word	0xffff8000

080020a4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0) 
  {
    if (ep->is_in)
 80020a4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020a6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0) 
 80020a8:	7a89      	ldrb	r1, [r1, #10]
 80020aa:	bbb9      	cbnz	r1, 800211c <USB_DeactivateEndpoint+0x78>
    if (ep->is_in)
 80020ac:	b1fa      	cbz	r2, 80020ee <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80020ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020b2:	0651      	lsls	r1, r2, #25
 80020b4:	d50b      	bpl.n	80020ce <USB_DeactivateEndpoint+0x2a>
 80020b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020be:	0512      	lsls	r2, r2, #20
 80020c0:	0d12      	lsrs	r2, r2, #20
 80020c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020c6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80020ca:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80020ce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020d2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80020d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80020da:	0412      	lsls	r2, r2, #16
 80020dc:	0c12      	lsrs	r2, r2, #16
 80020de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 80020ea:	2000      	movs	r0, #0
 80020ec:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80020ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020f2:	0452      	lsls	r2, r2, #17
 80020f4:	d50b      	bpl.n	800210e <USB_DeactivateEndpoint+0x6a>
 80020f6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80020fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80020fe:	0512      	lsls	r2, r2, #20
 8002100:	0d12      	lsrs	r2, r2, #20
 8002102:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002106:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800210a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800210e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002112:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002116:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800211a:	e7de      	b.n	80020da <USB_DeactivateEndpoint+0x36>
    if (ep->is_in==0)
 800211c:	2a00      	cmp	r2, #0
 800211e:	d144      	bne.n	80021aa <USB_DeactivateEndpoint+0x106>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002120:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002124:	0451      	lsls	r1, r2, #17
 8002126:	d50b      	bpl.n	8002140 <USB_DeactivateEndpoint+0x9c>
 8002128:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800212c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002130:	0512      	lsls	r2, r2, #20
 8002132:	0d12      	lsrs	r2, r2, #20
 8002134:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002138:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800213c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002140:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002144:	0652      	lsls	r2, r2, #25
 8002146:	d50b      	bpl.n	8002160 <USB_DeactivateEndpoint+0xbc>
 8002148:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800214c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002150:	0512      	lsls	r2, r2, #20
 8002152:	0d12      	lsrs	r2, r2, #20
 8002154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002158:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800215c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002160:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8002164:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002168:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800216c:	0512      	lsls	r2, r2, #20
 800216e:	0d12      	lsrs	r2, r2, #20
 8002170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002174:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002178:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800217c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002180:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002184:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002188:	0412      	lsls	r2, r2, #16
 800218a:	0c12      	lsrs	r2, r2, #16
 800218c:	430a      	orrs	r2, r1
 800218e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002192:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002196:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800219a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800219e:	0412      	lsls	r2, r2, #16
 80021a0:	0c12      	lsrs	r2, r2, #16
 80021a2:	4311      	orrs	r1, r2
 80021a4:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 80021a8:	e79f      	b.n	80020ea <USB_DeactivateEndpoint+0x46>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80021aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021ae:	0451      	lsls	r1, r2, #17
 80021b0:	d50b      	bpl.n	80021ca <USB_DeactivateEndpoint+0x126>
 80021b2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021ba:	0512      	lsls	r2, r2, #20
 80021bc:	0d12      	lsrs	r2, r2, #20
 80021be:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80021ca:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021ce:	0652      	lsls	r2, r2, #25
 80021d0:	d50b      	bpl.n	80021ea <USB_DeactivateEndpoint+0x146>
 80021d2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021da:	0512      	lsls	r2, r2, #20
 80021dc:	0d12      	lsrs	r2, r2, #20
 80021de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80021e6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80021ea:	f248 0180 	movw	r1, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80021ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80021f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80021f6:	0512      	lsls	r2, r2, #20
 80021f8:	0d12      	lsrs	r2, r2, #20
 80021fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002202:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002206:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800220a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800220e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	0c12      	lsrs	r2, r2, #16
 8002216:	430a      	orrs	r2, r1
 8002218:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800221c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002220:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002224:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002228:	e7b9      	b.n	800219e <USB_DeactivateEndpoint+0xfa>

0800222a <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 800222a:	780a      	ldrb	r2, [r1, #0]
 800222c:	b98a      	cbnz	r2, 8002252 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 800222e:	8803      	ldrh	r3, [r0, #0]
 8002230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002240:	f083 0310 	eor.w	r3, r3, #16
 8002244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800224c:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 800224e:	2000      	movs	r0, #0
 8002250:	4770      	bx	lr
    if (ep->is_in)
 8002252:	784b      	ldrb	r3, [r1, #1]
 8002254:	b183      	cbz	r3, 8002278 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002256:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800225a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800225e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002262:	041b      	lsls	r3, r3, #16
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002272:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002276:	e7ea      	b.n	800224e <USB_EPSetStall+0x24>
 8002278:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800227c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	0c1b      	lsrs	r3, r3, #16
 8002288:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800228c:	e7ed      	b.n	800226a <USB_EPSetStall+0x40>

0800228e <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 800228e:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002290:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in)
 8002292:	b30b      	cbz	r3, 80022d8 <USB_EPClearStall+0x4a>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002294:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002298:	0659      	lsls	r1, r3, #25
 800229a:	d50b      	bpl.n	80022b4 <USB_EPClearStall+0x26>
 800229c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	0d1b      	lsrs	r3, r3, #20
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022b0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80022b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 80022d4:	2000      	movs	r0, #0
 80022d6:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80022d8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022dc:	045b      	lsls	r3, r3, #17
 80022de:	d50b      	bpl.n	80022f8 <USB_EPClearStall+0x6a>
 80022e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e8:	051b      	lsls	r3, r3, #20
 80022ea:	0d1b      	lsrs	r3, r3, #20
 80022ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80022f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80022fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800230c:	e7dc      	b.n	80022c8 <USB_EPClearStall+0x3a>

0800230e <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 800230e:	b911      	cbnz	r1, 8002316 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002316:	2000      	movs	r0, #0
 8002318:	4770      	bx	lr

0800231a <USB_DevConnect>:
 800231a:	2000      	movs	r0, #0
 800231c:	4770      	bx	lr

0800231e <USB_DevDisconnect>:
 800231e:	2000      	movs	r0, #0
 8002320:	4770      	bx	lr

08002322 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002322:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002326:	b280      	uxth	r0, r0
 8002328:	4770      	bx	lr

0800232a <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800232a:	2000      	movs	r0, #0
 800232c:	4770      	bx	lr

0800232e <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 800232e:	3301      	adds	r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002330:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002334:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002336:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800233a:	b903      	cbnz	r3, 800233e <USB_WritePMA+0x10>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 800233c:	4770      	bx	lr
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800233e:	f831 0b02 	ldrh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8002342:	3b01      	subs	r3, #1
    *pdwVal++ = temp2;
 8002344:	f822 0b04 	strh.w	r0, [r2], #4
  for (index = nbytes; index != 0; index--)
 8002348:	e7f7      	b.n	800233a <USB_WritePMA+0xc>
	...

0800234c <USB_EPStartXfer>:
{
 800234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1)
 800234e:	784a      	ldrb	r2, [r1, #1]
{
 8002350:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002352:	2a01      	cmp	r2, #1
{
 8002354:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002356:	698c      	ldr	r4, [r1, #24]
    if (ep->xfer_len > ep->maxpacket)
 8002358:	690b      	ldr	r3, [r1, #16]
 800235a:	7a88      	ldrb	r0, [r1, #10]
  if (ep->is_in == 1)
 800235c:	d15b      	bne.n	8002416 <USB_EPStartXfer+0xca>
    if (ep->xfer_len > ep->maxpacket)
 800235e:	429c      	cmp	r4, r3
      ep->xfer_len-=len; 
 8002360:	bf8a      	itet	hi
 8002362:	1ae2      	subhi	r2, r4, r3
      ep->xfer_len =0;
 8002364:	2200      	movls	r2, #0
 8002366:	461c      	movhi	r4, r3
 8002368:	618a      	str	r2, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800236a:	b2a3      	uxth	r3, r4
 800236c:	6949      	ldr	r1, [r1, #20]
 800236e:	f505 6780 	add.w	r7, r5, #1024	; 0x400
    if (ep->doublebuffer == 0) 
 8002372:	b9f8      	cbnz	r0, 80023b4 <USB_EPStartXfer+0x68>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002374:	88b2      	ldrh	r2, [r6, #4]
 8002376:	4628      	mov	r0, r5
 8002378:	f7ff ffd9 	bl	800232e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800237c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002380:	7832      	ldrb	r2, [r6, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002388:	3302      	adds	r3, #2
 800238a:	f847 4013 	str.w	r4, [r7, r3, lsl #1]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800238e:	7832      	ldrb	r2, [r6, #0]
 8002390:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
}
 80023ac:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80023ae:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 80023b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80023b4:	7830      	ldrb	r0, [r6, #0]
 80023b6:	f835 2020 	ldrh.w	r2, [r5, r0, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80023ba:	00c0      	lsls	r0, r0, #3
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 80023bc:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80023c0:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80023c4:	b292      	uxth	r2, r2
 80023c6:	4402      	add	r2, r0
 80023c8:	f102 0202 	add.w	r2, r2, #2
 80023cc:	f847 4012 	str.w	r4, [r7, r2, lsl #1]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80023d0:	4628      	mov	r0, r5
        pmabuffer = ep->pmaaddr1;
 80023d2:	bf14      	ite	ne
 80023d4:	8932      	ldrhne	r2, [r6, #8]
        pmabuffer = ep->pmaaddr0;
 80023d6:	88f2      	ldrheq	r2, [r6, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80023d8:	f7ff ffa9 	bl	800232e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80023dc:	7873      	ldrb	r3, [r6, #1]
 80023de:	7832      	ldrb	r2, [r6, #0]
 80023e0:	b963      	cbnz	r3, 80023fc <USB_EPStartXfer+0xb0>
 80023e2:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80023e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ea:	051b      	lsls	r3, r3, #20
 80023ec:	0d1b      	lsrs	r3, r3, #20
 80023ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023f6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80023fa:	e7c8      	b.n	800238e <USB_EPStartXfer+0x42>
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d1c6      	bne.n	800238e <USB_EPStartXfer+0x42>
 8002400:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002408:	051b      	lsls	r3, r3, #20
 800240a:	0d1b      	lsrs	r3, r3, #20
 800240c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	e7ef      	b.n	80023f6 <USB_EPStartXfer+0xaa>
    if (ep->xfer_len > ep->maxpacket)
 8002416:	429c      	cmp	r4, r3
      ep->xfer_len =0;
 8002418:	bf94      	ite	ls
 800241a:	2100      	movls	r1, #0
      ep->xfer_len-=len; 
 800241c:	1ae1      	subhi	r1, r4, r3
 800241e:	61b1      	str	r1, [r6, #24]
 8002420:	bf88      	it	hi
 8002422:	461c      	movhi	r4, r3
    if (ep->doublebuffer == 0) 
 8002424:	7833      	ldrb	r3, [r6, #0]
 8002426:	bb60      	cbnz	r0, 8002482 <USB_EPStartXfer+0x136>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002428:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800242c:	2c3e      	cmp	r4, #62	; 0x3e
 800242e:	b292      	uxth	r2, r2
 8002430:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002434:	f102 0206 	add.w	r2, r2, #6
 8002438:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 800243c:	d919      	bls.n	8002472 <USB_EPStartXfer+0x126>
 800243e:	f3c4 114f 	ubfx	r1, r4, #5, #16
 8002442:	06e4      	lsls	r4, r4, #27
 8002444:	bf08      	it	eq
 8002446:	f101 31ff 	addeq.w	r1, r1, #4294967295
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <USB_EPStartXfer+0x1c0>)
 800244c:	bf08      	it	eq
 800244e:	b289      	uxtheq	r1, r1
 8002450:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002454:	b29b      	uxth	r3, r3
 8002456:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800245a:	7832      	ldrb	r2, [r6, #0]
 800245c:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	0c1b      	lsrs	r3, r3, #16
 800246c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002470:	e798      	b.n	80023a4 <USB_EPStartXfer+0x58>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002472:	f3c4 034f 	ubfx	r3, r4, #1, #16
 8002476:	07e1      	lsls	r1, r4, #31
 8002478:	bf44      	itt	mi
 800247a:	3301      	addmi	r3, #1
 800247c:	b29b      	uxthmi	r3, r3
 800247e:	029b      	lsls	r3, r3, #10
 8002480:	e7e8      	b.n	8002454 <USB_EPStartXfer+0x108>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002482:	2a00      	cmp	r2, #0
 8002484:	d1e9      	bne.n	800245a <USB_EPStartXfer+0x10e>
 8002486:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 800248a:	2c3e      	cmp	r4, #62	; 0x3e
 800248c:	b289      	uxth	r1, r1
 800248e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002492:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 8002496:	f505 6280 	add.w	r2, r5, #1024	; 0x400
 800249a:	f101 0102 	add.w	r1, r1, #2
 800249e:	d91d      	bls.n	80024dc <USB_EPStartXfer+0x190>
 80024a0:	f3c4 174f 	ubfx	r7, r4, #5, #16
 80024a4:	06e3      	lsls	r3, r4, #27
 80024a6:	bf08      	it	eq
 80024a8:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80024ac:	4b17      	ldr	r3, [pc, #92]	; (800250c <USB_EPStartXfer+0x1c0>)
 80024ae:	bf08      	it	eq
 80024b0:	b2bf      	uxtheq	r7, r7
 80024b2:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	f842 3011 	str.w	r3, [r2, r1, lsl #1]
 80024bc:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 80024c0:	2c3e      	cmp	r4, #62	; 0x3e
 80024c2:	b289      	uxth	r1, r1
 80024c4:	4401      	add	r1, r0
 80024c6:	f101 0106 	add.w	r1, r1, #6
 80024ca:	d80f      	bhi.n	80024ec <USB_EPStartXfer+0x1a0>
 80024cc:	f3c4 034f 	ubfx	r3, r4, #1, #16
 80024d0:	07e0      	lsls	r0, r4, #31
 80024d2:	bf44      	itt	mi
 80024d4:	3301      	addmi	r3, #1
 80024d6:	b29b      	uxthmi	r3, r3
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	e012      	b.n	8002502 <USB_EPStartXfer+0x1b6>
 80024dc:	f3c4 034f 	ubfx	r3, r4, #1, #16
 80024e0:	07e7      	lsls	r7, r4, #31
 80024e2:	bf44      	itt	mi
 80024e4:	3301      	addmi	r3, #1
 80024e6:	b29b      	uxthmi	r3, r3
 80024e8:	029b      	lsls	r3, r3, #10
 80024ea:	e7e4      	b.n	80024b6 <USB_EPStartXfer+0x16a>
 80024ec:	f3c4 104f 	ubfx	r0, r4, #5, #16
 80024f0:	06e4      	lsls	r4, r4, #27
 80024f2:	bf08      	it	eq
 80024f4:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <USB_EPStartXfer+0x1c0>)
 80024fa:	bf08      	it	eq
 80024fc:	b280      	uxtheq	r0, r0
 80024fe:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8002502:	b29b      	uxth	r3, r3
 8002504:	f842 3011 	str.w	r3, [r2, r1, lsl #1]
 8002508:	e7a7      	b.n	800245a <USB_EPStartXfer+0x10e>
 800250a:	bf00      	nop
 800250c:	ffff8000 	.word	0xffff8000

08002510 <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002510:	3301      	adds	r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002512:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002516:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002518:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 800251c:	b903      	cbnz	r3, 8002520 <USB_ReadPMA+0x10>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800251e:	4770      	bx	lr
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002520:	f850 2b04 	ldr.w	r2, [r0], #4
  for (index = nbytes; index != 0; index--)
 8002524:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002526:	f821 2b02 	strh.w	r2, [r1], #2
  for (index = nbytes; index != 0; index--)
 800252a:	e7f7      	b.n	800251c <USB_ReadPMA+0xc>

0800252c <USBD_MSC_GetHSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgHSDesc);
 800252c:	2320      	movs	r3, #32
 800252e:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgHSDesc;
}
 8002530:	4800      	ldr	r0, [pc, #0]	; (8002534 <USBD_MSC_GetHSCfgDesc+0x8>)
 8002532:	4770      	bx	lr
 8002534:	20000058 	.word	0x20000058

08002538 <USBD_MSC_GetFSCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_CfgFSDesc);
 8002538:	2320      	movs	r3, #32
 800253a:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_CfgFSDesc;
}
 800253c:	4800      	ldr	r0, [pc, #0]	; (8002540 <USBD_MSC_GetFSCfgDesc+0x8>)
 800253e:	4770      	bx	lr
 8002540:	20000038 	.word	0x20000038

08002544 <USBD_MSC_GetOtherSpeedCfgDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_MSC_OtherSpeedCfgDesc);
 8002544:	2320      	movs	r3, #32
 8002546:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_OtherSpeedCfgDesc;
}
 8002548:	4800      	ldr	r0, [pc, #0]	; (800254c <USBD_MSC_GetOtherSpeedCfgDesc+0x8>)
 800254a:	4770      	bx	lr
 800254c:	20000084 	.word	0x20000084

08002550 <USBD_MSC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_MSC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_MSC_DeviceQualifierDesc);
 8002550:	230a      	movs	r3, #10
 8002552:	8003      	strh	r3, [r0, #0]
  return USBD_MSC_DeviceQualifierDesc;
}
 8002554:	4800      	ldr	r0, [pc, #0]	; (8002558 <USBD_MSC_GetDeviceQualifierDescriptor+0x8>)
 8002556:	4770      	bx	lr
 8002558:	20000078 	.word	0x20000078

0800255c <USBD_MSC_Init>:
{
 800255c:	b510      	push	{r4, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800255e:	7c03      	ldrb	r3, [r0, #16]
{
 8002560:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002562:	b9c3      	cbnz	r3, 8002596 <USBD_MSC_Init+0x3a>
    USBD_LL_OpenEP(pdev,
 8002564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002568:	2202      	movs	r2, #2
 800256a:	2101      	movs	r1, #1
 800256c:	f001 fbdc 	bl	8003d28 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8002574:	2202      	movs	r2, #2
 8002576:	2181      	movs	r1, #129	; 0x81
 8002578:	4620      	mov	r0, r4
 800257a:	f001 fbd5 	bl	8003d28 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_MSC_BOT_HandleTypeDef));
 800257e:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8002582:	f001 fc59 	bl	8003e38 <USBD_static_malloc>
 8002586:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 800258a:	b158      	cbz	r0, 80025a4 <USBD_MSC_Init+0x48>
    MSC_BOT_Init(pdev); 
 800258c:	4620      	mov	r0, r4
 800258e:	f000 f8bc 	bl	800270a <MSC_BOT_Init>
    ret = 0;
 8002592:	2000      	movs	r0, #0
}
 8002594:	bd10      	pop	{r4, pc}
    USBD_LL_OpenEP(pdev,
 8002596:	2340      	movs	r3, #64	; 0x40
 8002598:	2202      	movs	r2, #2
 800259a:	2101      	movs	r1, #1
 800259c:	f001 fbc4 	bl	8003d28 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80025a0:	2340      	movs	r3, #64	; 0x40
 80025a2:	e7e7      	b.n	8002574 <USBD_MSC_Init+0x18>
    ret = 1; 
 80025a4:	2001      	movs	r0, #1
 80025a6:	e7f5      	b.n	8002594 <USBD_MSC_Init+0x38>

080025a8 <USBD_MSC_DeInit>:
{
 80025a8:	b510      	push	{r4, lr}
 80025aa:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80025ac:	2101      	movs	r1, #1
 80025ae:	f001 fbcb 	bl	8003d48 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80025b2:	2181      	movs	r1, #129	; 0x81
 80025b4:	4620      	mov	r0, r4
 80025b6:	f001 fbc7 	bl	8003d48 <USBD_LL_CloseEP>
  MSC_BOT_DeInit(pdev);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f000 f8cd 	bl	800275a <MSC_BOT_DeInit>
  if(pdev->pClassData != NULL)
 80025c0:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80025c4:	b120      	cbz	r0, 80025d0 <USBD_MSC_DeInit+0x28>
    USBD_free(pdev->pClassData);
 80025c6:	f001 fc3b 	bl	8003e40 <USBD_static_free>
    pdev->pClassData  = NULL; 
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80025d0:	2000      	movs	r0, #0
 80025d2:	bd10      	pop	{r4, pc}

080025d4 <USBD_MSC_Setup>:
{
 80025d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025d8:	780b      	ldrb	r3, [r1, #0]
{
 80025da:	4607      	mov	r7, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025dc:	f013 0560 	ands.w	r5, r3, #96	; 0x60
{
 80025e0:	460c      	mov	r4, r1
  USBD_MSC_BOT_HandleTypeDef     *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;
 80025e2:	f8d0 8218 	ldr.w	r8, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80025e6:	d02d      	beq.n	8002644 <USBD_MSC_Setup+0x70>
 80025e8:	2d20      	cmp	r5, #32
 80025ea:	d15d      	bne.n	80026a8 <USBD_MSC_Setup+0xd4>
    switch (req->bRequest)
 80025ec:	784a      	ldrb	r2, [r1, #1]
 80025ee:	2afe      	cmp	r2, #254	; 0xfe
 80025f0:	d005      	beq.n	80025fe <USBD_MSC_Setup+0x2a>
 80025f2:	2aff      	cmp	r2, #255	; 0xff
 80025f4:	d019      	beq.n	800262a <USBD_MSC_Setup+0x56>
       USBD_CtlError(pdev , req);
 80025f6:	f000 fe50 	bl	800329a <USBD_CtlError>
       return USBD_FAIL; 
 80025fa:	2502      	movs	r5, #2
 80025fc:	e01f      	b.n	800263e <USBD_MSC_Setup+0x6a>
      if((req->wValue  == 0) && 
 80025fe:	884d      	ldrh	r5, [r1, #2]
 8002600:	b985      	cbnz	r5, 8002624 <USBD_MSC_Setup+0x50>
 8002602:	88ce      	ldrh	r6, [r1, #6]
 8002604:	2e01      	cmp	r6, #1
 8002606:	d10d      	bne.n	8002624 <USBD_MSC_Setup+0x50>
         (req->wLength == 1) &&
 8002608:	061a      	lsls	r2, r3, #24
 800260a:	d50b      	bpl.n	8002624 <USBD_MSC_Setup+0x50>
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800260c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4798      	blx	r3
        USBD_CtlSendData (pdev,
 8002614:	4632      	mov	r2, r6
        hmsc->max_lun = ((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8002616:	f8c8 0000 	str.w	r0, [r8]
        USBD_CtlSendData (pdev,
 800261a:	4641      	mov	r1, r8
 800261c:	4638      	mov	r0, r7
      USBD_CtlSendData (pdev,
 800261e:	f000 fe63 	bl	80032e8 <USBD_CtlSendData>
      break;
 8002622:	e00c      	b.n	800263e <USBD_MSC_Setup+0x6a>
         USBD_CtlError(pdev , req);
 8002624:	4621      	mov	r1, r4
 8002626:	4638      	mov	r0, r7
 8002628:	e7e5      	b.n	80025f6 <USBD_MSC_Setup+0x22>
      if((req->wValue  == 0) && 
 800262a:	884a      	ldrh	r2, [r1, #2]
 800262c:	2a00      	cmp	r2, #0
 800262e:	d1f9      	bne.n	8002624 <USBD_MSC_Setup+0x50>
 8002630:	88cd      	ldrh	r5, [r1, #6]
 8002632:	2d00      	cmp	r5, #0
 8002634:	d1f6      	bne.n	8002624 <USBD_MSC_Setup+0x50>
         (req->wLength == 0) &&
 8002636:	061b      	lsls	r3, r3, #24
 8002638:	d4f4      	bmi.n	8002624 <USBD_MSC_Setup+0x50>
         MSC_BOT_Reset(pdev);
 800263a:	f000 f883 	bl	8002744 <MSC_BOT_Reset>
}
 800263e:	4628      	mov	r0, r5
 8002640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8002644:	784e      	ldrb	r6, [r1, #1]
 8002646:	2e0a      	cmp	r6, #10
 8002648:	d01c      	beq.n	8002684 <USBD_MSC_Setup+0xb0>
 800264a:	2e0b      	cmp	r6, #11
 800264c:	d01e      	beq.n	800268c <USBD_MSC_Setup+0xb8>
 800264e:	2e01      	cmp	r6, #1
 8002650:	d1f5      	bne.n	800263e <USBD_MSC_Setup+0x6a>
      USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8002652:	7909      	ldrb	r1, [r1, #4]
 8002654:	f001 fb86 	bl	8003d64 <USBD_LL_FlushEP>
      USBD_LL_CloseEP (pdev , (uint8_t)req->wIndex);
 8002658:	4638      	mov	r0, r7
 800265a:	7921      	ldrb	r1, [r4, #4]
 800265c:	f001 fb74 	bl	8003d48 <USBD_LL_CloseEP>
      if((((uint8_t)req->wIndex) & 0x80) == 0x80)
 8002660:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	7c3b      	ldrb	r3, [r7, #16]
 8002668:	da16      	bge.n	8002698 <USBD_MSC_Setup+0xc4>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800266a:	b99b      	cbnz	r3, 8002694 <USBD_MSC_Setup+0xc0>
          USBD_LL_OpenEP(pdev,
 800266c:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 8002670:	2202      	movs	r2, #2
 8002672:	2181      	movs	r1, #129	; 0x81
          USBD_LL_OpenEP(pdev,
 8002674:	4638      	mov	r0, r7
 8002676:	f001 fb57 	bl	8003d28 <USBD_LL_OpenEP>
      MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800267a:	4638      	mov	r0, r7
 800267c:	7921      	ldrb	r1, [r4, #4]
 800267e:	f000 f913 	bl	80028a8 <MSC_BOT_CplClrFeature>
      break;
 8002682:	e7dc      	b.n	800263e <USBD_MSC_Setup+0x6a>
      USBD_CtlSendData (pdev,
 8002684:	2201      	movs	r2, #1
 8002686:	f108 0104 	add.w	r1, r8, #4
 800268a:	e7c8      	b.n	800261e <USBD_MSC_Setup+0x4a>
      hmsc->interface = (uint8_t)(req->wValue);
 800268c:	788b      	ldrb	r3, [r1, #2]
 800268e:	f8c8 3004 	str.w	r3, [r8, #4]
      break;
 8002692:	e7d4      	b.n	800263e <USBD_MSC_Setup+0x6a>
          USBD_LL_OpenEP(pdev,
 8002694:	2340      	movs	r3, #64	; 0x40
 8002696:	e7eb      	b.n	8002670 <USBD_MSC_Setup+0x9c>
        if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002698:	b923      	cbnz	r3, 80026a4 <USBD_MSC_Setup+0xd0>
          USBD_LL_OpenEP(pdev,
 800269a:	f44f 7300 	mov.w	r3, #512	; 0x200
          USBD_LL_OpenEP(pdev,
 800269e:	2202      	movs	r2, #2
 80026a0:	4631      	mov	r1, r6
 80026a2:	e7e7      	b.n	8002674 <USBD_MSC_Setup+0xa0>
 80026a4:	2340      	movs	r3, #64	; 0x40
 80026a6:	e7fa      	b.n	800269e <USBD_MSC_Setup+0xca>
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80026a8:	2500      	movs	r5, #0
 80026aa:	e7c8      	b.n	800263e <USBD_MSC_Setup+0x6a>

080026ac <USBD_MSC_DataIn>:
{
 80026ac:	b508      	push	{r3, lr}
  MSC_BOT_DataIn(pdev , epnum);
 80026ae:	f000 f875 	bl	800279c <MSC_BOT_DataIn>
}
 80026b2:	2000      	movs	r0, #0
 80026b4:	bd08      	pop	{r3, pc}

080026b6 <USBD_MSC_DataOut>:
{
 80026b6:	b508      	push	{r3, lr}
  MSC_BOT_DataOut(pdev , epnum);
 80026b8:	f000 f88c 	bl	80027d4 <MSC_BOT_DataOut>
}
 80026bc:	2000      	movs	r0, #0
 80026be:	bd08      	pop	{r3, pc}

080026c0 <USBD_MSC_RegisterStorage>:
* @retval status
*/
uint8_t  USBD_MSC_RegisterStorage  (USBD_HandleTypeDef   *pdev, 
                                    USBD_StorageTypeDef *fops)
{
  if(fops != NULL)
 80026c0:	b109      	cbz	r1, 80026c6 <USBD_MSC_RegisterStorage+0x6>
  {
    pdev->pUserData= fops;
 80026c2:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
  }
  return 0;
}
 80026c6:	2000      	movs	r0, #0
 80026c8:	4770      	bx	lr

080026ca <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort (USBD_HandleTypeDef  *pdev)
{
 80026ca:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80026cc:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
{
 80026d0:	4604      	mov	r4, r0
  
  if ((hmsc->cbw.bmFlags == 0) && 
 80026d2:	f895 3218 	ldrb.w	r3, [r5, #536]	; 0x218
 80026d6:	b93b      	cbnz	r3, 80026e8 <MSC_BOT_Abort+0x1e>
 80026d8:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80026dc:	b123      	cbz	r3, 80026e8 <MSC_BOT_Abort+0x1e>
      (hmsc->cbw.dDataLength != 0) &&
 80026de:	7a6b      	ldrb	r3, [r5, #9]
 80026e0:	b913      	cbnz	r3, 80026e8 <MSC_BOT_Abort+0x1e>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL) )
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR );
 80026e2:	2101      	movs	r1, #1
 80026e4:	f001 fb4c 	bl	8003d80 <USBD_LL_StallEP>
  }
  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80026e8:	2181      	movs	r1, #129	; 0x81
 80026ea:	4620      	mov	r0, r4
 80026ec:	f001 fb48 	bl	8003d80 <USBD_LL_StallEP>
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80026f0:	7a6b      	ldrb	r3, [r5, #9]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d108      	bne.n	8002708 <MSC_BOT_Abort+0x3e>
  {
    USBD_LL_PrepareReceive (pdev,
 80026f6:	4620      	mov	r0, r4
 80026f8:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 80026fc:	231f      	movs	r3, #31
                      MSC_EPOUT_ADDR,
                      (uint8_t *)&hmsc->cbw, 
                      USBD_BOT_CBW_LENGTH);    
  }
}
 80026fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    USBD_LL_PrepareReceive (pdev,
 8002702:	2101      	movs	r1, #1
 8002704:	f001 bb84 	b.w	8003e10 <USBD_LL_PrepareReceive>
}
 8002708:	bd70      	pop	{r4, r5, r6, pc}

0800270a <MSC_BOT_Init>:
{
 800270a:	b570      	push	{r4, r5, r6, lr}
 800270c:	4604      	mov	r4, r0
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 800270e:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002712:	2000      	movs	r0, #0
 8002714:	8128      	strh	r0, [r5, #8]
  hmsc->scsi_sense_head = 0;
 8002716:	f8a5 025c 	strh.w	r0, [r5, #604]	; 0x25c
  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0);
 800271a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4798      	blx	r3
  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8002722:	2101      	movs	r1, #1
 8002724:	4620      	mov	r0, r4
 8002726:	f001 fb1d 	bl	8003d64 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800272a:	2181      	movs	r1, #129	; 0x81
 800272c:	4620      	mov	r0, r4
 800272e:	f001 fb19 	bl	8003d64 <USBD_LL_FlushEP>
  USBD_LL_PrepareReceive (pdev,
 8002732:	4620      	mov	r0, r4
 8002734:	f505 7203 	add.w	r2, r5, #524	; 0x20c
 8002738:	231f      	movs	r3, #31
}
 800273a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 800273e:	2101      	movs	r1, #1
 8002740:	f001 bb66 	b.w	8003e10 <USBD_LL_PrepareReceive>

08002744 <MSC_BOT_Reset>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 8002744:	f44f 7380 	mov.w	r3, #256	; 0x100
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 8002748:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  USBD_LL_PrepareReceive (pdev,
 800274c:	2101      	movs	r1, #1
  hmsc->bot_state  = USBD_BOT_IDLE;
 800274e:	8113      	strh	r3, [r2, #8]
  USBD_LL_PrepareReceive (pdev,
 8002750:	231f      	movs	r3, #31
 8002752:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8002756:	f001 bb5b 	b.w	8003e10 <USBD_LL_PrepareReceive>

0800275a <MSC_BOT_DeInit>:
  hmsc->bot_state  = USBD_BOT_IDLE;
 800275a:	2200      	movs	r2, #0
 800275c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002760:	721a      	strb	r2, [r3, #8]
}
 8002762:	4770      	bx	lr

08002764 <MSC_BOT_SendCSW>:
{
 8002764:	b570      	push	{r4, r5, r6, lr}
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MSC_BOT_SendCSW+0x34>)
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002768:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 800276c:	4605      	mov	r5, r0
  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800276e:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
  hmsc->bot_state = USBD_BOT_IDLE;
 8002772:	2300      	movs	r3, #0
  hmsc->csw.bStatus = CSW_Status;
 8002774:	f884 1238 	strb.w	r1, [r4, #568]	; 0x238
  hmsc->bot_state = USBD_BOT_IDLE;
 8002778:	7223      	strb	r3, [r4, #8]
  USBD_LL_Transmit (pdev, 
 800277a:	f504 720b 	add.w	r2, r4, #556	; 0x22c
 800277e:	230d      	movs	r3, #13
 8002780:	2181      	movs	r1, #129	; 0x81
 8002782:	f001 fb37 	bl	8003df4 <USBD_LL_Transmit>
  USBD_LL_PrepareReceive (pdev,
 8002786:	4628      	mov	r0, r5
 8002788:	f504 7203 	add.w	r2, r4, #524	; 0x20c
 800278c:	231f      	movs	r3, #31
}
 800278e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_PrepareReceive (pdev,
 8002792:	2101      	movs	r1, #1
 8002794:	f001 bb3c 	b.w	8003e10 <USBD_LL_PrepareReceive>
 8002798:	53425355 	.word	0x53425355

0800279c <MSC_BOT_DataIn>:
{
 800279c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 800279e:	f8d0 1218 	ldr.w	r1, [r0, #536]	; 0x218
{
 80027a2:	4604      	mov	r4, r0
  switch (hmsc->bot_state)
 80027a4:	7a0b      	ldrb	r3, [r1, #8]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d007      	beq.n	80027ba <MSC_BOT_DataIn+0x1e>
 80027aa:	3b03      	subs	r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d80f      	bhi.n	80027d0 <MSC_BOT_DataIn+0x34>
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 80027b0:	2100      	movs	r1, #0
}
 80027b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80027b6:	f7ff bfd5 	b.w	8002764 <MSC_BOT_SendCSW>
    if(SCSI_ProcessCmd(pdev,
 80027ba:	f201 221b 	addw	r2, r1, #539	; 0x21b
 80027be:	f891 1219 	ldrb.w	r1, [r1, #537]	; 0x219
 80027c2:	f000 f899 	bl	80028f8 <SCSI_ProcessCmd>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	da02      	bge.n	80027d0 <MSC_BOT_DataIn+0x34>
      MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80027ca:	2101      	movs	r1, #1
 80027cc:	4620      	mov	r0, r4
 80027ce:	e7f0      	b.n	80027b2 <MSC_BOT_DataIn+0x16>
}
 80027d0:	bd10      	pop	{r4, pc}
	...

080027d4 <MSC_BOT_DataOut>:
{
 80027d4:	b570      	push	{r4, r5, r6, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;
 80027d6:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
{
 80027da:	4605      	mov	r5, r0
  switch (hmsc->bot_state)
 80027dc:	7a26      	ldrb	r6, [r4, #8]
 80027de:	b116      	cbz	r6, 80027e6 <MSC_BOT_DataOut+0x12>
 80027e0:	2e01      	cmp	r6, #1
 80027e2:	d056      	beq.n	8002892 <MSC_BOT_DataOut+0xbe>
}
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
  hmsc->csw.dTag = hmsc->cbw.dTag;
 80027e6:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80027ea:	2101      	movs	r1, #1
  hmsc->csw.dTag = hmsc->cbw.dTag;
 80027ec:	f8c4 3230 	str.w	r3, [r4, #560]	; 0x230
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80027f0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80027f4:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if ((USBD_LL_GetRxDataSize (pdev ,MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80027f8:	f001 fb18 	bl	8003e2c <USBD_LL_GetRxDataSize>
 80027fc:	281f      	cmp	r0, #31
 80027fe:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8002802:	d10b      	bne.n	800281c <MSC_BOT_DataOut+0x48>
 8002804:	f8d4 220c 	ldr.w	r2, [r4, #524]	; 0x20c
 8002808:	4b26      	ldr	r3, [pc, #152]	; (80028a4 <MSC_BOT_DataOut+0xd0>)
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <MSC_BOT_DataOut+0x48>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE)||
 800280e:	2901      	cmp	r1, #1
 8002810:	d804      	bhi.n	800281c <MSC_BOT_DataOut+0x48>
        (hmsc->cbw.bLUN > 1) || 
 8002812:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8002816:	3b01      	subs	r3, #1
 8002818:	2b0f      	cmp	r3, #15
 800281a:	d90b      	bls.n	8002834 <MSC_BOT_DataOut+0x60>
    SCSI_SenseCode(pdev,
 800281c:	2320      	movs	r3, #32
 800281e:	2205      	movs	r2, #5
 8002820:	4628      	mov	r0, r5
 8002822:	f000 fa73 	bl	8002d0c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;   
 8002826:	2302      	movs	r3, #2
 8002828:	7263      	strb	r3, [r4, #9]
        MSC_BOT_Abort(pdev);
 800282a:	4628      	mov	r0, r5
}
 800282c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_Abort(pdev);
 8002830:	f7ff bf4b 	b.w	80026ca <MSC_BOT_Abort>
    if(SCSI_ProcessCmd(pdev,
 8002834:	4628      	mov	r0, r5
 8002836:	f204 221b 	addw	r2, r4, #539	; 0x21b
 800283a:	f000 f85d 	bl	80028f8 <SCSI_ProcessCmd>
 800283e:	2800      	cmp	r0, #0
 8002840:	7a23      	ldrb	r3, [r4, #8]
 8002842:	da07      	bge.n	8002854 <MSC_BOT_DataOut+0x80>
      if(hmsc->bot_state == USBD_BOT_NO_DATA)
 8002844:	2b05      	cmp	r3, #5
 8002846:	d1f0      	bne.n	800282a <MSC_BOT_DataOut+0x56>
       MSC_BOT_SendCSW (pdev,
 8002848:	2101      	movs	r1, #1
        MSC_BOT_SendCSW (pdev,
 800284a:	4628      	mov	r0, r5
}
 800284c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        MSC_BOT_SendCSW (pdev,
 8002850:	f7ff bf88 	b.w	8002764 <MSC_BOT_SendCSW>
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) && 
 8002854:	3b01      	subs	r3, #1
 8002856:	2b02      	cmp	r3, #2
 8002858:	d9c4      	bls.n	80027e4 <MSC_BOT_DataOut+0x10>
      if (hmsc->bot_data_length > 0)
 800285a:	8961      	ldrh	r1, [r4, #10]
 800285c:	2900      	cmp	r1, #0
 800285e:	d0f4      	beq.n	800284a <MSC_BOT_DataOut+0x76>
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002860:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8002864:	4628      	mov	r0, r5
  len = MIN (hmsc->cbw.dDataLength, len);
 8002866:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800286a:	f883 6238 	strb.w	r6, [r3, #568]	; 0x238
  len = MIN (hmsc->cbw.dDataLength, len);
 800286e:	4291      	cmp	r1, r2
 8002870:	bf28      	it	cs
 8002872:	4611      	movcs	r1, r2
  hmsc->csw.dDataResidue -= len;
 8002874:	f8d3 2234 	ldr.w	r2, [r3, #564]	; 0x234
 8002878:	1a52      	subs	r2, r2, r1
 800287a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800287e:	2204      	movs	r2, #4
 8002880:	721a      	strb	r2, [r3, #8]
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 8002882:	b28b      	uxth	r3, r1
 8002884:	f104 020c 	add.w	r2, r4, #12
 8002888:	2181      	movs	r1, #129	; 0x81
}
 800288a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  USBD_LL_Transmit (pdev, MSC_EPIN_ADDR, buf, len);  
 800288e:	f001 bab1 	b.w	8003df4 <USBD_LL_Transmit>
    if(SCSI_ProcessCmd(pdev,
 8002892:	f894 1219 	ldrb.w	r1, [r4, #537]	; 0x219
 8002896:	f204 221b 	addw	r2, r4, #539	; 0x21b
 800289a:	f000 f82d 	bl	80028f8 <SCSI_ProcessCmd>
 800289e:	2800      	cmp	r0, #0
 80028a0:	daa0      	bge.n	80027e4 <MSC_BOT_DataOut+0x10>
 80028a2:	e7d1      	b.n	8002848 <MSC_BOT_DataOut+0x74>
 80028a4:	43425355 	.word	0x43425355

080028a8 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature (USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80028a8:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 80028aa:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(hmsc->bot_status == USBD_BOT_STATUS_ERROR )/* Bad CBW Signature */
 80028ae:	7a63      	ldrb	r3, [r4, #9]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d105      	bne.n	80028c0 <MSC_BOT_CplClrFeature+0x18>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80028b4:	2181      	movs	r1, #129	; 0x81
 80028b6:	f001 fa63 	bl	8003d80 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;    
 80028ba:	2300      	movs	r3, #0
 80028bc:	7263      	strb	r3, [r4, #9]
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
  }
  
}
 80028be:	bd10      	pop	{r4, pc}
  else if(((epnum & 0x80) == 0x80) && ( hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80028c0:	060a      	lsls	r2, r1, #24
 80028c2:	d5fc      	bpl.n	80028be <MSC_BOT_CplClrFeature+0x16>
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d0fa      	beq.n	80028be <MSC_BOT_CplClrFeature+0x16>
}
 80028c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_FAILED);
 80028cc:	2101      	movs	r1, #1
 80028ce:	f7ff bf49 	b.w	8002764 <MSC_BOT_SendCSW>

080028d2 <SCSI_SenseCode.constprop.0.isra.0>:
*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
  
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80028d2:	f890 325d 	ldrb.w	r3, [r0, #605]	; 0x25d
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
 80028d6:	b510      	push	{r4, lr}
 80028d8:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
  hmsc->scsi_sense_tail++;
 80028dc:	3301      	adds	r3, #1
 80028de:	b2db      	uxtb	r3, r3
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
  {
    hmsc->scsi_sense_tail = 0;
 80028e0:	2b04      	cmp	r3, #4
 80028e2:	bf08      	it	eq
 80028e4:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80028e6:	0212      	lsls	r2, r2, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 80028e8:	f884 123c 	strb.w	r1, [r4, #572]	; 0x23c
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 80028ec:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80028f0:	f880 325d 	strb.w	r3, [r0, #605]	; 0x25d
  }
}
 80028f4:	bd10      	pop	{r4, pc}
	...

080028f8 <SCSI_ProcessCmd>:
{
 80028f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  switch (params[0])
 80028fc:	7813      	ldrb	r3, [r2, #0]
{
 80028fe:	4606      	mov	r6, r0
  switch (params[0])
 8002900:	2b2f      	cmp	r3, #47	; 0x2f
{
 8002902:	460d      	mov	r5, r1
 8002904:	4617      	mov	r7, r2
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;  
 8002906:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  switch (params[0])
 800290a:	d83b      	bhi.n	8002984 <SCSI_ProcessCmd+0x8c>
 800290c:	2b19      	cmp	r3, #25
 800290e:	d807      	bhi.n	8002920 <SCSI_ProcessCmd+0x28>
 8002910:	2b03      	cmp	r3, #3
 8002912:	d054      	beq.n	80029be <SCSI_ProcessCmd+0xc6>
 8002914:	2b12      	cmp	r3, #18
 8002916:	d07f      	beq.n	8002a18 <SCSI_ProcessCmd+0x120>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d039      	beq.n	8002990 <SCSI_ProcessCmd+0x98>
    SCSI_SenseCode(pdev, 
 800291c:	2220      	movs	r2, #32
 800291e:	e1e5      	b.n	8002cec <SCSI_ProcessCmd+0x3f4>
  switch (params[0])
 8002920:	3b1a      	subs	r3, #26
 8002922:	2b15      	cmp	r3, #21
 8002924:	d8fa      	bhi.n	800291c <SCSI_ProcessCmd+0x24>
 8002926:	a201      	add	r2, pc, #4	; (adr r2, 800292c <SCSI_ProcessCmd+0x34>)
 8002928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292c:	08002a55 	.word	0x08002a55
 8002930:	08002a4f 	.word	0x08002a4f
 8002934:	0800291d 	.word	0x0800291d
 8002938:	0800291d 	.word	0x0800291d
 800293c:	08002a4f 	.word	0x08002a4f
 8002940:	0800291d 	.word	0x0800291d
 8002944:	0800291d 	.word	0x0800291d
 8002948:	0800291d 	.word	0x0800291d
 800294c:	0800291d 	.word	0x0800291d
 8002950:	08002a65 	.word	0x08002a65
 8002954:	0800291d 	.word	0x0800291d
 8002958:	08002ab3 	.word	0x08002ab3
 800295c:	0800291d 	.word	0x0800291d
 8002960:	0800291d 	.word	0x0800291d
 8002964:	08002aed 	.word	0x08002aed
 8002968:	0800291d 	.word	0x0800291d
 800296c:	08002bc5 	.word	0x08002bc5
 8002970:	0800291d 	.word	0x0800291d
 8002974:	0800291d 	.word	0x0800291d
 8002978:	0800291d 	.word	0x0800291d
 800297c:	0800291d 	.word	0x0800291d
 8002980:	08002ce3 	.word	0x08002ce3
 8002984:	2b5a      	cmp	r3, #90	; 0x5a
 8002986:	d1c9      	bne.n	800291c <SCSI_ProcessCmd+0x24>
  hmsc->bot_data_length = len;
 8002988:	2308      	movs	r3, #8
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 800298a:	4ac2      	ldr	r2, [pc, #776]	; (8002c94 <SCSI_ProcessCmd+0x39c>)
  hmsc->bot_data_length = len;
 800298c:	8163      	strh	r3, [r4, #10]
  while (len) 
 800298e:	e064      	b.n	8002a5a <SCSI_ProcessCmd+0x162>
  if (hmsc->cbw.dDataLength != 0)
 8002990:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1c1      	bne.n	800291c <SCSI_ProcessCmd+0x24>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002998:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800299c:	4608      	mov	r0, r1
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4798      	blx	r3
 80029a2:	4605      	mov	r5, r0
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d053      	beq.n	8002a50 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev,
 80029a8:	223a      	movs	r2, #58	; 0x3a
 80029aa:	2102      	movs	r1, #2
 80029ac:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 80029b0:	f7ff ff8f 	bl	80028d2 <SCSI_SenseCode.constprop.0.isra.0>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80029b4:	2305      	movs	r3, #5
 80029b6:	7223      	strb	r3, [r4, #8]
    return -1;
 80029b8:	f04f 35ff 	mov.w	r5, #4294967295
 80029bc:	e028      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
    hmsc->bot_data[i] = 0;
 80029be:	2212      	movs	r2, #18
 80029c0:	2100      	movs	r1, #0
 80029c2:	f104 000c 	add.w	r0, r4, #12
 80029c6:	f001 fade 	bl	8003f86 <memset>
  hmsc->bot_data[0]	= 0x70;		
 80029ca:	2370      	movs	r3, #112	; 0x70
 80029cc:	7323      	strb	r3, [r4, #12]
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80029ce:	230c      	movs	r3, #12
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80029d0:	f894 225d 	ldrb.w	r2, [r4, #605]	; 0x25d
  hmsc->bot_data[7]	= REQUEST_SENSE_DATA_LEN - 6;	
 80029d4:	74e3      	strb	r3, [r4, #19]
  if((hmsc->scsi_sense_head != hmsc->scsi_sense_tail)) {
 80029d6:	f894 325c 	ldrb.w	r3, [r4, #604]	; 0x25c
 80029da:	429a      	cmp	r2, r3
 80029dc:	d011      	beq.n	8002a02 <SCSI_ProcessCmd+0x10a>
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80029de:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    hmsc->scsi_sense_head++;
 80029e2:	3301      	adds	r3, #1
 80029e4:	b2db      	uxtb	r3, r3
    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80029e6:	2b04      	cmp	r3, #4
      hmsc->scsi_sense_head = 0;
 80029e8:	bf08      	it	eq
 80029ea:	2300      	moveq	r3, #0
    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;		
 80029ec:	f892 123c 	ldrb.w	r1, [r2, #572]	; 0x23c
 80029f0:	73a1      	strb	r1, [r4, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;	
 80029f2:	f892 1241 	ldrb.w	r1, [r2, #577]	; 0x241
 80029f6:	7621      	strb	r1, [r4, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 80029f8:	f892 2240 	ldrb.w	r2, [r2, #576]	; 0x240
      hmsc->scsi_sense_head = 0;
 80029fc:	f884 325c 	strb.w	r3, [r4, #604]	; 0x25c
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;	
 8002a00:	7662      	strb	r2, [r4, #25]
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;  
 8002a02:	2312      	movs	r3, #18
 8002a04:	8163      	strh	r3, [r4, #10]
  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8002a06:	793b      	ldrb	r3, [r7, #4]
 8002a08:	2b12      	cmp	r3, #18
    hmsc->bot_data_length = params[4];
 8002a0a:	bf98      	it	ls
 8002a0c:	8163      	strhls	r3, [r4, #10]
    return SCSI_RequestSense (pdev, lun, params);
 8002a0e:	2500      	movs	r5, #0
}
 8002a10:	4628      	mov	r0, r5
 8002a12:	b003      	add	sp, #12
 8002a14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (params[1] & 0x01)/*Evpd is set*/
 8002a18:	7853      	ldrb	r3, [r2, #1]
 8002a1a:	07db      	lsls	r3, r3, #31
 8002a1c:	d414      	bmi.n	8002a48 <SCSI_ProcessCmd+0x150>
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8002a1e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002a22:	69da      	ldr	r2, [r3, #28]
 8002a24:	2324      	movs	r3, #36	; 0x24
 8002a26:	fb03 2201 	mla	r2, r3, r1, r2
    len = pPage[4] + 5;
 8002a2a:	7913      	ldrb	r3, [r2, #4]
 8002a2c:	7939      	ldrb	r1, [r7, #4]
 8002a2e:	3305      	adds	r3, #5
 8002a30:	428b      	cmp	r3, r1
 8002a32:	bf28      	it	cs
 8002a34:	460b      	movcs	r3, r1
  hmsc->bot_data_length = len;
 8002a36:	8163      	strh	r3, [r4, #10]
  while (len) 
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0e8      	beq.n	8002a0e <SCSI_ProcessCmd+0x116>
    len--;
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
    hmsc->bot_data[len] = pPage[len];
 8002a40:	5cd0      	ldrb	r0, [r2, r3]
 8002a42:	18e1      	adds	r1, r4, r3
 8002a44:	7308      	strb	r0, [r1, #12]
 8002a46:	e7f7      	b.n	8002a38 <SCSI_ProcessCmd+0x140>
    len = LENGTH_INQUIRY_PAGE00;
 8002a48:	2307      	movs	r3, #7
    pPage = (uint8_t *)MSC_Page00_Inquiry_Data;
 8002a4a:	4a93      	ldr	r2, [pc, #588]	; (8002c98 <SCSI_ProcessCmd+0x3a0>)
 8002a4c:	e7f3      	b.n	8002a36 <SCSI_ProcessCmd+0x13e>
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData;   
  hmsc->bot_data_length = 0;
 8002a4e:	2500      	movs	r5, #0
                            hmsc->scsi_blk_addr, 
                            hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */      
  }
  hmsc->bot_data_length = 0;
 8002a50:	8165      	strh	r5, [r4, #10]
  return 0;
 8002a52:	e7dd      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
  hmsc->bot_data_length = len;
 8002a54:	2308      	movs	r3, #8
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 8002a56:	4a91      	ldr	r2, [pc, #580]	; (8002c9c <SCSI_ProcessCmd+0x3a4>)
  hmsc->bot_data_length = len;
 8002a58:	8163      	strh	r3, [r4, #10]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8002a5a:	6813      	ldr	r3, [r2, #0]
 8002a5c:	60e3      	str	r3, [r4, #12]
 8002a5e:	6853      	ldr	r3, [r2, #4]
 8002a60:	6123      	str	r3, [r4, #16]
 8002a62:	e7d4      	b.n	8002a0e <SCSI_ProcessCmd+0x116>
    hmsc->bot_data[i] = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60e3      	str	r3, [r4, #12]
 8002a68:	6123      	str	r3, [r4, #16]
 8002a6a:	6163      	str	r3, [r4, #20]
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0)
 8002a6c:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002a70:	f10d 0202 	add.w	r2, sp, #2
 8002a74:	4628      	mov	r0, r5
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	a901      	add	r1, sp, #4
 8002a7a:	4798      	blx	r3
 8002a7c:	4605      	mov	r5, r0
 8002a7e:	b120      	cbz	r0, 8002a8a <SCSI_ProcessCmd+0x192>
      SCSI_SenseCode(pdev,
 8002a80:	223a      	movs	r2, #58	; 0x3a
      SCSI_SenseCode(pdev,
 8002a82:	2102      	movs	r1, #2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
                              hmsc->bot_data, 
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
                              len / hmsc->scsi_blk_size) < 0)
  {
    SCSI_SenseCode(pdev,
 8002a84:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 8002a88:	e0c9      	b.n	8002c1e <SCSI_ProcessCmd+0x326>
    hmsc->bot_data[3] = 0x08;
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1) >> 24);
 8002a8e:	9b01      	ldr	r3, [sp, #4]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	0e1a      	lsrs	r2, r3, #24
 8002a94:	7422      	strb	r2, [r4, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1) >> 16);
 8002a96:	0c1a      	lsrs	r2, r3, #16
 8002a98:	7462      	strb	r2, [r4, #17]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1);
 8002a9a:	74e3      	strb	r3, [r4, #19]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1) >>  8);
 8002a9c:	0a1a      	lsrs	r2, r3, #8
 8002a9e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8002aa2:	74a2      	strb	r2, [r4, #18]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8002aa4:	ba5b      	rev16	r3, r3
    hmsc->bot_data[8] = 0x02;
 8002aa6:	2202      	movs	r2, #2
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8002aa8:	82e3      	strh	r3, [r4, #22]
    hmsc->bot_data_length = 12;
 8002aaa:	230c      	movs	r3, #12
    hmsc->bot_data[8] = 0x02;
 8002aac:	82a2      	strh	r2, [r4, #20]
    hmsc->bot_data_length = 8;
 8002aae:	8163      	strh	r3, [r4, #10]
    return 0;
 8002ab0:	e7ae      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
  if(((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8002ab2:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002ab6:	f204 225e 	addw	r2, r4, #606	; 0x25e
 8002aba:	4628      	mov	r0, r5
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f504 7118 	add.w	r1, r4, #608	; 0x260
 8002ac2:	4798      	blx	r3
 8002ac4:	4605      	mov	r5, r0
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d1da      	bne.n	8002a80 <SCSI_ProcessCmd+0x188>
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8002aca:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8002ace:	8220      	strh	r0, [r4, #16]
    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 24);
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	0e1a      	lsrs	r2, r3, #24
 8002ad4:	7322      	strb	r2, [r4, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >> 16);
 8002ad6:	0c1a      	lsrs	r2, r3, #16
 8002ad8:	7362      	strb	r2, [r4, #13]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1);
 8002ada:	73e3      	strb	r3, [r4, #15]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1) >>  8);
 8002adc:	0a1a      	lsrs	r2, r3, #8
 8002ade:	f8b4 325e 	ldrh.w	r3, [r4, #606]	; 0x25e
 8002ae2:	73a2      	strb	r2, [r4, #14]
    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8002ae4:	ba5b      	rev16	r3, r3
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8002ae6:	8263      	strh	r3, [r4, #18]
    hmsc->bot_data_length = 8;
 8002ae8:	2308      	movs	r3, #8
 8002aea:	e7e0      	b.n	8002aae <SCSI_ProcessCmd+0x1b6>
  if(hmsc->bot_state == USBD_BOT_IDLE)  /* Idle */
 8002aec:	7a23      	ldrb	r3, [r4, #8]
 8002aee:	bb6b      	cbnz	r3, 8002b4c <SCSI_ProcessCmd+0x254>
    if ((hmsc->cbw.bmFlags & 0x80) != 0x80)
 8002af0:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f6bf af11 	bge.w	800291c <SCSI_ProcessCmd+0x24>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002afa:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002afe:	4608      	mov	r0, r1
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	4798      	blx	r3
 8002b04:	2800      	cmp	r0, #0
 8002b06:	d1bb      	bne.n	8002a80 <SCSI_ProcessCmd+0x188>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002b08:	f8d7 2002 	ldr.w	r2, [r7, #2]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8002b0c:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 8002b10:	ba12      	rev	r2, r2
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002b12:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8002b16:	f8b7 3007 	ldrh.w	r3, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002b1a:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8002b1e:	ba5b      	rev16	r3, r3
 8002b20:	b29b      	uxth	r3, r3
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002b22:	189f      	adds	r7, r3, r2
 8002b24:	428f      	cmp	r7, r1
    hmsc->scsi_blk_len =  (params[7] <<  8) | \
 8002b26:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002b2a:	d876      	bhi.n	8002c1a <SCSI_ProcessCmd+0x322>
    hmsc->bot_state = USBD_BOT_DATA_IN;
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	7221      	strb	r1, [r4, #8]
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002b30:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8002b34:	434a      	muls	r2, r1
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002b36:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002b38:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002b3c:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002b40:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d001      	beq.n	8002b4c <SCSI_ProcessCmd+0x254>
      SCSI_SenseCode(pdev,
 8002b48:	2220      	movs	r2, #32
 8002b4a:	e067      	b.n	8002c1c <SCSI_ProcessCmd+0x324>
  hmsc->bot_data_length = MSC_MEDIA_PACKET;  
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	8163      	strh	r3, [r4, #10]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData;   
 8002b52:	f8d6 4218 	ldr.w	r4, [r6, #536]	; 0x218
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8002b56:	f8d6 021c 	ldr.w	r0, [r6, #540]	; 0x21c
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002b5a:	f8d4 7268 	ldr.w	r7, [r4, #616]	; 0x268
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8002b5e:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002b62:	429f      	cmp	r7, r3
 8002b64:	bf28      	it	cs
 8002b66:	461f      	movcs	r7, r3
                              len / hmsc->scsi_blk_size) < 0)
 8002b68:	fbb7 f3f2 	udiv	r3, r7, r2
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8002b6c:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
                              hmsc->bot_data, 
 8002b70:	f104 080c 	add.w	r8, r4, #12
  if( ((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun ,
 8002b74:	fbb1 f2f2 	udiv	r2, r1, r2
 8002b78:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8002b7c:	4641      	mov	r1, r8
 8002b7e:	4628      	mov	r0, r5
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	47c8      	blx	r9
 8002b84:	2800      	cmp	r0, #0
 8002b86:	da02      	bge.n	8002b8e <SCSI_ProcessCmd+0x296>
    SCSI_SenseCode(pdev,
 8002b88:	2211      	movs	r2, #17
    SCSI_SenseCode(pdev,
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	e77a      	b.n	8002a84 <SCSI_ProcessCmd+0x18c>
  USBD_LL_Transmit (pdev, 
 8002b8e:	b2bb      	uxth	r3, r7
 8002b90:	4642      	mov	r2, r8
 8002b92:	2181      	movs	r1, #129	; 0x81
 8002b94:	4630      	mov	r0, r6
 8002b96:	f001 f92d 	bl	8003df4 <USBD_LL_Transmit>
  hmsc->scsi_blk_addr   += len; 
 8002b9a:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len    -= len;  
 8002b9e:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
  hmsc->scsi_blk_addr   += len; 
 8002ba2:	443b      	add	r3, r7
 8002ba4:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  hmsc->csw.dDataResidue -= len;
 8002ba8:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
  hmsc->scsi_blk_len    -= len;  
 8002bac:	1bed      	subs	r5, r5, r7
  hmsc->csw.dDataResidue -= len;
 8002bae:	1bdb      	subs	r3, r3, r7
  hmsc->scsi_blk_len    -= len;  
 8002bb0:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8002bb4:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  if (hmsc->scsi_blk_len == 0)
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	f47f af28 	bne.w	8002a0e <SCSI_ProcessCmd+0x116>
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	7223      	strb	r3, [r4, #8]
 8002bc2:	e725      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8002bc4:	7a23      	ldrb	r3, [r4, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d147      	bne.n	8002c5a <SCSI_ProcessCmd+0x362>
    if ((hmsc->cbw.bmFlags & 0x80) == 0x80)
 8002bca:	f994 3218 	ldrsb.w	r3, [r4, #536]	; 0x218
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f6ff aea4 	blt.w	800291c <SCSI_ProcessCmd+0x24>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) !=0 )
 8002bd4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8002bd8:	4608      	mov	r0, r1
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4798      	blx	r3
 8002bde:	2800      	cmp	r0, #0
 8002be0:	f47f af4e 	bne.w	8002a80 <SCSI_ProcessCmd+0x188>
    if(((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) !=0 )
 8002be4:	f8d6 321c 	ldr.w	r3, [r6, #540]	; 0x21c
 8002be8:	4628      	mov	r0, r5
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4798      	blx	r3
 8002bee:	4605      	mov	r5, r0
 8002bf0:	b108      	cbz	r0, 8002bf6 <SCSI_ProcessCmd+0x2fe>
      SCSI_SenseCode(pdev,
 8002bf2:	2227      	movs	r2, #39	; 0x27
 8002bf4:	e745      	b.n	8002a82 <SCSI_ProcessCmd+0x18a>
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002bf6:	f8d7 2002 	ldr.w	r2, [r7, #2]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*) pdev->pClassData; 
 8002bfa:	f8d6 0218 	ldr.w	r0, [r6, #536]	; 0x218
 8002bfe:	ba12      	rev	r2, r2
    hmsc->scsi_blk_addr = (params[2] << 24) | \
 8002c00:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002c04:	f8b7 3007 	ldrh.w	r3, [r7, #7]
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002c08:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002c0c:	ba5b      	rev16	r3, r3
 8002c0e:	b29b      	uxth	r3, r3
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002c10:	18d7      	adds	r7, r2, r3
 8002c12:	428f      	cmp	r7, r1
    hmsc->scsi_blk_len = (params[7] <<  8) | \
 8002c14:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002c18:	d904      	bls.n	8002c24 <SCSI_ProcessCmd+0x32c>
    SCSI_SenseCode(pdev,
 8002c1a:	2221      	movs	r2, #33	; 0x21
 8002c1c:	2105      	movs	r1, #5
    SCSI_SenseCode(pdev, 
 8002c1e:	f7ff fe58 	bl	80028d2 <SCSI_SenseCode.constprop.0.isra.0>
 8002c22:	e6c9      	b.n	80029b8 <SCSI_ProcessCmd+0xc0>
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002c24:	f8b4 125e 	ldrh.w	r1, [r4, #606]	; 0x25e
 8002c28:	434a      	muls	r2, r1
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002c2a:	434b      	muls	r3, r1
    hmsc->scsi_blk_addr *= hmsc->scsi_blk_size;
 8002c2c:	f8c4 2264 	str.w	r2, [r4, #612]	; 0x264
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002c30:	f8d4 2214 	ldr.w	r2, [r4, #532]	; 0x214
    hmsc->scsi_blk_len  *= hmsc->scsi_blk_size;
 8002c34:	f8c4 3268 	str.w	r3, [r4, #616]	; 0x268
    if (hmsc->cbw.dDataLength != hmsc->scsi_blk_len)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d185      	bne.n	8002b48 <SCSI_ProcessCmd+0x250>
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8002c40:	f04f 0101 	mov.w	r1, #1
                      MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET));  
 8002c44:	bf28      	it	cs
 8002c46:	f44f 7300 	movcs.w	r3, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8002c4a:	4630      	mov	r0, r6
    hmsc->bot_state = USBD_BOT_DATA_OUT;  
 8002c4c:	7221      	strb	r1, [r4, #8]
    USBD_LL_PrepareReceive (pdev,
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f104 020c 	add.w	r2, r4, #12
 8002c54:	f001 f8dc 	bl	8003e10 <USBD_LL_PrepareReceive>
  return 0;
 8002c58:	e6da      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002c5a:	f8d4 7268 	ldr.w	r7, [r4, #616]	; 0x268
                              hmsc->scsi_blk_addr / hmsc->scsi_blk_size, 
 8002c5e:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
  len = MIN(hmsc->scsi_blk_len , MSC_MEDIA_PACKET); 
 8002c62:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8002c66:	bf28      	it	cs
 8002c68:	f44f 7700 	movcs.w	r7, #512	; 0x200
                              len / hmsc->scsi_blk_size) < 0)
 8002c6c:	fbb7 f3f2 	udiv	r3, r7, r2
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8002c70:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
 8002c74:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
                              hmsc->bot_data, 
 8002c78:	f104 080c 	add.w	r8, r4, #12
  if(((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun ,
 8002c7c:	fbb1 f2f2 	udiv	r2, r1, r2
 8002c80:	f8d0 9014 	ldr.w	r9, [r0, #20]
 8002c84:	4641      	mov	r1, r8
 8002c86:	4628      	mov	r0, r5
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	47c8      	blx	r9
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	da07      	bge.n	8002ca0 <SCSI_ProcessCmd+0x3a8>
    SCSI_SenseCode(pdev,
 8002c90:	2203      	movs	r2, #3
 8002c92:	e77a      	b.n	8002b8a <SCSI_ProcessCmd+0x292>
 8002c94:	08004009 	.word	0x08004009
 8002c98:	08004019 	.word	0x08004019
 8002c9c:	08004011 	.word	0x08004011
                   WRITE_FAULT);     
    return -1; 
  }
  
  
  hmsc->scsi_blk_addr  += len; 
 8002ca0:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
  hmsc->scsi_blk_len   -= len; 
 8002ca4:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
  hmsc->scsi_blk_addr  += len; 
 8002ca8:	443b      	add	r3, r7
 8002caa:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
  
  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8002cae:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
  hmsc->scsi_blk_len   -= len; 
 8002cb2:	1bed      	subs	r5, r5, r7
  hmsc->csw.dDataResidue -= len;
 8002cb4:	1bdb      	subs	r3, r3, r7
  hmsc->scsi_blk_len   -= len; 
 8002cb6:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
  hmsc->csw.dDataResidue -= len;
 8002cba:	f8c4 3234 	str.w	r3, [r4, #564]	; 0x234
  
  if (hmsc->scsi_blk_len == 0)
 8002cbe:	b925      	cbnz	r5, 8002cca <SCSI_ProcessCmd+0x3d2>
  {
    MSC_BOT_SendCSW (pdev, USBD_CSW_CMD_PASSED);
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	f7ff fd4e 	bl	8002764 <MSC_BOT_SendCSW>
 8002cc8:	e6a2      	b.n	8002a10 <SCSI_ProcessCmd+0x118>
  {
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive (pdev,
                            MSC_EPOUT_ADDR,
                            hmsc->bot_data, 
                            MIN (hmsc->scsi_blk_len, MSC_MEDIA_PACKET)); 
 8002cca:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8002cce:	bf28      	it	cs
 8002cd0:	f44f 7500 	movcs.w	r5, #512	; 0x200
    USBD_LL_PrepareReceive (pdev,
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4630      	mov	r0, r6
 8002cda:	b2ab      	uxth	r3, r5
 8002cdc:	f001 f898 	bl	8003e10 <USBD_LL_PrepareReceive>
 8002ce0:	e695      	b.n	8002a0e <SCSI_ProcessCmd+0x116>
  if ((params[1]& 0x02) == 0x02) 
 8002ce2:	787d      	ldrb	r5, [r7, #1]
 8002ce4:	f015 0502 	ands.w	r5, r5, #2
 8002ce8:	d003      	beq.n	8002cf2 <SCSI_ProcessCmd+0x3fa>
    SCSI_SenseCode (pdev,
 8002cea:	2224      	movs	r2, #36	; 0x24
    SCSI_SenseCode(pdev, 
 8002cec:	2105      	movs	r1, #5
 8002cee:	4620      	mov	r0, r4
 8002cf0:	e795      	b.n	8002c1e <SCSI_ProcessCmd+0x326>
  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr )
 8002cf2:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
 8002cf6:	f8b4 3268 	ldrh.w	r3, [r4, #616]	; 0x268
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
 8002d00:	4293      	cmp	r3, r2
 8002d02:	f67f aea5 	bls.w	8002a50 <SCSI_ProcessCmd+0x158>
    SCSI_SenseCode(pdev,
 8002d06:	2221      	movs	r2, #33	; 0x21
 8002d08:	e7f0      	b.n	8002cec <SCSI_ProcessCmd+0x3f4>
 8002d0a:	bf00      	nop

08002d0c <SCSI_SenseCode>:
{
 8002d0c:	b510      	push	{r4, lr}
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef*)pdev->pClassData; 
 8002d0e:	f8d0 0218 	ldr.w	r0, [r0, #536]	; 0x218
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8002d12:	021b      	lsls	r3, r3, #8
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8002d14:	f890 125d 	ldrb.w	r1, [r0, #605]	; 0x25d
 8002d18:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8002d1c:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  hmsc->scsi_sense_tail++;
 8002d20:	1c4b      	adds	r3, r1, #1
 8002d22:	b2db      	uxtb	r3, r3
    hmsc->scsi_sense_tail = 0;
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	bf08      	it	eq
 8002d28:	2300      	moveq	r3, #0
  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8002d2a:	f884 223c 	strb.w	r2, [r4, #572]	; 0x23c
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8002d2e:	f880 325d 	strb.w	r3, [r0, #605]	; 0x25d
}
 8002d32:	bd10      	pop	{r4, pc}

08002d34 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002d34:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002d36:	b180      	cbz	r0, 8002d5a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002d38:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d3c:	b113      	cbz	r3, 8002d44 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002d44:	b109      	cbz	r1, 8002d4a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002d46:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d4a:	2301      	movs	r3, #1
  pdev->id = id;
 8002d4c:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002d4e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002d52:	f000 ffa3 	bl	8003c9c <USBD_LL_Init>
  
  return USBD_OK; 
 8002d56:	2000      	movs	r0, #0
}
 8002d58:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	e7fc      	b.n	8002d58 <USBD_Init+0x24>

08002d5e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002d5e:	b119      	cbz	r1, 8002d68 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002d60:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002d64:	2000      	movs	r0, #0
 8002d66:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002d68:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002d6a:	4770      	bx	lr

08002d6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002d6c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002d6e:	f000 ffcd 	bl	8003d0c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002d72:	2000      	movs	r0, #0
 8002d74:	bd08      	pop	{r3, pc}

08002d76 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d76:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002d78:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d7c:	b133      	cbz	r3, 8002d8c <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4798      	blx	r3
 8002d82:	3800      	subs	r0, #0
 8002d84:	bf18      	it	ne
 8002d86:	2001      	movne	r0, #1
 8002d88:	0040      	lsls	r0, r0, #1
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002d8a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	e7fc      	b.n	8002d8a <USBD_SetClassConfig+0x14>

08002d90 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002d90:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002d92:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4798      	blx	r3
  return USBD_OK;
}
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	bd08      	pop	{r3, pc}

08002d9e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002d9e:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002da0:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002da4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002da6:	4628      	mov	r0, r5
 8002da8:	f000 fa63 	bl	8003272 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002dac:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002dae:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002db2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002db6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002dba:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002dbe:	f001 031f 	and.w	r3, r1, #31
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d008      	beq.n	8002dd8 <USBD_LL_SetupStage+0x3a>
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d00b      	beq.n	8002de2 <USBD_LL_SetupStage+0x44>
 8002dca:	b97b      	cbnz	r3, 8002dec <USBD_LL_SetupStage+0x4e>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8002dcc:	4629      	mov	r1, r5
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f000 f8da 	bl	8002f88 <USBD_StdDevReq>
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
    break;
  }  
  return USBD_OK;  
}
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f000 f9ce 	bl	800317c <USBD_StdItfReq>
    break;
 8002de0:	e7f8      	b.n	8002dd4 <USBD_LL_SetupStage+0x36>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002de2:	4629      	mov	r1, r5
 8002de4:	4620      	mov	r0, r4
 8002de6:	f000 f9e1 	bl	80031ac <USBD_StdEPReq>
    break;
 8002dea:	e7f3      	b.n	8002dd4 <USBD_LL_SetupStage+0x36>
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002dec:	4620      	mov	r0, r4
 8002dee:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002df2:	f000 ffc5 	bl	8003d80 <USBD_LL_StallEP>
    break;
 8002df6:	e7ed      	b.n	8002dd4 <USBD_LL_SetupStage+0x36>

08002df8 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002dfe:	bb01      	cbnz	r1, 8002e42 <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002e00:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10d      	bne.n	8002e24 <USBD_LL_DataOutStage+0x2c>
    {
      if(pep->rem_length > pep->maxpacket)
 8002e08:	e9d0 5343 	ldrd	r5, r3, [r0, #268]	; 0x10c
 8002e0c:	429d      	cmp	r5, r3
 8002e0e:	d90b      	bls.n	8002e28 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8002e10:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002e12:	42ab      	cmp	r3, r5
 8002e14:	bf28      	it	cs
 8002e16:	462b      	movcs	r3, r5
        USBD_CtlContinueRx (pdev, 
 8002e18:	4631      	mov	r1, r6
        pep->rem_length -=  pep->maxpacket;
 8002e1a:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	f000 fa77 	bl	8003312 <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e24:	2000      	movs	r0, #0
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002e28:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b123      	cbz	r3, 8002e3a <USBD_LL_DataOutStage+0x42>
 8002e30:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e34:	2a03      	cmp	r2, #3
 8002e36:	d100      	bne.n	8002e3a <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev); 
 8002e38:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 fa71 	bl	8003322 <USBD_CtlSendStatus>
 8002e40:	e7f0      	b.n	8002e24 <USBD_LL_DataOutStage+0x2c>
  else if((pdev->pClass->DataOut != NULL)&&
 8002e42:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0eb      	beq.n	8002e24 <USBD_LL_DataOutStage+0x2c>
 8002e4c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002e50:	2a03      	cmp	r2, #3
 8002e52:	d1e7      	bne.n	8002e24 <USBD_LL_DataOutStage+0x2c>
    pdev->pClass->DataOut(pdev, epnum); 
 8002e54:	4798      	blx	r3
 8002e56:	e7e5      	b.n	8002e24 <USBD_LL_DataOutStage+0x2c>

08002e58 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	4613      	mov	r3, r2
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002e5e:	460f      	mov	r7, r1
 8002e60:	2900      	cmp	r1, #0
 8002e62:	d13d      	bne.n	8002ee0 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002e64:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002e68:	2a02      	cmp	r2, #2
 8002e6a:	d10f      	bne.n	8002e8c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002e6c:	e9d0 5607 	ldrd	r5, r6, [r0, #28]
 8002e70:	42b5      	cmp	r5, r6
 8002e72:	d914      	bls.n	8002e9e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002e74:	1bad      	subs	r5, r5, r6
        
        USBD_CtlContinueSendData (pdev, 
 8002e76:	4619      	mov	r1, r3
        pep->rem_length -=  pep->maxpacket;
 8002e78:	61c5      	str	r5, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8002e7a:	b2aa      	uxth	r2, r5
 8002e7c:	f000 fa41 	bl	8003302 <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e80:	463b      	mov	r3, r7
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002e82:	461a      	mov	r2, r3
 8002e84:	4619      	mov	r1, r3
 8002e86:	4620      	mov	r0, r4
 8002e88:	f000 ffc2 	bl	8003e10 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002e8c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d102      	bne.n	8002e9a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002e9e:	6983      	ldr	r3, [r0, #24]
 8002ea0:	fbb3 f5f6 	udiv	r5, r3, r6
 8002ea4:	fb06 3515 	mls	r5, r6, r5, r3
 8002ea8:	b965      	cbnz	r5, 8002ec4 <USBD_LL_DataInStage+0x6c>
 8002eaa:	429e      	cmp	r6, r3
 8002eac:	d80a      	bhi.n	8002ec4 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002eae:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d206      	bcs.n	8002ec4 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002eb6:	462a      	mov	r2, r5
 8002eb8:	f000 fa23 	bl	8003302 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8002ebc:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0;
 8002ebe:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002ec2:	e7de      	b.n	8002e82 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002ec4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	b12b      	cbz	r3, 8002ed8 <USBD_LL_DataInStage+0x80>
 8002ecc:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002ed0:	2a03      	cmp	r2, #3
 8002ed2:	d101      	bne.n	8002ed8 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f000 fa2d 	bl	8003338 <USBD_CtlReceiveStatus>
 8002ede:	e7d5      	b.n	8002e8c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002ee0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0d7      	beq.n	8002e9a <USBD_LL_DataInStage+0x42>
 8002eea:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002eee:	2a03      	cmp	r2, #3
 8002ef0:	d1d3      	bne.n	8002e9a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002ef2:	4798      	blx	r3
 8002ef4:	e7d1      	b.n	8002e9a <USBD_LL_DataInStage+0x42>

08002ef6 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002ef6:	2200      	movs	r2, #0
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002efc:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002efe:	4611      	mov	r1, r2
 8002f00:	2340      	movs	r3, #64	; 0x40
 8002f02:	f000 ff11 	bl	8003d28 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002f06:	462b      	mov	r3, r5
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2180      	movs	r1, #128	; 0x80
 8002f0c:	4620      	mov	r0, r4
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f0e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002f12:	f000 ff09 	bl	8003d28 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002f1c:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002f20:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002f22:	b12b      	cbz	r3, 8002f30 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002f24:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f28:	4620      	mov	r0, r4
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	7921      	ldrb	r1, [r4, #4]
 8002f2e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002f30:	2000      	movs	r0, #0
 8002f32:	bd38      	pop	{r3, r4, r5, pc}

08002f34 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002f34:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002f36:	2000      	movs	r0, #0
 8002f38:	4770      	bx	lr

08002f3a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002f3a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002f3e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002f42:	2304      	movs	r3, #4
 8002f44:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002f48:	2000      	movs	r0, #0
 8002f4a:	4770      	bx	lr

08002f4c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002f4c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002f50:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002f54:	2000      	movs	r0, #0
 8002f56:	4770      	bx	lr

08002f58 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8002f58:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8002f5a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002f5e:	2a03      	cmp	r2, #3
 8002f60:	d104      	bne.n	8002f6c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002f62:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	b103      	cbz	r3, 8002f6c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002f6a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	bd08      	pop	{r3, pc}

08002f70 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	f000 ff03 	bl	8003d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8002f7a:	4620      	mov	r0, r4
}
 8002f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8002f80:	2100      	movs	r1, #0
 8002f82:	f000 befd 	b.w	8003d80 <USBD_LL_StallEP>
	...

08002f88 <USBD_StdDevReq>:
{
 8002f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8002f8a:	784b      	ldrb	r3, [r1, #1]
{
 8002f8c:	4604      	mov	r4, r0
 8002f8e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d877      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
 8002f94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f98:	00e500c9 	.word	0x00e500c9
 8002f9c:	00d90076 	.word	0x00d90076
 8002fa0:	006d0076 	.word	0x006d0076
 8002fa4:	0076000a 	.word	0x0076000a
 8002fa8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8002fac:	884b      	ldrh	r3, [r1, #2]
 8002fae:	0a1a      	lsrs	r2, r3, #8
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	2a06      	cmp	r2, #6
 8002fb4:	d866      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
 8002fb6:	e8df f002 	tbb	[pc, r2]
 8002fba:	1c04      	.short	0x1c04
 8002fbc:	49656529 	.word	0x49656529
 8002fc0:	52          	.byte	0x52
 8002fc1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002fc2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002fc6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8002fc8:	7c20      	ldrb	r0, [r4, #16]
 8002fca:	f10d 0106 	add.w	r1, sp, #6
 8002fce:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8002fd0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d067      	beq.n	80030a8 <USBD_StdDevReq+0x120>
 8002fd8:	88eb      	ldrh	r3, [r5, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d064      	beq.n	80030a8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	bf28      	it	cs
 8002fe2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002fe4:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002fe6:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8002fea:	4620      	mov	r0, r4
 8002fec:	f000 f97c 	bl	80032e8 <USBD_CtlSendData>
    break;
 8002ff0:	e05a      	b.n	80030a8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002ff2:	7c02      	ldrb	r2, [r0, #16]
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002ff4:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002ff8:	b932      	cbnz	r2, 8003008 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002ffc:	f10d 0006 	add.w	r0, sp, #6
 8003000:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003002:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003004:	7043      	strb	r3, [r0, #1]
      break; 
 8003006:	e7e3      	b.n	8002fd0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	e7f7      	b.n	8002ffc <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b05      	cmp	r3, #5
 8003010:	d838      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
 8003012:	e8df f003 	tbb	[pc, r3]
 8003016:	0703      	.short	0x0703
 8003018:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800301c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	e7d1      	b.n	8002fc8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003024:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	e7cd      	b.n	8002fc8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800302c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	e7c9      	b.n	8002fc8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003034:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	e7c5      	b.n	8002fc8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800303c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	e7c1      	b.n	8002fc8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003044:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	e7bd      	b.n	8002fc8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800304c:	7c03      	ldrb	r3, [r0, #16]
 800304e:	b9cb      	cbnz	r3, 8003084 <USBD_StdDevReq+0xfc>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003050:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003054:	f10d 0006 	add.w	r0, sp, #6
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	4798      	blx	r3
      break;
 800305c:	e7b8      	b.n	8002fd0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800305e:	7c03      	ldrb	r3, [r0, #16]
 8003060:	b983      	cbnz	r3, 8003084 <USBD_StdDevReq+0xfc>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003062:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003066:	f10d 0006 	add.w	r0, sp, #6
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800306e:	2307      	movs	r3, #7
 8003070:	e7c8      	b.n	8003004 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003072:	888b      	ldrh	r3, [r1, #4]
 8003074:	b933      	cbnz	r3, 8003084 <USBD_StdDevReq+0xfc>
 8003076:	88cb      	ldrh	r3, [r1, #6]
 8003078:	b923      	cbnz	r3, 8003084 <USBD_StdDevReq+0xfc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800307a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800307e:	884d      	ldrh	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003080:	2b03      	cmp	r3, #3
 8003082:	d103      	bne.n	800308c <USBD_StdDevReq+0x104>
       USBD_CtlError(pdev , req);                     
 8003084:	4620      	mov	r0, r4
 8003086:	f7ff ff73 	bl	8002f70 <USBD_CtlError.constprop.0>
      break;
 800308a:	e00d      	b.n	80030a8 <USBD_StdDevReq+0x120>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800308c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003090:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8003092:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003096:	f000 fe9f 	bl	8003dd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800309a:	4620      	mov	r0, r4
 800309c:	f000 f941 	bl	8003322 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80030a0:	b12d      	cbz	r5, 80030ae <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80030a2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80030a4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80030a8:	2000      	movs	r0, #0
 80030aa:	b003      	add	sp, #12
 80030ac:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80030ae:	2301      	movs	r3, #1
 80030b0:	e7f8      	b.n	80030a4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80030b2:	7889      	ldrb	r1, [r1, #2]
 80030b4:	4d30      	ldr	r5, [pc, #192]	; (8003178 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80030b6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80030b8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80030ba:	d8e3      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
    switch (pdev->dev_state) 
 80030bc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d00c      	beq.n	80030de <USBD_StdDevReq+0x156>
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d1dd      	bne.n	8003084 <USBD_StdDevReq+0xfc>
      if (cfgidx == 0) 
 80030c8:	b9b1      	cbnz	r1, 80030f8 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030ca:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80030cc:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80030ce:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80030d2:	f7ff fe5d 	bl	8002d90 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f000 f923 	bl	8003322 <USBD_CtlSendStatus>
 80030dc:	e7e4      	b.n	80030a8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80030de:	2900      	cmp	r1, #0
 80030e0:	d0f9      	beq.n	80030d6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 80030e2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80030e4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80030e6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80030e8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80030ec:	4620      	mov	r0, r4
 80030ee:	f7ff fe42 	bl	8002d76 <USBD_SetClassConfig>
 80030f2:	2802      	cmp	r0, #2
 80030f4:	d1ef      	bne.n	80030d6 <USBD_StdDevReq+0x14e>
 80030f6:	e7c5      	b.n	8003084 <USBD_StdDevReq+0xfc>
      else  if (cfgidx != pdev->dev_config) 
 80030f8:	6841      	ldr	r1, [r0, #4]
 80030fa:	2901      	cmp	r1, #1
 80030fc:	d0eb      	beq.n	80030d6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80030fe:	b2c9      	uxtb	r1, r1
 8003100:	f7ff fe46 	bl	8002d90 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8003104:	7829      	ldrb	r1, [r5, #0]
 8003106:	6061      	str	r1, [r4, #4]
 8003108:	e7f0      	b.n	80030ec <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800310a:	88ca      	ldrh	r2, [r1, #6]
 800310c:	2a01      	cmp	r2, #1
 800310e:	d1b9      	bne.n	8003084 <USBD_StdDevReq+0xfc>
    switch (pdev->dev_state )  
 8003110:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003114:	2b02      	cmp	r3, #2
 8003116:	d003      	beq.n	8003120 <USBD_StdDevReq+0x198>
 8003118:	2b03      	cmp	r3, #3
 800311a:	d1b3      	bne.n	8003084 <USBD_StdDevReq+0xfc>
      USBD_CtlSendData (pdev, 
 800311c:	1d01      	adds	r1, r0, #4
 800311e:	e764      	b.n	8002fea <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8003120:	4601      	mov	r1, r0
 8003122:	2300      	movs	r3, #0
 8003124:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8003128:	e75f      	b.n	8002fea <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800312a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800312e:	3b02      	subs	r3, #2
 8003130:	2b01      	cmp	r3, #1
 8003132:	d8a7      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
    if (pdev->dev_remote_wakeup) 
 8003134:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8003138:	4601      	mov	r1, r0
 800313a:	3b00      	subs	r3, #0
 800313c:	bf18      	it	ne
 800313e:	2301      	movne	r3, #1
 8003140:	005b      	lsls	r3, r3, #1
    USBD_CtlSendData (pdev, 
 8003142:	2202      	movs	r2, #2
 8003144:	f841 3f0c 	str.w	r3, [r1, #12]!
 8003148:	e74f      	b.n	8002fea <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800314a:	884b      	ldrh	r3, [r1, #2]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d1ab      	bne.n	80030a8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003150:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003154:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003158:	4629      	mov	r1, r5
 800315a:	4620      	mov	r0, r4
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	4798      	blx	r3
 8003160:	e7b9      	b.n	80030d6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8003162:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003166:	3b02      	subs	r3, #2
 8003168:	2b01      	cmp	r3, #1
 800316a:	d88b      	bhi.n	8003084 <USBD_StdDevReq+0xfc>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800316c:	884b      	ldrh	r3, [r1, #2]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d19a      	bne.n	80030a8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8003172:	2300      	movs	r3, #0
 8003174:	e7ec      	b.n	8003150 <USBD_StdDevReq+0x1c8>
 8003176:	bf00      	nop
 8003178:	20000121 	.word	0x20000121

0800317c <USBD_StdItfReq>:
{
 800317c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800317e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 8003182:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 8003184:	2b03      	cmp	r3, #3
{
 8003186:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003188:	d10d      	bne.n	80031a6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800318a:	790b      	ldrb	r3, [r1, #4]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d80a      	bhi.n	80031a6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003190:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003198:	88eb      	ldrh	r3, [r5, #6]
 800319a:	b913      	cbnz	r3, 80031a2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800319c:	4620      	mov	r0, r4
 800319e:	f000 f8c0 	bl	8003322 <USBD_CtlSendStatus>
}
 80031a2:	2000      	movs	r0, #0
 80031a4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80031a6:	f7ff fee3 	bl	8002f70 <USBD_CtlError.constprop.0>
    break;
 80031aa:	e7fa      	b.n	80031a2 <USBD_StdItfReq+0x26>

080031ac <USBD_StdEPReq>:
{
 80031ac:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80031ae:	780a      	ldrb	r2, [r1, #0]
{
 80031b0:	4604      	mov	r4, r0
  if ((req->bmRequest & 0x60) == 0x20)
 80031b2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80031b6:	2a20      	cmp	r2, #32
{
 80031b8:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80031ba:	888e      	ldrh	r6, [r1, #4]
 80031bc:	790b      	ldrb	r3, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80031be:	d105      	bne.n	80031cc <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80031c0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	4798      	blx	r3
}
 80031c8:	2000      	movs	r0, #0
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80031cc:	784a      	ldrb	r2, [r1, #1]
 80031ce:	2a01      	cmp	r2, #1
 80031d0:	d03a      	beq.n	8003248 <USBD_StdEPReq+0x9c>
 80031d2:	2a03      	cmp	r2, #3
 80031d4:	d01d      	beq.n	8003212 <USBD_StdEPReq+0x66>
 80031d6:	2a00      	cmp	r2, #0
 80031d8:	d1f6      	bne.n	80031c8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80031da:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80031de:	2a02      	cmp	r2, #2
 80031e0:	d041      	beq.n	8003266 <USBD_StdEPReq+0xba>
 80031e2:	2a03      	cmp	r2, #3
 80031e4:	d11b      	bne.n	800321e <USBD_StdEPReq+0x72>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80031e6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 80031ea:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80031ee:	0632      	lsls	r2, r6, #24
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80031f0:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80031f2:	bf4c      	ite	mi
 80031f4:	3514      	addmi	r5, #20
 80031f6:	f505 7582 	addpl.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80031fa:	f000 fddd 	bl	8003db8 <USBD_LL_IsStallEP>
 80031fe:	3800      	subs	r0, #0
 8003200:	bf18      	it	ne
 8003202:	2001      	movne	r0, #1
      USBD_CtlSendData (pdev,
 8003204:	2202      	movs	r2, #2
 8003206:	6028      	str	r0, [r5, #0]
 8003208:	4629      	mov	r1, r5
 800320a:	4620      	mov	r0, r4
 800320c:	f000 f86c 	bl	80032e8 <USBD_CtlSendData>
      break;
 8003210:	e7da      	b.n	80031c8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003212:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003216:	2a02      	cmp	r2, #2
 8003218:	d025      	beq.n	8003266 <USBD_StdEPReq+0xba>
 800321a:	2a03      	cmp	r2, #3
 800321c:	d003      	beq.n	8003226 <USBD_StdEPReq+0x7a>
      USBD_CtlError(pdev , req);
 800321e:	4620      	mov	r0, r4
 8003220:	f7ff fea6 	bl	8002f70 <USBD_CtlError.constprop.0>
      break;    
 8003224:	e7d0      	b.n	80031c8 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003226:	884a      	ldrh	r2, [r1, #2]
 8003228:	b922      	cbnz	r2, 8003234 <USBD_StdEPReq+0x88>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800322a:	065a      	lsls	r2, r3, #25
 800322c:	d002      	beq.n	8003234 <USBD_StdEPReq+0x88>
          USBD_LL_StallEP(pdev , ep_addr);
 800322e:	4619      	mov	r1, r3
 8003230:	f000 fda6 	bl	8003d80 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8003234:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003238:	4629      	mov	r1, r5
 800323a:	4620      	mov	r0, r4
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003240:	4620      	mov	r0, r4
 8003242:	f000 f86e 	bl	8003322 <USBD_CtlSendStatus>
 8003246:	e7bf      	b.n	80031c8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003248:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800324c:	2a02      	cmp	r2, #2
 800324e:	d00a      	beq.n	8003266 <USBD_StdEPReq+0xba>
 8003250:	2a03      	cmp	r2, #3
 8003252:	d1e4      	bne.n	800321e <USBD_StdEPReq+0x72>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003254:	884a      	ldrh	r2, [r1, #2]
 8003256:	2a00      	cmp	r2, #0
 8003258:	d1b6      	bne.n	80031c8 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800325a:	065e      	lsls	r6, r3, #25
 800325c:	d0f0      	beq.n	8003240 <USBD_StdEPReq+0x94>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 800325e:	4619      	mov	r1, r3
 8003260:	f000 fd9c 	bl	8003d9c <USBD_LL_ClearStallEP>
 8003264:	e7e6      	b.n	8003234 <USBD_StdEPReq+0x88>
      if ((ep_addr & 0x7F) != 0x00) 
 8003266:	0659      	lsls	r1, r3, #25
 8003268:	d0ae      	beq.n	80031c8 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800326a:	4619      	mov	r1, r3
 800326c:	f000 fd88 	bl	8003d80 <USBD_LL_StallEP>
 8003270:	e7aa      	b.n	80031c8 <USBD_StdEPReq+0x1c>

08003272 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003272:	780b      	ldrb	r3, [r1, #0]
 8003274:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003276:	784b      	ldrb	r3, [r1, #1]
 8003278:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800327a:	78ca      	ldrb	r2, [r1, #3]
 800327c:	788b      	ldrb	r3, [r1, #2]
 800327e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003282:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003284:	794a      	ldrb	r2, [r1, #5]
 8003286:	790b      	ldrb	r3, [r1, #4]
 8003288:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800328c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800328e:	79ca      	ldrb	r2, [r1, #7]
 8003290:	798b      	ldrb	r3, [r1, #6]
 8003292:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003296:	80c3      	strh	r3, [r0, #6]
}
 8003298:	4770      	bx	lr

0800329a <USBD_CtlError>:
{
 800329a:	b510      	push	{r4, lr}
 800329c:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	f000 fd6e 	bl	8003d80 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80032a4:	4620      	mov	r0, r4
}
 80032a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f000 bd68 	b.w	8003d80 <USBD_LL_StallEP>

080032b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80032b0:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80032b2:	b188      	cbz	r0, 80032d8 <USBD_GetString+0x28>
 80032b4:	2400      	movs	r4, #0
 80032b6:	3801      	subs	r0, #1
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80032b8:	4623      	mov	r3, r4
 80032ba:	3401      	adds	r4, #1
 80032bc:	5d05      	ldrb	r5, [r0, r4]
 80032be:	2d00      	cmp	r5, #0
 80032c0:	d1fa      	bne.n	80032b8 <USBD_GetString+0x8>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80032ca:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80032cc:	2303      	movs	r3, #3
 80032ce:	704b      	strb	r3, [r1, #1]
 80032d0:	2302      	movs	r3, #2
    while (*desc != '\0') 
 80032d2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80032d6:	b904      	cbnz	r4, 80032da <USBD_GetString+0x2a>
}
 80032d8:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	54cc      	strb	r4, [r1, r3]
 80032de:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80032e0:	3302      	adds	r3, #2
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	548d      	strb	r5, [r1, r2]
 80032e6:	e7f4      	b.n	80032d2 <USBD_GetString+0x22>

080032e8 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80032e8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80032ea:	2202      	movs	r2, #2
{
 80032ec:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 80032ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80032f2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80032f6:	460a      	mov	r2, r1
 80032f8:	2100      	movs	r1, #0
 80032fa:	f000 fd7b 	bl	8003df4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80032fe:	2000      	movs	r0, #0
 8003300:	bd10      	pop	{r4, pc}

08003302 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8003302:	b508      	push	{r3, lr}
 8003304:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8003306:	460a      	mov	r2, r1
 8003308:	2100      	movs	r1, #0
 800330a:	f000 fd73 	bl	8003df4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800330e:	2000      	movs	r0, #0
 8003310:	bd08      	pop	{r3, pc}

08003312 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8003312:	b508      	push	{r3, lr}
 8003314:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 8003316:	460a      	mov	r2, r1
 8003318:	2100      	movs	r1, #0
 800331a:	f000 fd79 	bl	8003e10 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 800331e:	2000      	movs	r0, #0
 8003320:	bd08      	pop	{r3, pc}

08003322 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8003322:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8003324:	2304      	movs	r3, #4
 8003326:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 800332a:	2300      	movs	r3, #0
 800332c:	461a      	mov	r2, r3
 800332e:	4619      	mov	r1, r3
 8003330:	f000 fd60 	bl	8003df4 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003334:	2000      	movs	r0, #0
 8003336:	bd08      	pop	{r3, pc}

08003338 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8003338:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800333a:	2305      	movs	r3, #5
 800333c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8003340:	2300      	movs	r3, #0
 8003342:	461a      	mov	r2, r3
 8003344:	4619      	mov	r1, r3
 8003346:	f000 fd63 	bl	8003e10 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 800334a:	2000      	movs	r0, #0
 800334c:	bd08      	pop	{r3, pc}

0800334e <_ZN6SDCardC1EPV19__SPI_HandleTypeDeftP12GPIO_TypeDef>:
#include <SDCard.hpp>

SDCard::SDCard(volatile SPI_HandleTypeDef* hspi, uint16_t cs1Pin,
		GPIO_TypeDef* cs1Port) {
	_spi = hspi;
	_cs1Pin = cs1Pin;
 800334e:	8102      	strh	r2, [r0, #8]
	_cs1Port = cs1Port;
 8003350:	6043      	str	r3, [r0, #4]
	_sdSize = 0;
 8003352:	2200      	movs	r2, #0
 8003354:	2300      	movs	r3, #0
SDCard::SDCard(volatile SPI_HandleTypeDef* hspi, uint16_t cs1Pin,
 8003356:	b510      	push	{r4, lr}
	_sdSize = 0;
 8003358:	e9c0 2304 	strd	r2, r3, [r0, #16]
	_spi = hspi;
 800335c:	6001      	str	r1, [r0, #0]
}
 800335e:	bd10      	pop	{r4, pc}

08003360 <_ZN6SDCard10selectCardEv>:
	}
	return res;
}

void SDCard::selectCard() {
	HAL_GPIO_WritePin(_cs1Port, _cs1Pin, GPIO_PIN_RESET);
 8003360:	8901      	ldrh	r1, [r0, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	6840      	ldr	r0, [r0, #4]
 8003366:	f7fd b867 	b.w	8000438 <HAL_GPIO_WritePin>

0800336a <_ZN6SDCard12deselectCardEv>:
	__HAL_UNLOCK(_spi);
	return errorcode;
}

void SDCard::deselectCard() {
	HAL_GPIO_WritePin(_cs1Port, _cs1Pin, GPIO_PIN_SET);
 800336a:	8901      	ldrh	r1, [r0, #8]
 800336c:	2201      	movs	r2, #1
 800336e:	6840      	ldr	r0, [r0, #4]
 8003370:	f7fd b862 	b.w	8000438 <HAL_GPIO_WritePin>

08003374 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm>:
 * @param Tickstart: tick start value
 * @retval HAL status
 */
HAL_StatusTypeDef SDCard::lSPI_WaitFlagStateUntilTimeout(
		SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
		uint32_t Timeout, uint32_t Tickstart) {
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	460c      	mov	r4, r1
 8003378:	4617      	mov	r7, r2
 800337a:	461d      	mov	r5, r3
 800337c:	9e06      	ldr	r6, [sp, #24]
	while ((hspi->Instance->SR & Flag) != State) {
 800337e:	6822      	ldr	r2, [r4, #0]
 8003380:	6893      	ldr	r3, [r2, #8]
 8003382:	403b      	ands	r3, r7
 8003384:	42ab      	cmp	r3, r5
 8003386:	d101      	bne.n	800338c <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x18>
				return HAL_TIMEOUT;
			}
		}
	}

	return HAL_OK;
 8003388:	2000      	movs	r0, #0
 800338a:	e029      	b.n	80033e0 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x6c>
		if (Timeout != HAL_MAX_DELAY) {
 800338c:	1c73      	adds	r3, r6, #1
 800338e:	d0f7      	beq.n	8003380 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xc>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout)) {
 8003390:	bb3e      	cbnz	r6, 80033e2 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x6e>
				__HAL_SPI_DISABLE_IT(hspi,
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800339a:	605a      	str	r2, [r3, #4]
				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800339c:	6862      	ldr	r2, [r4, #4]
 800339e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033a2:	d10a      	bne.n	80033ba <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x46>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033a4:	68a2      	ldr	r2, [r4, #8]
 80033a6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033aa:	d002      	beq.n	80033b2 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x3e>
								|| (hspi->Init.Direction
 80033ac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80033b0:	d103      	bne.n	80033ba <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x46>
					__HAL_SPI_DISABLE(hspi);
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b8:	601a      	str	r2, [r3, #0]
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 80033ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80033bc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80033c0:	d107      	bne.n	80033d2 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x5e>
					SPI_RESET_CRC(hspi);
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033d0:	601a      	str	r2, [r3, #0]
				hspi->State = HAL_SPI_STATE_READY;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
				__HAL_UNLOCK(hspi);
 80033d8:	2300      	movs	r3, #0
 80033da:	2003      	movs	r0, #3
 80033dc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80033e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout)) {
 80033e2:	f7fc fecd 	bl	8000180 <HAL_GetTick>
 80033e6:	9b07      	ldr	r3, [sp, #28]
 80033e8:	1ac0      	subs	r0, r0, r3
 80033ea:	42b0      	cmp	r0, r6
 80033ec:	d3c7      	bcc.n	800337e <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0xa>
 80033ee:	e7d0      	b.n	8003392 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm+0x1e>

080033f0 <_ZN6SDCard11SPI_RecieveEPht>:
	__HAL_LOCK(_spi);
 80033f0:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef SDCard::SPI_Recieve(uint8_t* pData, uint16_t Size) {
 80033f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033f4:	4604      	mov	r4, r0
	__HAL_LOCK(_spi);
 80033f6:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 80033fa:	2801      	cmp	r0, #1
 80033fc:	d05c      	beq.n	80034b8 <_ZN6SDCard11SPI_RecieveEPht+0xc8>
 80033fe:	2001      	movs	r0, #1
 8003400:	f883 0050 	strb.w	r0, [r3, #80]	; 0x50
	if (_spi->State == HAL_SPI_STATE_READY) {
 8003404:	f893 0051 	ldrb.w	r0, [r3, #81]	; 0x51
 8003408:	2801      	cmp	r0, #1
		_spi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340a:	bf04      	itt	eq
 800340c:	2032      	moveq	r0, #50	; 0x32
 800340e:	f883 0051 	strbeq.w	r0, [r3, #81]	; 0x51
	_spi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003412:	2000      	movs	r0, #0
 8003414:	6558      	str	r0, [r3, #84]	; 0x54
	_spi->pRxBuffPtr = (uint8_t *) pData;
 8003416:	6399      	str	r1, [r3, #56]	; 0x38
	_spi->RxXferCount = Size;
 8003418:	87da      	strh	r2, [r3, #62]	; 0x3e
	_spi->RxXferSize = Size;
 800341a:	879a      	strh	r2, [r3, #60]	; 0x3c
	_spi->pTxBuffPtr = NULL;
 800341c:	6318      	str	r0, [r3, #48]	; 0x30
	_spi->TxXferCount = Size;
 800341e:	86da      	strh	r2, [r3, #54]	; 0x36
	_spi->TxXferSize = Size;
 8003420:	869a      	strh	r2, [r3, #52]	; 0x34
	_spi->RxISR = NULL;
 8003422:	6498      	str	r0, [r3, #72]	; 0x48
	_spi->TxISR = NULL;
 8003424:	64d8      	str	r0, [r3, #76]	; 0x4c
			*(__IO uint8_t *) &_spi->Instance->DR = 0xFF;
 8003426:	20ff      	movs	r0, #255	; 0xff
	if ((_spi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	6812      	ldr	r2, [r2, #0]
 800342c:	0652      	lsls	r2, r2, #25
		__HAL_SPI_ENABLE(_spi);
 800342e:	bf5f      	itttt	pl
 8003430:	681a      	ldrpl	r2, [r3, #0]
 8003432:	6813      	ldrpl	r3, [r2, #0]
 8003434:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003438:	6013      	strpl	r3, [r2, #0]
	while ((_spi->RxXferCount > 0U)) {
 800343a:	6825      	ldr	r5, [r4, #0]
 800343c:	8fee      	ldrh	r6, [r5, #62]	; 0x3e
 800343e:	b2b6      	uxth	r6, r6
 8003440:	b9ce      	cbnz	r6, 8003476 <_ZN6SDCard11SPI_RecieveEPht+0x86>
	if (lSPI_WaitFlagStateUntilTimeout((SPI_HandleTypeDef*) _spi, SPI_FLAG_BSY,
 8003442:	f7fc fe9d 	bl	8000180 <HAL_GetTick>
 8003446:	2364      	movs	r3, #100	; 0x64
 8003448:	9001      	str	r0, [sp, #4]
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	4633      	mov	r3, r6
 8003450:	4629      	mov	r1, r5
 8003452:	4620      	mov	r0, r4
 8003454:	f7ff ff8e 	bl	8003374 <_ZN6SDCard30lSPI_WaitFlagStateUntilTimeoutEP19__SPI_HandleTypeDefmmmm>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	b120      	cbz	r0, 8003466 <_ZN6SDCard11SPI_RecieveEPht+0x76>
		errorcode = HAL_TIMEOUT;
 800345c:	2003      	movs	r0, #3
		_spi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 800345e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003460:	f042 0210 	orr.w	r2, r2, #16
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
	_spi->State = HAL_SPI_STATE_READY;
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(_spi);
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
}
 8003472:	b002      	add	sp, #8
 8003474:	bd70      	pop	{r4, r5, r6, pc}
		if ((_spi->TxXferCount > 0U)) {
 8003476:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
 8003478:	b29b      	uxth	r3, r3
 800347a:	b153      	cbz	r3, 8003492 <_ZN6SDCard11SPI_RecieveEPht+0xa2>
			while (!__HAL_SPI_GET_FLAG(_spi, SPI_FLAG_TXE))
 800347c:	682b      	ldr	r3, [r5, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	079e      	lsls	r6, r3, #30
 8003482:	d5fb      	bpl.n	800347c <_ZN6SDCard11SPI_RecieveEPht+0x8c>
			*(__IO uint8_t *) &_spi->Instance->DR = 0xFF;
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	7318      	strb	r0, [r3, #12]
			_spi->TxXferCount--;
 8003488:	6822      	ldr	r2, [r4, #0]
 800348a:	8ed3      	ldrh	r3, [r2, #54]	; 0x36
 800348c:	3b01      	subs	r3, #1
 800348e:	b29b      	uxth	r3, r3
 8003490:	86d3      	strh	r3, [r2, #54]	; 0x36
		if ((_spi->RxXferCount > 0U)) {
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8003496:	b292      	uxth	r2, r2
 8003498:	2a00      	cmp	r2, #0
 800349a:	d0ce      	beq.n	800343a <_ZN6SDCard11SPI_RecieveEPht+0x4a>
			while (!(__HAL_SPI_GET_FLAG(_spi, SPI_FLAG_RXNE)))
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	6892      	ldr	r2, [r2, #8]
 80034a0:	07d2      	lsls	r2, r2, #31
 80034a2:	d5fb      	bpl.n	800349c <_ZN6SDCard11SPI_RecieveEPht+0xac>
			(*(uint8_t *) pData++) = _spi->Instance->DR;
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	f801 3b01 	strb.w	r3, [r1], #1
			_spi->RxXferCount--;
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	87d3      	strh	r3, [r2, #62]	; 0x3e
 80034b6:	e7c0      	b.n	800343a <_ZN6SDCard11SPI_RecieveEPht+0x4a>
	__HAL_LOCK(_spi);
 80034b8:	2002      	movs	r0, #2
 80034ba:	e7da      	b.n	8003472 <_ZN6SDCard11SPI_RecieveEPht+0x82>

080034bc <_ZN6SDCard14waitUntilReadyEv>:
	uint8_t ans[1] = { 0 };
 80034bc:	2300      	movs	r3, #0
void SDCard::waitUntilReady() {
 80034be:	b513      	push	{r0, r1, r4, lr}
 80034c0:	4604      	mov	r4, r0
	uint8_t ans[1] = { 0 };
 80034c2:	f88d 3004 	strb.w	r3, [sp, #4]
	while (ans[0] != 0xFF) {
 80034c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80034ca:	2bff      	cmp	r3, #255	; 0xff
 80034cc:	d101      	bne.n	80034d2 <_ZN6SDCard14waitUntilReadyEv+0x16>
}
 80034ce:	b002      	add	sp, #8
 80034d0:	bd10      	pop	{r4, pc}
		SPI_Recieve(ans, 1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	4620      	mov	r0, r4
 80034d6:	a901      	add	r1, sp, #4
 80034d8:	f7ff ff8a 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
 80034dc:	e7f3      	b.n	80034c6 <_ZN6SDCard14waitUntilReadyEv+0xa>

080034de <_ZN6SDCard11cardCommandEhm>:
uint8_t SDCard::cardCommand(uint8_t command, uint32_t arg) {
 80034de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034e0:	4605      	mov	r5, r0
	uint8_t res = 0xFF;
 80034e2:	27ff      	movs	r7, #255	; 0xff
uint8_t SDCard::cardCommand(uint8_t command, uint32_t arg) {
 80034e4:	460e      	mov	r6, r1
 80034e6:	4614      	mov	r4, r2
 80034e8:	b085      	sub	sp, #20
	uint8_t res = 0xFF;
 80034ea:	f88d 7007 	strb.w	r7, [sp, #7]
	waitUntilReady(); //wait for card to no longer be busy
 80034ee:	f7ff ffe5 	bl	80034bc <_ZN6SDCard14waitUntilReadyEv>
	selectCard();
 80034f2:	4628      	mov	r0, r5
 80034f4:	f7ff ff34 	bl	8003360 <_ZN6SDCard10selectCardEv>
	uint8_t commandSequence[] = { (uint8_t) (command | 0x40), (uint8_t) (arg
 80034f8:	f046 0340 	orr.w	r3, r6, #64	; 0x40
			& 0xFF), 0xFF };
 80034fc:	f88d 3008 	strb.w	r3, [sp, #8]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 8003500:	0e23      	lsrs	r3, r4, #24
			& 0xFF), 0xFF };
 8003502:	f88d 3009 	strb.w	r3, [sp, #9]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 8003506:	0c23      	lsrs	r3, r4, #16
			& 0xFF), 0xFF };
 8003508:	f88d 300a 	strb.w	r3, [sp, #10]
			>> 24), (uint8_t) (arg >> 16), (uint8_t) (arg >> 8), (uint8_t) (arg
 800350c:	0a23      	lsrs	r3, r4, #8
	uint8_t commandSequence[] = { (uint8_t) (command | 0x40), (uint8_t) (arg
 800350e:	f88d 700d 	strb.w	r7, [sp, #13]
			& 0xFF), 0xFF };
 8003512:	f88d 300b 	strb.w	r3, [sp, #11]
 8003516:	f88d 400c 	strb.w	r4, [sp, #12]
	if (command == CMD0)
 800351a:	b9ae      	cbnz	r6, 8003548 <_ZN6SDCard11cardCommandEhm+0x6a>
		commandSequence[5] = 0x95;
 800351c:	2395      	movs	r3, #149	; 0x95
		commandSequence[5] = 0x87;
 800351e:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, commandSequence, 6, 100);
 8003522:	2364      	movs	r3, #100	; 0x64
 8003524:	2206      	movs	r2, #6
 8003526:	6828      	ldr	r0, [r5, #0]
 8003528:	a902      	add	r1, sp, #8
 800352a:	f7fd fff8 	bl	800151e <HAL_SPI_Transmit>
	while ((res & 0x80) && count) {
 800352e:	2415      	movs	r4, #21
 8003530:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8003534:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da03      	bge.n	8003544 <_ZN6SDCard11cardCommandEhm+0x66>
 800353c:	3c01      	subs	r4, #1
 800353e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003542:	d105      	bne.n	8003550 <_ZN6SDCard11cardCommandEhm+0x72>
}
 8003544:	b005      	add	sp, #20
 8003546:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (command == CMD8)
 8003548:	2e08      	cmp	r6, #8
 800354a:	d1ea      	bne.n	8003522 <_ZN6SDCard11cardCommandEhm+0x44>
		commandSequence[5] = 0x87;
 800354c:	2387      	movs	r3, #135	; 0x87
 800354e:	e7e6      	b.n	800351e <_ZN6SDCard11cardCommandEhm+0x40>
		SPI_Recieve(&res, 1);
 8003550:	2201      	movs	r2, #1
 8003552:	4628      	mov	r0, r5
 8003554:	f10d 0107 	add.w	r1, sp, #7
 8003558:	f7ff ff4a 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
		count--;
 800355c:	e7e8      	b.n	8003530 <_ZN6SDCard11cardCommandEhm+0x52>

0800355e <_ZN6SDCard12readRegisterEhPv>:
uint8_t SDCard::readRegister(uint8_t cmd, void* buf) {
 800355e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003560:	4615      	mov	r5, r2
	if (cardCommand(cmd, 0)) {
 8003562:	2200      	movs	r2, #0
uint8_t SDCard::readRegister(uint8_t cmd, void* buf) {
 8003564:	4604      	mov	r4, r0
	if (cardCommand(cmd, 0)) {
 8003566:	f7ff ffba 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 800356a:	b128      	cbz	r0, 8003578 <_ZN6SDCard12readRegisterEhPv+0x1a>
		deselectCard();
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff fefc 	bl	800336a <_ZN6SDCard12deselectCardEv>
		return false;
 8003572:	2000      	movs	r0, #0
}
 8003574:	b003      	add	sp, #12
 8003576:	bd30      	pop	{r4, r5, pc}
	uint8_t temp = 0xFF;
 8003578:	23ff      	movs	r3, #255	; 0xff
 800357a:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_SPI_Receive((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 800357e:	2364      	movs	r3, #100	; 0x64
 8003580:	2201      	movs	r2, #1
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	f10d 0107 	add.w	r1, sp, #7
 8003588:	f7fe f9ca 	bl	8001920 <HAL_SPI_Receive>
	while (temp == 0xFF) {
 800358c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003590:	2bff      	cmp	r3, #255	; 0xff
 8003592:	d0f4      	beq.n	800357e <_ZN6SDCard12readRegisterEhPv+0x20>
	SPI_Recieve(dst, 16);
 8003594:	2210      	movs	r2, #16
 8003596:	4629      	mov	r1, r5
 8003598:	4620      	mov	r0, r4
 800359a:	f7ff ff29 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1); //CRC1
 800359e:	2201      	movs	r2, #1
 80035a0:	f10d 0107 	add.w	r1, sp, #7
 80035a4:	4620      	mov	r0, r4
 80035a6:	f7ff ff23 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1); //CRC2
 80035aa:	2201      	movs	r2, #1
 80035ac:	f10d 0107 	add.w	r1, sp, #7
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff ff1d 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 80035b6:	4620      	mov	r0, r4
 80035b8:	f7ff fed7 	bl	800336a <_ZN6SDCard12deselectCardEv>
	return true;
 80035bc:	2001      	movs	r0, #1
 80035be:	e7d9      	b.n	8003574 <_ZN6SDCard12readRegisterEhPv+0x16>

080035c0 <_ZN6SDCard7getSizeEv>:
uint32_t SDCard::getSize() {
 80035c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (_sdSize == 0) {
 80035c2:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 80035c6:	4313      	orrs	r3, r2
uint32_t SDCard::getSize() {
 80035c8:	4604      	mov	r4, r0
	if (_sdSize == 0) {
 80035ca:	d119      	bne.n	8003600 <_ZN6SDCard7getSizeEv+0x40>
	uint8_t readRegister(uint8_t cmd, void* buf);
	/**
	 * Read a cards CSD register. The CSD contains Card-Specific Data that
	 * provides information regarding access to the card's contents. */
	uint8_t readCSD(csd_t* csd) {
		return readRegister(CMD9, csd);
 80035cc:	466a      	mov	r2, sp
 80035ce:	2109      	movs	r1, #9
 80035d0:	f7ff ffc5 	bl	800355e <_ZN6SDCard12readRegisterEhPv>
		if (!readCSD(&csd))
 80035d4:	b1a8      	cbz	r0, 8003602 <_ZN6SDCard7getSizeEv+0x42>
		if (csd.v1.csd_ver == 0) {
 80035d6:	f89d 3000 	ldrb.w	r3, [sp]
		} else if (csd.v2.csd_ver == 1) {
 80035da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035de:	2b40      	cmp	r3, #64	; 0x40
 80035e0:	d10e      	bne.n	8003600 <_ZN6SDCard7getSizeEv+0x40>
			uint32_t c_size = ((uint32_t) csd.v2.c_size_high << 16)
 80035e2:	f89d 2007 	ldrb.w	r2, [sp, #7]
					| (csd.v2.c_size_mid << 8) | csd.v2.c_size_low;
 80035e6:	f89d 3009 	ldrb.w	r3, [sp, #9]
			uint32_t c_size = ((uint32_t) csd.v2.c_size_high << 16)
 80035ea:	0892      	lsrs	r2, r2, #2
 80035ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
					| (csd.v2.c_size_mid << 8) | csd.v2.c_size_low;
 80035f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
			uint32_t c_size = ((uint32_t) csd.v2.c_size_high << 16)
 80035f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			c_size *= 1024;
 80035f8:	029b      	lsls	r3, r3, #10
			_sdSize = c_size;
 80035fa:	6123      	str	r3, [r4, #16]
 80035fc:	2300      	movs	r3, #0
 80035fe:	6163      	str	r3, [r4, #20]
	return _sdSize;
 8003600:	6920      	ldr	r0, [r4, #16]
}
 8003602:	b004      	add	sp, #16
 8003604:	bd10      	pop	{r4, pc}

08003606 <_ZN6SDCard9readBlockEmPh>:
bool SDCard::readBlock(uint32_t blockaddr, uint8_t* buffer) {
 8003606:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003608:	4615      	mov	r5, r2
	if (cardCommand(CMD17, blockaddr)) {
 800360a:	460a      	mov	r2, r1
 800360c:	2111      	movs	r1, #17
bool SDCard::readBlock(uint32_t blockaddr, uint8_t* buffer) {
 800360e:	4604      	mov	r4, r0
	if (cardCommand(CMD17, blockaddr)) {
 8003610:	f7ff ff65 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 8003614:	b128      	cbz	r0, 8003622 <_ZN6SDCard9readBlockEmPh+0x1c>
		deselectCard();
 8003616:	4620      	mov	r0, r4
 8003618:	f7ff fea7 	bl	800336a <_ZN6SDCard12deselectCardEv>
		return false;
 800361c:	2000      	movs	r0, #0
}
 800361e:	b003      	add	sp, #12
 8003620:	bd30      	pop	{r4, r5, pc}
	uint8_t temp = 0xFF;
 8003622:	23ff      	movs	r3, #255	; 0xff
 8003624:	f88d 3007 	strb.w	r3, [sp, #7]
		HAL_SPI_Receive((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 8003628:	2364      	movs	r3, #100	; 0x64
 800362a:	2201      	movs	r2, #1
 800362c:	6820      	ldr	r0, [r4, #0]
 800362e:	f10d 0107 	add.w	r1, sp, #7
 8003632:	f7fe f975 	bl	8001920 <HAL_SPI_Receive>
	while (temp == 0xFF) {
 8003636:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800363a:	2bff      	cmp	r3, #255	; 0xff
 800363c:	d0f4      	beq.n	8003628 <_ZN6SDCard9readBlockEmPh+0x22>
	SPI_Recieve(buffer, 512);
 800363e:	4629      	mov	r1, r5
	temp = 0xFF;
 8003640:	25ff      	movs	r5, #255	; 0xff
	SPI_Recieve(buffer, 512);
 8003642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003646:	4620      	mov	r0, r4
 8003648:	f7ff fed2 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1);
 800364c:	2201      	movs	r2, #1
 800364e:	f10d 0107 	add.w	r1, sp, #7
 8003652:	4620      	mov	r0, r4
	temp = 0xFF;
 8003654:	f88d 5007 	strb.w	r5, [sp, #7]
	SPI_Recieve(&temp, 1);
 8003658:	f7ff feca 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	SPI_Recieve(&temp, 1);
 800365c:	2201      	movs	r2, #1
 800365e:	f10d 0107 	add.w	r1, sp, #7
 8003662:	4620      	mov	r0, r4
	temp = 0xFF;
 8003664:	f88d 5007 	strb.w	r5, [sp, #7]
	SPI_Recieve(&temp, 1);
 8003668:	f7ff fec2 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 800366c:	4620      	mov	r0, r4
 800366e:	f7ff fe7c 	bl	800336a <_ZN6SDCard12deselectCardEv>
	return true;
 8003672:	2001      	movs	r0, #1
 8003674:	e7d3      	b.n	800361e <_ZN6SDCard9readBlockEmPh+0x18>

08003676 <_ZN6SDCard10writeBlockEmPh>:
bool SDCard::writeBlock(uint32_t blockaddr, uint8_t* buffer) {
 8003676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003678:	4616      	mov	r6, r2
	if (cardCommand(CMD24, blockaddr)) {
 800367a:	460a      	mov	r2, r1
 800367c:	2118      	movs	r1, #24
bool SDCard::writeBlock(uint32_t blockaddr, uint8_t* buffer) {
 800367e:	4604      	mov	r4, r0
	if (cardCommand(CMD24, blockaddr)) {
 8003680:	f7ff ff2d 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 8003684:	4605      	mov	r5, r0
 8003686:	b128      	cbz	r0, 8003694 <_ZN6SDCard10writeBlockEmPh+0x1e>
		deselectCard();
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff fe6e 	bl	800336a <_ZN6SDCard12deselectCardEv>
		return false;
 800368e:	2000      	movs	r0, #0
}
 8003690:	b002      	add	sp, #8
 8003692:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t temp = DATA_START_BLOCK;
 8003694:	23fe      	movs	r3, #254	; 0xfe
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 8003696:	2201      	movs	r2, #1
	uint8_t temp = DATA_START_BLOCK;
 8003698:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 800369c:	f10d 0107 	add.w	r1, sp, #7
 80036a0:	2364      	movs	r3, #100	; 0x64
 80036a2:	6820      	ldr	r0, [r4, #0]
 80036a4:	f7fd ff3b 	bl	800151e <HAL_SPI_Transmit>
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 512, 100);
 80036a8:	2364      	movs	r3, #100	; 0x64
 80036aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036ae:	4631      	mov	r1, r6
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	f7fd ff34 	bl	800151e <HAL_SPI_Transmit>
	temp = 0xFF;
 80036b6:	23ff      	movs	r3, #255	; 0xff
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 80036b8:	2201      	movs	r2, #1
	temp = 0xFF;
 80036ba:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 80036be:	f10d 0107 	add.w	r1, sp, #7
 80036c2:	2364      	movs	r3, #100	; 0x64
 80036c4:	6820      	ldr	r0, [r4, #0]
 80036c6:	f7fd ff2a 	bl	800151e <HAL_SPI_Transmit>
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, &temp, 1, 100);
 80036ca:	2364      	movs	r3, #100	; 0x64
 80036cc:	2201      	movs	r2, #1
 80036ce:	f10d 0107 	add.w	r1, sp, #7
 80036d2:	6820      	ldr	r0, [r4, #0]
 80036d4:	f7fd ff23 	bl	800151e <HAL_SPI_Transmit>
	SPI_Recieve(&temp, 1);
 80036d8:	2201      	movs	r2, #1
 80036da:	4620      	mov	r0, r4
 80036dc:	f10d 0107 	add.w	r1, sp, #7
 80036e0:	f7ff fe86 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	if ((temp & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80036e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d1cb      	bne.n	8003688 <_ZN6SDCard10writeBlockEmPh+0x12>
	waitUntilReady();
 80036f0:	4620      	mov	r0, r4
 80036f2:	f7ff fee3 	bl	80034bc <_ZN6SDCard14waitUntilReadyEv>
	if (cardCommand(CMD13, 0)) {
 80036f6:	462a      	mov	r2, r5
 80036f8:	210d      	movs	r1, #13
 80036fa:	4620      	mov	r0, r4
 80036fc:	f7ff feef 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 8003700:	2800      	cmp	r0, #0
 8003702:	d1c1      	bne.n	8003688 <_ZN6SDCard10writeBlockEmPh+0x12>
	SPI_Recieve(&temp, 1);
 8003704:	2201      	movs	r2, #1
 8003706:	4620      	mov	r0, r4
 8003708:	f10d 0107 	add.w	r1, sp, #7
 800370c:	f7ff fe70 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	if (temp) {
 8003710:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1b7      	bne.n	8003688 <_ZN6SDCard10writeBlockEmPh+0x12>
	deselectCard();
 8003718:	4620      	mov	r0, r4
 800371a:	f7ff fe26 	bl	800336a <_ZN6SDCard12deselectCardEv>
	return true;
 800371e:	2001      	movs	r0, #1
 8003720:	e7b6      	b.n	8003690 <_ZN6SDCard10writeBlockEmPh+0x1a>

08003722 <_ZN6SDCard9initalizeEv>:
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //slow down at first
 8003722:	2338      	movs	r3, #56	; 0x38
bool SDCard::initalize() {
 8003724:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003726:	4604      	mov	r4, r0
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //slow down at first
 8003728:	6800      	ldr	r0, [r0, #0]
	while ((status = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
 800372a:	f240 152d 	movw	r5, #301	; 0x12d
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //slow down at first
 800372e:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init((SPI_HandleTypeDef*) _spi); //apply the speed change
 8003730:	f7fe f9e8 	bl	8001b04 <HAL_SPI_Init>
	deselectCard();
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff fe18 	bl	800336a <_ZN6SDCard12deselectCardEv>
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 800373a:	2204      	movs	r2, #4
	uint8_t buffer[4] = { 0xFF, 0xFF, 0xFF, 0xFF };
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 8003740:	eb0d 0102 	add.w	r1, sp, r2
	uint8_t buffer[4] = { 0xFF, 0xFF, 0xFF, 0xFF };
 8003744:	9301      	str	r3, [sp, #4]
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 8003746:	6820      	ldr	r0, [r4, #0]
 8003748:	2364      	movs	r3, #100	; 0x64
 800374a:	f7fd fee8 	bl	800151e <HAL_SPI_Transmit>
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 800374e:	2204      	movs	r2, #4
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	eb0d 0102 	add.w	r1, sp, r2
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	f7fd fee1 	bl	800151e <HAL_SPI_Transmit>
	HAL_SPI_Transmit((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 800375c:	2204      	movs	r2, #4
 800375e:	2364      	movs	r3, #100	; 0x64
 8003760:	eb0d 0102 	add.w	r1, sp, r2
 8003764:	6820      	ldr	r0, [r4, #0]
 8003766:	f7fd feda 	bl	800151e <HAL_SPI_Transmit>
	HAL_Delay(3);
 800376a:	2003      	movs	r0, #3
 800376c:	f7fc fd0e 	bl	800018c <HAL_Delay>
	selectCard();
 8003770:	4620      	mov	r0, r4
 8003772:	f7ff fdf5 	bl	8003360 <_ZN6SDCard10selectCardEv>
	while ((status = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
 8003776:	2200      	movs	r2, #0
 8003778:	4620      	mov	r0, r4
 800377a:	4611      	mov	r1, r2
 800377c:	f7ff feaf 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 8003780:	2801      	cmp	r0, #1
 8003782:	d10b      	bne.n	800379c <_ZN6SDCard9initalizeEv+0x7a>
	if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
 8003784:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003788:	2108      	movs	r1, #8
 800378a:	4620      	mov	r0, r4
 800378c:	f7ff fea7 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 8003790:	0743      	lsls	r3, r0, #29
 8003792:	d50a      	bpl.n	80037aa <_ZN6SDCard9initalizeEv+0x88>
		deselectCard();
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fde8 	bl	800336a <_ZN6SDCard12deselectCardEv>
 800379a:	e003      	b.n	80037a4 <_ZN6SDCard9initalizeEv+0x82>
		if (attempts > 300)
 800379c:	3d01      	subs	r5, #1
 800379e:	b2ad      	uxth	r5, r5
 80037a0:	2d00      	cmp	r5, #0
 80037a2:	d1e8      	bne.n	8003776 <_ZN6SDCard9initalizeEv+0x54>
		return false; //Unsupported
 80037a4:	2000      	movs	r0, #0
}
 80037a6:	b003      	add	sp, #12
 80037a8:	bd30      	pop	{r4, r5, pc}
		HAL_SPI_Receive((SPI_HandleTypeDef*) _spi, buffer, 4, 100);
 80037aa:	2204      	movs	r2, #4
 80037ac:	2364      	movs	r3, #100	; 0x64
 80037ae:	6820      	ldr	r0, [r4, #0]
 80037b0:	eb0d 0102 	add.w	r1, sp, r2
 80037b4:	f7fe f8b4 	bl	8001920 <HAL_SPI_Receive>
		if (buffer[3] != 0XAA) {
 80037b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80037bc:	2baa      	cmp	r3, #170	; 0xaa
 80037be:	d1f1      	bne.n	80037a4 <_ZN6SDCard9initalizeEv+0x82>
		cardCommand(CMD55, 0);
 80037c0:	2200      	movs	r2, #0
 80037c2:	2137      	movs	r1, #55	; 0x37
 80037c4:	4620      	mov	r0, r4
 80037c6:	f7ff fe8a 	bl	80034de <_ZN6SDCard11cardCommandEhm>
		return cardCommand(cmd, arg);
 80037ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ce:	2129      	movs	r1, #41	; 0x29
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff fe84 	bl	80034de <_ZN6SDCard11cardCommandEhm>
	while ((status = cardAcmd(ACMD41, 0X40000000)) != R1_READY_STATE) {
 80037d6:	4602      	mov	r2, r0
 80037d8:	2800      	cmp	r0, #0
 80037da:	d1f1      	bne.n	80037c0 <_ZN6SDCard9initalizeEv+0x9e>
	if (cardCommand(CMD58, 0)) {
 80037dc:	213a      	movs	r1, #58	; 0x3a
 80037de:	4620      	mov	r0, r4
 80037e0:	f7ff fe7d 	bl	80034de <_ZN6SDCard11cardCommandEhm>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	d1d5      	bne.n	8003794 <_ZN6SDCard9initalizeEv+0x72>
	SPI_Recieve(buffer, 4);
 80037e8:	2204      	movs	r2, #4
 80037ea:	4620      	mov	r0, r4
 80037ec:	eb0d 0102 	add.w	r1, sp, r2
 80037f0:	f7ff fdfe 	bl	80033f0 <_ZN6SDCard11SPI_RecieveEPht>
	deselectCard();
 80037f4:	4620      	mov	r0, r4
 80037f6:	f7ff fdb8 	bl	800336a <_ZN6SDCard12deselectCardEv>
	_spi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4; //speed back up
 80037fa:	2308      	movs	r3, #8
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init((SPI_HandleTypeDef*) _spi); //apply the speed change
 8003800:	f7fe f980 	bl	8001b04 <HAL_SPI_Init>
	return true;
 8003804:	2001      	movs	r0, #1
 8003806:	e7ce      	b.n	80037a6 <_ZN6SDCard9initalizeEv+0x84>

08003808 <main>:

SDCard sdCard(&hspi1, SD_CS_Pin, SD_CS_GPIO_Port);

void error();
uint8_t FreePercentage = 0;
int main(void) {
 8003808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800380a:	f7fc fc9f 	bl	800014c <HAL_Init>
	setup();
 800380e:	f000 f8d3 	bl	80039b8 <setup>

	uint8_t count = 0;
	while (!sdCard.initalize()) {
 8003812:	4c0e      	ldr	r4, [pc, #56]	; (800384c <main+0x44>)
 8003814:	4620      	mov	r0, r4
 8003816:	f7ff ff84 	bl	8003722 <_ZN6SDCard9initalizeEv>
 800381a:	2800      	cmp	r0, #0
 800381c:	d0fa      	beq.n	8003814 <main+0xc>

		count++;
	}
	//we want to setup PA12 as output, drive low, then setup back as usb
	//This causes a reset on the hub so that the computer will rescan the usb devices info
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800381e:	2200      	movs	r2, #0
 8003820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003824:	480a      	ldr	r0, [pc, #40]	; (8003850 <main+0x48>)
 8003826:	f7fc fe07 	bl	8000438 <HAL_GPIO_WritePin>
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382a:	2301      	movs	r3, #1
 800382c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003830:	4669      	mov	r1, sp
 8003832:	4807      	ldr	r0, [pc, #28]	; (8003850 <main+0x48>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003834:	e9cd 2300 	strd	r2, r3, [sp]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003838:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383a:	f7fc fd23 	bl	8000284 <HAL_GPIO_Init>
	MX_USB_DEVICE_Init();
 800383e:	f000 f9b7 	bl	8003bb0 <MX_USB_DEVICE_Init>

	for (;;) {
		HAL_Delay(1000);
 8003842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003846:	f7fc fca1 	bl	800018c <HAL_Delay>
	for (;;) {
 800384a:	e7fa      	b.n	8003842 <main+0x3a>
 800384c:	20000128 	.word	0x20000128
 8003850:	40010800 	.word	0x40010800

08003854 <SDCardReadSect>:

}

/***------- SD Card C-> C++ link functions ---------*/
extern "C" {
bool SDCardReadSect(uint8_t* bufferOut, uint32_t sector, uint16_t count) {
 8003854:	4602      	mov	r2, r0
	if (!sdCard.readBlock(sector, bufferOut))
 8003856:	4801      	ldr	r0, [pc, #4]	; (800385c <SDCardReadSect+0x8>)
 8003858:	f7ff bed5 	b.w	8003606 <_ZN6SDCard9readBlockEmPh>
 800385c:	20000128 	.word	0x20000128

08003860 <SDCardWriteSect>:
		return false;
	return true;
}
bool SDCardWriteSect(uint8_t* bufferOut, uint32_t sector, uint16_t count) {
 8003860:	4602      	mov	r2, r0
	if (!sdCard.writeBlock(sector, bufferOut))
 8003862:	4801      	ldr	r0, [pc, #4]	; (8003868 <SDCardWriteSect+0x8>)
 8003864:	f7ff bf07 	b.w	8003676 <_ZN6SDCard10writeBlockEmPh>
 8003868:	20000128 	.word	0x20000128

0800386c <SDCardSectorCount>:
		return false;
	return true;
}
uint32_t SDCardSectorCount() {

	return sdCard.getSize();
 800386c:	4801      	ldr	r0, [pc, #4]	; (8003874 <SDCardSectorCount+0x8>)
 800386e:	f7ff bea7 	b.w	80035c0 <_ZN6SDCard7getSizeEv>
 8003872:	bf00      	nop
 8003874:	20000128 	.word	0x20000128

08003878 <_GLOBAL__sub_I_sdCard>:
SDCard sdCard(&hspi1, SD_CS_Pin, SD_CS_GPIO_Port);
 8003878:	2210      	movs	r2, #16
 800387a:	4b02      	ldr	r3, [pc, #8]	; (8003884 <_GLOBAL__sub_I_sdCard+0xc>)
 800387c:	4902      	ldr	r1, [pc, #8]	; (8003888 <_GLOBAL__sub_I_sdCard+0x10>)
 800387e:	4803      	ldr	r0, [pc, #12]	; (800388c <_GLOBAL__sub_I_sdCard+0x14>)
 8003880:	f7ff bd65 	b.w	800334e <_ZN6SDCardC1EPV19__SPI_HandleTypeDeftP12GPIO_TypeDef>
 8003884:	40010800 	.word	0x40010800
 8003888:	20000140 	.word	0x20000140
 800388c:	20000128 	.word	0x20000128

08003890 <SystemClock_Config>:
	MX_SPI1_Init();
}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 8003890:	b570      	push	{r4, r5, r6, lr}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003896:	2502      	movs	r5, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003898:	2205      	movs	r2, #5
void SystemClock_Config(void) {
 800389a:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800389c:	2400      	movs	r4, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800389e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038a2:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80038a6:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038ac:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80038ae:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30

	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80038b2:	260f      	movs	r6, #15
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80038b4:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038b6:	f7fd f9d9 	bl	8000c6c <HAL_RCC_OscConfig>
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80038be:	4629      	mov	r1, r5
 80038c0:	a805      	add	r0, sp, #20
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038c2:	e9cd 3408 	strd	r3, r4, [sp, #32]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c6:	e9cd 6505 	strd	r6, r5, [sp, #20]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ca:	9407      	str	r4, [sp, #28]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80038cc:	f7fd fc62 	bl	8001194 <HAL_RCC_ClockConfig>

	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_USB;
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038d0:	2111      	movs	r1, #17
 80038d2:	f44f 7380 	mov.w	r3, #256	; 0x100
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80038d6:	a801      	add	r0, sp, #4
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038d8:	e9cd 1301 	strd	r1, r3, [sp, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80038dc:	9404      	str	r4, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80038de:	f7fd fd55 	bl	800138c <HAL_RCCEx_PeriphCLKConfig>

	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 80038e2:	f7fd fd09 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 80038e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80038ee:	f7fc fca9 	bl	8000244 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80038f2:	2004      	movs	r0, #4
 80038f4:	f7fc fcba 	bl	800026c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80038f8:	4622      	mov	r2, r4
 80038fa:	4631      	mov	r1, r6
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7fc fc64 	bl	80001cc <HAL_NVIC_SetPriority>
}
 8003904:	b014      	add	sp, #80	; 0x50
 8003906:	bd70      	pop	{r4, r5, r6, pc}

08003908 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void) {

	hspi1.Instance = SPI1;
 8003908:	480b      	ldr	r0, [pc, #44]	; (8003938 <MX_SPI1_Init+0x30>)
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <MX_SPI1_Init+0x34>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800390c:	f44f 7200 	mov.w	r2, #512	; 0x200
	hspi1.Instance = SPI1;
 8003910:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003912:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003916:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003918:	2300      	movs	r3, #0
 800391a:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800391c:	60c3      	str	r3, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800391e:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003920:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003922:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; //4 technical min
 8003924:	2210      	movs	r2, #16
 8003926:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003928:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800392a:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800392e:	230a      	movs	r3, #10
 8003930:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003932:	f7fe b8e7 	b.w	8001b04 <HAL_SPI_Init>
 8003936:	bf00      	nop
 8003938:	20000140 	.word	0x20000140
 800393c:	40013000 	.word	0x40013000

08003940 <MX_GPIO_Init>:
void MX_GPIO_Init(void) {

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <MX_GPIO_Init+0x70>)
void MX_GPIO_Init(void) {
 8003942:	b510      	push	{r4, lr}
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003944:	699a      	ldr	r2, [r3, #24]
void MX_GPIO_Init(void) {
 8003946:	b088      	sub	sp, #32
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003948:	f042 0210 	orr.w	r2, r2, #16
 800394c:	619a      	str	r2, [r3, #24]
 800394e:	699a      	ldr	r2, [r3, #24]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8003950:	4c18      	ldr	r4, [pc, #96]	; (80039b4 <MX_GPIO_Init+0x74>)
	__HAL_RCC_GPIOC_CLK_ENABLE()
 8003952:	f002 0210 	and.w	r2, r2, #16
 8003956:	9200      	str	r2, [sp, #0]
 8003958:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800395a:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA,
 800395c:	4620      	mov	r0, r4
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800395e:	f042 0220 	orr.w	r2, r2, #32
 8003962:	619a      	str	r2, [r3, #24]
 8003964:	699a      	ldr	r2, [r3, #24]
	HAL_GPIO_WritePin(GPIOA,
 8003966:	2110      	movs	r1, #16
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003968:	f002 0220 	and.w	r2, r2, #32
 800396c:	9201      	str	r2, [sp, #4]
 800396e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	f042 0204 	orr.w	r2, r2, #4
 8003976:	619a      	str	r2, [r3, #24]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	f002 0204 	and.w	r2, r2, #4
 800397e:	9202      	str	r2, [sp, #8]
 8003980:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	f042 0208 	orr.w	r2, r2, #8
 8003988:	619a      	str	r2, [r3, #24]
 800398a:	699b      	ldr	r3, [r3, #24]
	HAL_GPIO_WritePin(GPIOA,
 800398c:	2201      	movs	r2, #1
	__HAL_RCC_GPIOB_CLK_ENABLE()
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	9b03      	ldr	r3, [sp, #12]
	HAL_GPIO_WritePin(GPIOA,
 8003996:	f7fc fd4f 	bl	8000438 <HAL_GPIO_WritePin>
	SD_CS_Pin, GPIO_PIN_SET);

	GPIO_InitStruct.Pin = SD_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800399a:	2301      	movs	r3, #1
 800399c:	2210      	movs	r2, #16
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	4620      	mov	r0, r4
 80039a0:	a904      	add	r1, sp, #16
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039a6:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a8:	f7fc fc6c 	bl	8000284 <HAL_GPIO_Init>

}
 80039ac:	b008      	add	sp, #32
 80039ae:	bd10      	pop	{r4, pc}
 80039b0:	40021000 	.word	0x40021000
 80039b4:	40010800 	.word	0x40010800

080039b8 <setup>:
void setup(void) {
 80039b8:	b508      	push	{r3, lr}
	SystemClock_Config();
 80039ba:	f7ff ff69 	bl	8003890 <SystemClock_Config>
	MX_GPIO_Init();
 80039be:	f7ff ffbf 	bl	8003940 <MX_GPIO_Init>
}
 80039c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MX_SPI1_Init();
 80039c6:	f7ff bf9f 	b.w	8003908 <MX_SPI1_Init>
	...

080039cc <HAL_TIM_PeriodElapsedCallback>:
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 80039cc:	6802      	ldr	r2, [r0, #0]
 80039ce:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d101      	bne.n	80039d8 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_IncTick();
 80039d4:	f7fc bbcc 	b.w	8000170 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40012c00 	.word	0x40012c00

080039e0 <HAL_MspInit>:
void HAL_MspInit(void) {
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE()
 80039e0:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <HAL_MspInit+0x84>)
void HAL_MspInit(void) {
 80039e2:	b507      	push	{r0, r1, r2, lr}
	__HAL_RCC_AFIO_CLK_ENABLE()
 80039e4:	699a      	ldr	r2, [r3, #24]
	;

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e6:	2003      	movs	r0, #3
	__HAL_RCC_AFIO_CLK_ENABLE()
 80039e8:	f042 0201 	orr.w	r2, r2, #1
 80039ec:	619a      	str	r2, [r3, #24]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	9301      	str	r3, [sp, #4]
 80039f6:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f8:	f7fc fbd6 	bl	80001a8 <HAL_NVIC_SetPriorityGrouping>

	/* System interrupt init*/
	/* MemoryManagement_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80039fc:	2200      	movs	r2, #0
 80039fe:	f06f 000b 	mvn.w	r0, #11
 8003a02:	4611      	mov	r1, r2
 8003a04:	f7fc fbe2 	bl	80001cc <HAL_NVIC_SetPriority>
	/* BusFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f06f 000a 	mvn.w	r0, #10
 8003a0e:	4611      	mov	r1, r2
 8003a10:	f7fc fbdc 	bl	80001cc <HAL_NVIC_SetPriority>
	/* UsageFault_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a14:	2200      	movs	r2, #0
 8003a16:	f06f 0009 	mvn.w	r0, #9
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	f7fc fbd6 	bl	80001cc <HAL_NVIC_SetPriority>
	/* SVCall_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a20:	2200      	movs	r2, #0
 8003a22:	f06f 0004 	mvn.w	r0, #4
 8003a26:	4611      	mov	r1, r2
 8003a28:	f7fc fbd0 	bl	80001cc <HAL_NVIC_SetPriority>
	/* DebugMonitor_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f06f 0003 	mvn.w	r0, #3
 8003a32:	4611      	mov	r1, r2
 8003a34:	f7fc fbca 	bl	80001cc <HAL_NVIC_SetPriority>
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a38:	2200      	movs	r2, #0
 8003a3a:	210f      	movs	r1, #15
 8003a3c:	f06f 0001 	mvn.w	r0, #1
 8003a40:	f7fc fbc4 	bl	80001cc <HAL_NVIC_SetPriority>
	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7fc fbbe 	bl	80001cc <HAL_NVIC_SetPriority>

	/**NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <HAL_MspInit+0x88>)
 8003a52:	6853      	ldr	r3, [r2, #4]
 8003a54:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8003a5e:	b003      	add	sp, #12
 8003a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a64:	40021000 	.word	0x40021000
 8003a68:	40010000 	.word	0x40010000

08003a6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi) {
 8003a6c:	b510      	push	{r4, lr}

	GPIO_InitTypeDef GPIO_InitStruct;
	if (hspi->Instance == SPI1) {
 8003a6e:	6802      	ldr	r2, [r0, #0]
 8003a70:	4b12      	ldr	r3, [pc, #72]	; (8003abc <HAL_SPI_MspInit+0x50>)
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi) {
 8003a72:	b086      	sub	sp, #24
	if (hspi->Instance == SPI1) {
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d11e      	bne.n	8003ab6 <HAL_SPI_MspInit+0x4a>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE()
 8003a78:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8003a7c:	699a      	ldr	r2, [r3, #24]
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = SD_SCK_Pin | SD_MOSI_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a7e:	2401      	movs	r4, #1
		__HAL_RCC_SPI1_CLK_ENABLE()
 8003a80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a84:	619a      	str	r2, [r3, #24]
 8003a86:	699b      	ldr	r3, [r3, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a88:	22a0      	movs	r2, #160	; 0xa0
		__HAL_RCC_SPI1_CLK_ENABLE()
 8003a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	9b01      	ldr	r3, [sp, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a94:	480a      	ldr	r0, [pc, #40]	; (8003ac0 <HAL_SPI_MspInit+0x54>)
 8003a96:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a98:	e9cd 2302 	strd	r2, r3, [sp, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a9c:	e9cd 4404 	strd	r4, r4, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa0:	f7fc fbf0 	bl	8000284 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = SD_MISO_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aa4:	2140      	movs	r1, #64	; 0x40
 8003aa6:	2300      	movs	r3, #0
		GPIO_InitStruct.Pull = GPIO_PULLUP;
		HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8003aa8:	4805      	ldr	r0, [pc, #20]	; (8003ac0 <HAL_SPI_MspInit+0x54>)
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003aaa:	e9cd 1302 	strd	r1, r3, [sp, #8]
		HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8003aae:	a902      	add	r1, sp, #8
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ab0:	9404      	str	r4, [sp, #16]
		HAL_GPIO_Init(SD_MISO_GPIO_Port, &GPIO_InitStruct);
 8003ab2:	f7fc fbe7 	bl	8000284 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 8003ab6:	b006      	add	sp, #24
 8003ab8:	bd10      	pop	{r4, pc}
 8003aba:	bf00      	nop
 8003abc:	40013000 	.word	0x40013000
 8003ac0:	40010800 	.word	0x40010800

08003ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac4:	b510      	push	{r4, lr}
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8003aca:	2200      	movs	r2, #0
 8003acc:	2019      	movs	r0, #25
 8003ace:	f7fc fb7d 	bl	80001cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8003ad2:	2019      	movs	r0, #25
 8003ad4:	f7fc fbaa 	bl	800022c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ad8:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ada:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003adc:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ade:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ae0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae4:	619a      	str	r2, [r3, #24]
 8003ae6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ae8:	4c11      	ldr	r4, [pc, #68]	; (8003b30 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	9302      	str	r3, [sp, #8]
 8003af0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af2:	f7fd fc1f 	bl	8001334 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003af6:	f7fd fc05 	bl	8001304 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8003afa:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <HAL_InitTick+0x70>)
 8003afc:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003afe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003b02:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <HAL_InitTick+0x74>)
 8003b06:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8003b0a:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003b0c:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b0e:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b10:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8003b12:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b16:	f7fe f91b 	bl	8001d50 <HAL_TIM_Base_Init>
 8003b1a:	b920      	cbnz	r0, 8003b26 <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f7fe f832 	bl	8001b86 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003b22:	b008      	add	sp, #32
 8003b24:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8003b26:	2001      	movs	r0, #1
 8003b28:	e7fb      	b.n	8003b22 <HAL_InitTick+0x5e>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	20000198 	.word	0x20000198
 8003b34:	40012c00 	.word	0x40012c00
 8003b38:	000f4240 	.word	0x000f4240

08003b3c <NMI_Handler>:
 */
void NMI_Handler(void) {
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 8003b3c:	f7fd bc1a 	b.w	8001374 <HAL_RCC_NMI_IRQHandler>

08003b40 <HardFault_Handler>:
 */
void HardFault_Handler(void) {
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8003b40:	e7fe      	b.n	8003b40 <HardFault_Handler>

08003b42 <MemManage_Handler>:
 */
void MemManage_Handler(void) {
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003b42:	e7fe      	b.n	8003b42 <MemManage_Handler>

08003b44 <BusFault_Handler>:
 */
void BusFault_Handler(void) {
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003b44:	e7fe      	b.n	8003b44 <BusFault_Handler>

08003b46 <UsageFault_Handler>:
 */
void UsageFault_Handler(void) {
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8003b46:	e7fe      	b.n	8003b46 <UsageFault_Handler>

08003b48 <DebugMon_Handler>:

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b48:	4770      	bx	lr

08003b4a <SysTick_Handler>:
 8003b4a:	4770      	bx	lr

08003b4c <USB_LP_CAN1_RX0_IRQHandler>:
 */
void USB_LP_CAN1_RX0_IRQHandler(void) {
	/* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

	/* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003b4c:	4801      	ldr	r0, [pc, #4]	; (8003b54 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003b4e:	f7fc bd99 	b.w	8000684 <HAL_PCD_IRQHandler>
 8003b52:	bf00      	nop
 8003b54:	200003f8 	.word	0x200003f8

08003b58 <TIM1_UP_IRQHandler>:
 */
void TIM1_UP_IRQHandler(void) {
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */

	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8003b58:	4801      	ldr	r0, [pc, #4]	; (8003b60 <TIM1_UP_IRQHandler+0x8>)
 8003b5a:	f7fe b823 	b.w	8001ba4 <HAL_TIM_IRQHandler>
 8003b5e:	bf00      	nop
 8003b60:	20000198 	.word	0x20000198

08003b64 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <SystemInit+0x40>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003b6e:	6859      	ldr	r1, [r3, #4]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <SystemInit+0x44>)
 8003b72:	400a      	ands	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b7c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b88:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b90:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003b92:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b96:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <SystemInit+0x48>)
 8003b9e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	f8ff0000 	.word	0xf8ff0000
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */				        
void MX_USB_DEVICE_Init(void)
{
 8003bb0:	b510      	push	{r4, lr}
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003bb2:	4c09      	ldr	r4, [pc, #36]	; (8003bd8 <MX_USB_DEVICE_Init+0x28>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4908      	ldr	r1, [pc, #32]	; (8003bdc <MX_USB_DEVICE_Init+0x2c>)
 8003bba:	f7ff f8bb 	bl	8002d34 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC);
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4907      	ldr	r1, [pc, #28]	; (8003be0 <MX_USB_DEVICE_Init+0x30>)
 8003bc2:	f7ff f8cc 	bl	8002d5e <USBD_RegisterClass>

  USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS);
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	4906      	ldr	r1, [pc, #24]	; (8003be4 <MX_USB_DEVICE_Init+0x34>)
 8003bca:	f7fe fd79 	bl	80026c0 <USBD_MSC_RegisterStorage>

  USBD_Start(&hUsbDeviceFS);
 8003bce:	4620      	mov	r0, r4

}
 8003bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003bd4:	f7ff b8ca 	b.w	8002d6c <USBD_Start>
 8003bd8:	200001d4 	.word	0x200001d4
 8003bdc:	200000a8 	.word	0x200000a8
 8003be0:	20000000 	.word	0x20000000
 8003be4:	200000dc 	.word	0x200000dc

08003be8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003be8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_PCD_MspInit+0x3c>)
 8003bec:	6802      	ldr	r2, [r0, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d115      	bne.n	8003c1e <HAL_PCD_MspInit+0x36>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003bf2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003bf6:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003bf8:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8003bfa:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003bfe:	61da      	str	r2, [r3, #28]
 8003c00:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c02:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c08:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c0a:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003c0c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8003c0e:	f7fc fadd 	bl	80001cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c12:	2014      	movs	r0, #20
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003c14:	b003      	add	sp, #12
 8003c16:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003c1a:	f7fc bb07 	b.w	800022c <HAL_NVIC_EnableIRQ>
}
 8003c1e:	b003      	add	sp, #12
 8003c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c24:	40005c00 	.word	0x40005c00

08003c28 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003c28:	f500 717b 	add.w	r1, r0, #1004	; 0x3ec
 8003c2c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c30:	f7ff b8b5 	b.w	8002d9e <USBD_LL_SetupStage>

08003c34 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003c34:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003c3c:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c40:	f7ff b8da 	b.w	8002df8 <USBD_LL_DataOutStage>

08003c44 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003c44:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003c48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c4a:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c4e:	f7ff b903 	b.w	8002e58 <USBD_LL_DataInStage>

08003c52 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003c52:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c56:	f7ff b97f 	b.w	8002f58 <USBD_LL_SOF>

08003c5a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c64:	f7ff f966 	bl	8002f34 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c68:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
}
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003c70:	f7ff b941 	b.w	8002ef6 <USBD_LL_Reset>

08003c74 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003c74:	b510      	push	{r4, lr}
 8003c76:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c78:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c7c:	f7ff f95d 	bl	8002f3a <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003c80:	69a3      	ldr	r3, [r4, #24]
 8003c82:	b123      	cbz	r3, 8003c8e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c84:	4a02      	ldr	r2, [pc, #8]	; (8003c90 <HAL_PCD_SuspendCallback+0x1c>)
 8003c86:	6913      	ldr	r3, [r2, #16]
 8003c88:	f043 0306 	orr.w	r3, r3, #6
 8003c8c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003c8e:	bd10      	pop	{r4, pc}
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c94:	f8d0 041c 	ldr.w	r0, [r0, #1052]	; 0x41c
 8003c98:	f7ff b958 	b.w	8002f4c <USBD_LL_Resume>

08003c9c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003c9c:	b538      	push	{r3, r4, r5, lr}
  /* Link The driver to the stack */
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003c9e:	2308      	movs	r3, #8
{ 
 8003ca0:	4605      	mov	r5, r0
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <USBD_LL_Init+0x68>)
  hpcd_USB_FS.pData = pdev;
 8003ca4:	4818      	ldr	r0, [pc, #96]	; (8003d08 <USBD_LL_Init+0x6c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003ca6:	2400      	movs	r4, #0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003ca8:	2102      	movs	r1, #2
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003caa:	e9c0 2300 	strd	r2, r3, [r0]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003cae:	2303      	movs	r3, #3
  hpcd_USB_FS.pData = pdev;
 8003cb0:	f8c0 541c 	str.w	r5, [r0, #1052]	; 0x41c
  pdev->pData = &hpcd_USB_FS;
 8003cb4:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003cb8:	e9c0 1302 	strd	r1, r3, [r0, #8]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cbc:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cc0:	6204      	str	r4, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cc2:	f7fc fbbe 	bl	8000442 <HAL_PCD_Init>
  {
    //Error_Handler();
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4621      	mov	r1, r4
 8003cca:	2318      	movs	r3, #24
 8003ccc:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003cd0:	f7fc ffb2 	bl	8000c38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003cd4:	4622      	mov	r2, r4
 8003cd6:	2358      	movs	r3, #88	; 0x58
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003cde:	f7fc ffab 	bl	8000c38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);  
 8003ce2:	4622      	mov	r2, r4
 8003ce4:	2398      	movs	r3, #152	; 0x98
 8003ce6:	2181      	movs	r1, #129	; 0x81
 8003ce8:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003cec:	f7fc ffa4 	bl	8000c38 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);  
 8003cf0:	23d8      	movs	r3, #216	; 0xd8
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8003cfa:	f7fc ff9d 	bl	8000c38 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003cfe:	4620      	mov	r0, r4
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
 8003d02:	bf00      	nop
 8003d04:	40005c00 	.word	0x40005c00
 8003d08:	200003f8 	.word	0x200003f8

08003d0c <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003d0c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003d0e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d12:	f7fc fbfd 	bl	8000510 <HAL_PCD_Start>
     
  switch (hal_status) {
 8003d16:	2803      	cmp	r0, #3
 8003d18:	bf96      	itet	ls
 8003d1a:	4b02      	ldrls	r3, [pc, #8]	; (8003d24 <USBD_LL_Start+0x18>)
  hal_status = HAL_PCD_Start(pdev->pData);
 8003d1c:	2002      	movhi	r0, #2
 8003d1e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d20:	bd08      	pop	{r3, pc}
 8003d22:	bf00      	nop
 8003d24:	08004038 	.word	0x08004038

08003d28 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003d28:	b510      	push	{r4, lr}
 8003d2a:	4614      	mov	r4, r2
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003d2c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
{
 8003d30:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003d32:	4623      	mov	r3, r4
 8003d34:	f7fc fc17 	bl	8000566 <HAL_PCD_EP_Open>
                               ep_addr, 
                               ep_mps, 
                               ep_type);
  
     
  switch (hal_status) {
 8003d38:	2803      	cmp	r0, #3
 8003d3a:	bf96      	itet	ls
 8003d3c:	4b01      	ldrls	r3, [pc, #4]	; (8003d44 <USBD_LL_OpenEP+0x1c>)
  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003d3e:	2002      	movhi	r0, #2
 8003d40:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003d42:	bd10      	pop	{r4, pc}
 8003d44:	08004038 	.word	0x08004038

08003d48 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d4e:	f7fc fc2d 	bl	80005ac <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8003d52:	2803      	cmp	r0, #3
 8003d54:	bf96      	itet	ls
 8003d56:	4b02      	ldrls	r3, [pc, #8]	; (8003d60 <USBD_LL_CloseEP+0x18>)
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003d58:	2002      	movhi	r0, #2
 8003d5a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d5c:	bd08      	pop	{r3, pc}
 8003d5e:	bf00      	nop
 8003d60:	08004038 	.word	0x08004038

08003d64 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_FlushEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d64:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8003d66:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d6a:	f7fc ff4c 	bl	8000c06 <HAL_PCD_EP_Flush>
      
  switch (hal_status) {
 8003d6e:	2803      	cmp	r0, #3
 8003d70:	bf96      	itet	ls
 8003d72:	4b02      	ldrls	r3, [pc, #8]	; (8003d7c <USBD_LL_FlushEP+0x18>)
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8003d74:	2002      	movhi	r0, #2
 8003d76:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d78:	bd08      	pop	{r3, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08004038 	.word	0x08004038

08003d80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d80:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d82:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d86:	f7fc fef3 	bl	8000b70 <HAL_PCD_EP_SetStall>
      
  switch (hal_status) {
 8003d8a:	2803      	cmp	r0, #3
 8003d8c:	bf96      	itet	ls
 8003d8e:	4b02      	ldrls	r3, [pc, #8]	; (8003d98 <USBD_LL_StallEP+0x18>)
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003d90:	2002      	movhi	r0, #2
 8003d92:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d94:	bd08      	pop	{r3, pc}
 8003d96:	bf00      	nop
 8003d98:	08004038 	.word	0x08004038

08003d9c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d9c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d9e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003da2:	f7fc ff0d 	bl	8000bc0 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8003da6:	2803      	cmp	r0, #3
 8003da8:	bf96      	itet	ls
 8003daa:	4b02      	ldrls	r3, [pc, #8]	; (8003db4 <USBD_LL_ClearStallEP+0x18>)
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003dac:	2002      	movhi	r0, #2
 8003dae:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003db0:	bd08      	pop	{r3, pc}
 8003db2:	bf00      	nop
 8003db4:	08004038 	.word	0x08004038

08003db8 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003db8:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003dba:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003dbe:	bf45      	ittet	mi
 8003dc0:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003dc4:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003dc8:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003dcc:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003dd0:	bf58      	it	pl
 8003dd2:	f893 020a 	ldrbpl.w	r0, [r3, #522]	; 0x20a
  }
}
 8003dd6:	4770      	bx	lr

08003dd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003dd8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003dda:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dde:	f7fc fbae 	bl	800053e <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8003de2:	2803      	cmp	r0, #3
 8003de4:	bf96      	itet	ls
 8003de6:	4b02      	ldrls	r3, [pc, #8]	; (8003df0 <USBD_LL_SetUSBAddress+0x18>)
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003de8:	2002      	movhi	r0, #2
 8003dea:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003dec:	bd08      	pop	{r3, pc}
 8003dee:	bf00      	nop
 8003df0:	08004038 	.word	0x08004038

08003df4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003df4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003df6:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003dfa:	f7fc fc21 	bl	8000640 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8003dfe:	2803      	cmp	r0, #3
 8003e00:	bf96      	itet	ls
 8003e02:	4b02      	ldrls	r3, [pc, #8]	; (8003e0c <USBD_LL_Transmit+0x18>)
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003e04:	2002      	movhi	r0, #2
 8003e06:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003e08:	bd08      	pop	{r3, pc}
 8003e0a:	bf00      	nop
 8003e0c:	08004038 	.word	0x08004038

08003e10 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003e10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e16:	f7fc fbea 	bl	80005ee <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8003e1a:	2803      	cmp	r0, #3
 8003e1c:	bf96      	itet	ls
 8003e1e:	4b02      	ldrls	r3, [pc, #8]	; (8003e28 <USBD_LL_PrepareReceive+0x18>)
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003e20:	2002      	movhi	r0, #2
 8003e22:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003e24:	bd08      	pop	{r3, pc}
 8003e26:	bf00      	nop
 8003e28:	08004038 	.word	0x08004038

08003e2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
{
 8003e2c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8003e2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003e32:	f7fc fbfe 	bl	8000632 <HAL_PCD_EP_GetRxCount>
}
 8003e36:	bd08      	pop	{r3, pc}

08003e38 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003e38:	4800      	ldr	r0, [pc, #0]	; (8003e3c <USBD_static_malloc+0x4>)
 8003e3a:	4770      	bx	lr
 8003e3c:	20000818 	.word	0x20000818

08003e40 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8003e40:	4770      	bx	lr

08003e42 <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High Connection State */
   
  } 
/* USER CODE END 5 */
}
 8003e42:	4770      	bx	lr

08003e44 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e44:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003e46:	4801      	ldr	r0, [pc, #4]	; (8003e4c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003e48:	800b      	strh	r3, [r1, #0]
}
 8003e4a:	4770      	bx	lr
 8003e4c:	200000c4 	.word	0x200000c4

08003e50 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003e50:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003e52:	4801      	ldr	r0, [pc, #4]	; (8003e58 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8003e54:	800b      	strh	r3, [r1, #0]
}
 8003e56:	4770      	bx	lr
 8003e58:	200000d8 	.word	0x200000d8

08003e5c <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e5c:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e5e:	4c04      	ldr	r4, [pc, #16]	; (8003e70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8003e60:	460a      	mov	r2, r1
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003e62:	4804      	ldr	r0, [pc, #16]	; (8003e74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003e64:	4621      	mov	r1, r4
 8003e66:	f7ff fa23 	bl	80032b0 <USBD_GetString>
  return USBD_StrDesc;
}
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	bd10      	pop	{r4, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000a88 	.word	0x20000a88
 8003e74:	0800403c 	.word	0x0800403c

08003e78 <USBD_FS_ProductStrDescriptor>:
{
 8003e78:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e7a:	4c04      	ldr	r4, [pc, #16]	; (8003e8c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8003e7c:	460a      	mov	r2, r1
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003e7e:	4804      	ldr	r0, [pc, #16]	; (8003e90 <USBD_FS_ProductStrDescriptor+0x18>)
 8003e80:	4621      	mov	r1, r4
 8003e82:	f7ff fa15 	bl	80032b0 <USBD_GetString>
}
 8003e86:	4620      	mov	r0, r4
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000a88 	.word	0x20000a88
 8003e90:	08004046 	.word	0x08004046

08003e94 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e94:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003e96:	4c04      	ldr	r4, [pc, #16]	; (8003ea8 <USBD_FS_SerialStrDescriptor+0x14>)
{
 8003e98:	460a      	mov	r2, r1
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003e9a:	4804      	ldr	r0, [pc, #16]	; (8003eac <USBD_FS_SerialStrDescriptor+0x18>)
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	f7ff fa07 	bl	80032b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	bd10      	pop	{r4, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000a88 	.word	0x20000a88
 8003eac:	08004059 	.word	0x08004059

08003eb0 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003eb0:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003eb2:	4c04      	ldr	r4, [pc, #16]	; (8003ec4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8003eb4:	460a      	mov	r2, r1
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003eb6:	4804      	ldr	r0, [pc, #16]	; (8003ec8 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003eb8:	4621      	mov	r1, r4
 8003eba:	f7ff f9f9 	bl	80032b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	bd10      	pop	{r4, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20000a88 	.word	0x20000a88
 8003ec8:	0800405b 	.word	0x0800405b

08003ecc <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003ecc:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ece:	4c04      	ldr	r4, [pc, #16]	; (8003ee0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8003ed0:	460a      	mov	r2, r1
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003ed2:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	f7ff f9eb 	bl	80032b0 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003eda:	4620      	mov	r0, r4
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	bf00      	nop
 8003ee0:	20000a88 	.word	0x20000a88
 8003ee4:	08004066 	.word	0x08004066

08003ee8 <STORAGE_Init_FS>:
int8_t STORAGE_Init_FS (uint8_t lun)
{
  /* USER CODE BEGIN 2 */ 
  return (USBD_OK);
  /* USER CODE END 2 */ 
}
 8003ee8:	2000      	movs	r0, #0
 8003eea:	4770      	bx	lr

08003eec <STORAGE_GetMaxLun_FS>:
int8_t STORAGE_GetMaxLun_FS (void)
{
  /* USER CODE BEGIN 8 */ 
  return (STORAGE_LUN_NBR - 1);
  /* USER CODE END 8 */ 
}
 8003eec:	2000      	movs	r0, #0
 8003eee:	4770      	bx	lr

08003ef0 <STORAGE_Write_FS>:
{
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	b508      	push	{r3, lr}
 8003ef4:	4611      	mov	r1, r2
	if (SDCardWriteSect(buf, blk_addr, blk_len))
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f7ff fcb2 	bl	8003860 <SDCardWriteSect>
 8003efc:	f080 0001 	eor.w	r0, r0, #1
 8003f00:	0040      	lsls	r0, r0, #1
}
 8003f02:	b240      	sxtb	r0, r0
 8003f04:	bd08      	pop	{r3, pc}

08003f06 <STORAGE_Read_FS>:
{
 8003f06:	4608      	mov	r0, r1
 8003f08:	b508      	push	{r3, lr}
 8003f0a:	4611      	mov	r1, r2
	if (SDCardReadSect(buf, blk_addr, blk_len))
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f7ff fca1 	bl	8003854 <SDCardReadSect>
 8003f12:	f080 0001 	eor.w	r0, r0, #1
 8003f16:	0040      	lsls	r0, r0, #1
}
 8003f18:	b240      	sxtb	r0, r0
 8003f1a:	bd08      	pop	{r3, pc}

08003f1c <STORAGE_GetCapacity_FS>:
{
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	460d      	mov	r5, r1
 8003f20:	4614      	mov	r4, r2
  *block_num  = SDCardSectorCount();
 8003f22:	f7ff fca3 	bl	800386c <SDCardSectorCount>
  *block_size = 512;
 8003f26:	f44f 7300 	mov.w	r3, #512	; 0x200
  *block_num  = SDCardSectorCount();
 8003f2a:	6028      	str	r0, [r5, #0]
}
 8003f2c:	2000      	movs	r0, #0
  *block_size = 512;
 8003f2e:	8023      	strh	r3, [r4, #0]
}
 8003f30:	bd38      	pop	{r3, r4, r5, pc}

08003f32 <STORAGE_IsWriteProtected_FS>:
 8003f32:	2000      	movs	r0, #0
 8003f34:	4770      	bx	lr

08003f36 <STORAGE_IsReady_FS>:
 8003f36:	2000      	movs	r0, #0
 8003f38:	4770      	bx	lr
	...

08003f3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003f3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003f3e:	e003      	b.n	8003f48 <LoopCopyDataInit>

08003f40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003f42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003f44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003f46:	3104      	adds	r1, #4

08003f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003f48:	480a      	ldr	r0, [pc, #40]	; (8003f74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003f4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003f4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003f50:	d3f6      	bcc.n	8003f40 <CopyDataInit>
  ldr r2, =_sbss
 8003f52:	4a0a      	ldr	r2, [pc, #40]	; (8003f7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003f54:	e002      	b.n	8003f5c <LoopFillZerobss>

08003f56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003f56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003f58:	f842 3b04 	str.w	r3, [r2], #4

08003f5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003f5c:	4b08      	ldr	r3, [pc, #32]	; (8003f80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003f5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003f60:	d3f9      	bcc.n	8003f56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003f62:	f7ff fdff 	bl	8003b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f66:	f000 f817 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003f6a:	f7ff fc4d 	bl	8003808 <main>
  bx lr
 8003f6e:	4770      	bx	lr
  ldr r3, =_sidata
 8003f70:	080040a4 	.word	0x080040a4
  ldr r0, =_sdata
 8003f74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003f78:	200000fc 	.word	0x200000fc
  ldr r2, =_sbss
 8003f7c:	20000100 	.word	0x20000100
  ldr r3, = _ebss
 8003f80:	20000ac8 	.word	0x20000ac8

08003f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003f84:	e7fe      	b.n	8003f84 <ADC1_2_IRQHandler>

08003f86 <memset>:
 8003f86:	4603      	mov	r3, r0
 8003f88:	4402      	add	r2, r0
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d100      	bne.n	8003f90 <memset+0xa>
 8003f8e:	4770      	bx	lr
 8003f90:	f803 1b01 	strb.w	r1, [r3], #1
 8003f94:	e7f9      	b.n	8003f8a <memset+0x4>
	...

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	4d0c      	ldr	r5, [pc, #48]	; (8003fd0 <__libc_init_array+0x38>)
 8003f9e:	4c0d      	ldr	r4, [pc, #52]	; (8003fd4 <__libc_init_array+0x3c>)
 8003fa0:	1b64      	subs	r4, r4, r5
 8003fa2:	10a4      	asrs	r4, r4, #2
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	f000 f81a 	bl	8003fe0 <_init>
 8003fac:	2600      	movs	r6, #0
 8003fae:	4d0a      	ldr	r5, [pc, #40]	; (8003fd8 <__libc_init_array+0x40>)
 8003fb0:	4c0a      	ldr	r4, [pc, #40]	; (8003fdc <__libc_init_array+0x44>)
 8003fb2:	1b64      	subs	r4, r4, r5
 8003fb4:	10a4      	asrs	r4, r4, #2
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	08004098 	.word	0x08004098
 8003fd4:	08004098 	.word	0x08004098
 8003fd8:	08004098 	.word	0x08004098
 8003fdc:	080040a0 	.word	0x080040a0

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
